
Bai3_Lcd_button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053e0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004350  08005568  08005568  00015568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080098b8  080098b8  00020030  2**0
                  CONTENTS
  4 .ARM          00000008  080098b8  080098b8  000198b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080098c0  080098c0  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080098c0  080098c0  000198c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080098c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020030  2**0
                  CONTENTS
 10 .bss          0000025c  20000030  20000030  00020030  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000028c  2000028c  00020030  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013eb0  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002e1e  00000000  00000000  00033f10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f10  00000000  00000000  00036d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d90  00000000  00000000  00037c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ac2  00000000  00000000  000389d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013769  00000000  00000000  0005b492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0b1  00000000  00000000  0006ebfb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0013ccac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dfc  00000000  00000000  0013cd00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000030 	.word	0x20000030
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005550 	.word	0x08005550

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000034 	.word	0x20000034
 80001c4:	08005550 	.word	0x08005550

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96e 	b.w	8000c98 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	4604      	mov	r4, r0
 80009dc:	468c      	mov	ip, r1
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f040 8083 	bne.w	8000aea <__udivmoddi4+0x116>
 80009e4:	428a      	cmp	r2, r1
 80009e6:	4617      	mov	r7, r2
 80009e8:	d947      	bls.n	8000a7a <__udivmoddi4+0xa6>
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	b142      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009f0:	f1c2 0020 	rsb	r0, r2, #32
 80009f4:	fa24 f000 	lsr.w	r0, r4, r0
 80009f8:	4091      	lsls	r1, r2
 80009fa:	4097      	lsls	r7, r2
 80009fc:	ea40 0c01 	orr.w	ip, r0, r1
 8000a00:	4094      	lsls	r4, r2
 8000a02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a06:	0c23      	lsrs	r3, r4, #16
 8000a08:	fbbc f6f8 	udiv	r6, ip, r8
 8000a0c:	fa1f fe87 	uxth.w	lr, r7
 8000a10:	fb08 c116 	mls	r1, r8, r6, ip
 8000a14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a18:	fb06 f10e 	mul.w	r1, r6, lr
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d909      	bls.n	8000a34 <__udivmoddi4+0x60>
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a26:	f080 8119 	bcs.w	8000c5c <__udivmoddi4+0x288>
 8000a2a:	4299      	cmp	r1, r3
 8000a2c:	f240 8116 	bls.w	8000c5c <__udivmoddi4+0x288>
 8000a30:	3e02      	subs	r6, #2
 8000a32:	443b      	add	r3, r7
 8000a34:	1a5b      	subs	r3, r3, r1
 8000a36:	b2a4      	uxth	r4, r4
 8000a38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a48:	45a6      	cmp	lr, r4
 8000a4a:	d909      	bls.n	8000a60 <__udivmoddi4+0x8c>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a52:	f080 8105 	bcs.w	8000c60 <__udivmoddi4+0x28c>
 8000a56:	45a6      	cmp	lr, r4
 8000a58:	f240 8102 	bls.w	8000c60 <__udivmoddi4+0x28c>
 8000a5c:	3802      	subs	r0, #2
 8000a5e:	443c      	add	r4, r7
 8000a60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a64:	eba4 040e 	sub.w	r4, r4, lr
 8000a68:	2600      	movs	r6, #0
 8000a6a:	b11d      	cbz	r5, 8000a74 <__udivmoddi4+0xa0>
 8000a6c:	40d4      	lsrs	r4, r2
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e9c5 4300 	strd	r4, r3, [r5]
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	b902      	cbnz	r2, 8000a7e <__udivmoddi4+0xaa>
 8000a7c:	deff      	udf	#255	; 0xff
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d150      	bne.n	8000b28 <__udivmoddi4+0x154>
 8000a86:	1bcb      	subs	r3, r1, r7
 8000a88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a8c:	fa1f f887 	uxth.w	r8, r7
 8000a90:	2601      	movs	r6, #1
 8000a92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a96:	0c21      	lsrs	r1, r4, #16
 8000a98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000aa0:	fb08 f30c 	mul.w	r3, r8, ip
 8000aa4:	428b      	cmp	r3, r1
 8000aa6:	d907      	bls.n	8000ab8 <__udivmoddi4+0xe4>
 8000aa8:	1879      	adds	r1, r7, r1
 8000aaa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aae:	d202      	bcs.n	8000ab6 <__udivmoddi4+0xe2>
 8000ab0:	428b      	cmp	r3, r1
 8000ab2:	f200 80e9 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000ab6:	4684      	mov	ip, r0
 8000ab8:	1ac9      	subs	r1, r1, r3
 8000aba:	b2a3      	uxth	r3, r4
 8000abc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ac0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ac4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac8:	fb08 f800 	mul.w	r8, r8, r0
 8000acc:	45a0      	cmp	r8, r4
 8000ace:	d907      	bls.n	8000ae0 <__udivmoddi4+0x10c>
 8000ad0:	193c      	adds	r4, r7, r4
 8000ad2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ad6:	d202      	bcs.n	8000ade <__udivmoddi4+0x10a>
 8000ad8:	45a0      	cmp	r8, r4
 8000ada:	f200 80d9 	bhi.w	8000c90 <__udivmoddi4+0x2bc>
 8000ade:	4618      	mov	r0, r3
 8000ae0:	eba4 0408 	sub.w	r4, r4, r8
 8000ae4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae8:	e7bf      	b.n	8000a6a <__udivmoddi4+0x96>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d909      	bls.n	8000b02 <__udivmoddi4+0x12e>
 8000aee:	2d00      	cmp	r5, #0
 8000af0:	f000 80b1 	beq.w	8000c56 <__udivmoddi4+0x282>
 8000af4:	2600      	movs	r6, #0
 8000af6:	e9c5 0100 	strd	r0, r1, [r5]
 8000afa:	4630      	mov	r0, r6
 8000afc:	4631      	mov	r1, r6
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	fab3 f683 	clz	r6, r3
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d14a      	bne.n	8000ba0 <__udivmoddi4+0x1cc>
 8000b0a:	428b      	cmp	r3, r1
 8000b0c:	d302      	bcc.n	8000b14 <__udivmoddi4+0x140>
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	f200 80b8 	bhi.w	8000c84 <__udivmoddi4+0x2b0>
 8000b14:	1a84      	subs	r4, r0, r2
 8000b16:	eb61 0103 	sbc.w	r1, r1, r3
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	468c      	mov	ip, r1
 8000b1e:	2d00      	cmp	r5, #0
 8000b20:	d0a8      	beq.n	8000a74 <__udivmoddi4+0xa0>
 8000b22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b26:	e7a5      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000b28:	f1c2 0320 	rsb	r3, r2, #32
 8000b2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b30:	4097      	lsls	r7, r2
 8000b32:	fa01 f002 	lsl.w	r0, r1, r2
 8000b36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b3a:	40d9      	lsrs	r1, r3
 8000b3c:	4330      	orrs	r0, r6
 8000b3e:	0c03      	lsrs	r3, r0, #16
 8000b40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b50:	fb06 f108 	mul.w	r1, r6, r8
 8000b54:	4299      	cmp	r1, r3
 8000b56:	fa04 f402 	lsl.w	r4, r4, r2
 8000b5a:	d909      	bls.n	8000b70 <__udivmoddi4+0x19c>
 8000b5c:	18fb      	adds	r3, r7, r3
 8000b5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b62:	f080 808d 	bcs.w	8000c80 <__udivmoddi4+0x2ac>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 808a 	bls.w	8000c80 <__udivmoddi4+0x2ac>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	443b      	add	r3, r7
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b281      	uxth	r1, r0
 8000b74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b80:	fb00 f308 	mul.w	r3, r0, r8
 8000b84:	428b      	cmp	r3, r1
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x1c4>
 8000b88:	1879      	adds	r1, r7, r1
 8000b8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b8e:	d273      	bcs.n	8000c78 <__udivmoddi4+0x2a4>
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d971      	bls.n	8000c78 <__udivmoddi4+0x2a4>
 8000b94:	3802      	subs	r0, #2
 8000b96:	4439      	add	r1, r7
 8000b98:	1acb      	subs	r3, r1, r3
 8000b9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b9e:	e778      	b.n	8000a92 <__udivmoddi4+0xbe>
 8000ba0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ba4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000bac:	431c      	orrs	r4, r3
 8000bae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000bb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000bb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bbe:	431f      	orrs	r7, r3
 8000bc0:	0c3b      	lsrs	r3, r7, #16
 8000bc2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bc6:	fa1f f884 	uxth.w	r8, r4
 8000bca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bce:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bd2:	fb09 fa08 	mul.w	sl, r9, r8
 8000bd6:	458a      	cmp	sl, r1
 8000bd8:	fa02 f206 	lsl.w	r2, r2, r6
 8000bdc:	fa00 f306 	lsl.w	r3, r0, r6
 8000be0:	d908      	bls.n	8000bf4 <__udivmoddi4+0x220>
 8000be2:	1861      	adds	r1, r4, r1
 8000be4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be8:	d248      	bcs.n	8000c7c <__udivmoddi4+0x2a8>
 8000bea:	458a      	cmp	sl, r1
 8000bec:	d946      	bls.n	8000c7c <__udivmoddi4+0x2a8>
 8000bee:	f1a9 0902 	sub.w	r9, r9, #2
 8000bf2:	4421      	add	r1, r4
 8000bf4:	eba1 010a 	sub.w	r1, r1, sl
 8000bf8:	b2bf      	uxth	r7, r7
 8000bfa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bfe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c06:	fb00 f808 	mul.w	r8, r0, r8
 8000c0a:	45b8      	cmp	r8, r7
 8000c0c:	d907      	bls.n	8000c1e <__udivmoddi4+0x24a>
 8000c0e:	19e7      	adds	r7, r4, r7
 8000c10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c14:	d22e      	bcs.n	8000c74 <__udivmoddi4+0x2a0>
 8000c16:	45b8      	cmp	r8, r7
 8000c18:	d92c      	bls.n	8000c74 <__udivmoddi4+0x2a0>
 8000c1a:	3802      	subs	r0, #2
 8000c1c:	4427      	add	r7, r4
 8000c1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c22:	eba7 0708 	sub.w	r7, r7, r8
 8000c26:	fba0 8902 	umull	r8, r9, r0, r2
 8000c2a:	454f      	cmp	r7, r9
 8000c2c:	46c6      	mov	lr, r8
 8000c2e:	4649      	mov	r1, r9
 8000c30:	d31a      	bcc.n	8000c68 <__udivmoddi4+0x294>
 8000c32:	d017      	beq.n	8000c64 <__udivmoddi4+0x290>
 8000c34:	b15d      	cbz	r5, 8000c4e <__udivmoddi4+0x27a>
 8000c36:	ebb3 020e 	subs.w	r2, r3, lr
 8000c3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c42:	40f2      	lsrs	r2, r6
 8000c44:	ea4c 0202 	orr.w	r2, ip, r2
 8000c48:	40f7      	lsrs	r7, r6
 8000c4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000c4e:	2600      	movs	r6, #0
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	462e      	mov	r6, r5
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e70b      	b.n	8000a74 <__udivmoddi4+0xa0>
 8000c5c:	4606      	mov	r6, r0
 8000c5e:	e6e9      	b.n	8000a34 <__udivmoddi4+0x60>
 8000c60:	4618      	mov	r0, r3
 8000c62:	e6fd      	b.n	8000a60 <__udivmoddi4+0x8c>
 8000c64:	4543      	cmp	r3, r8
 8000c66:	d2e5      	bcs.n	8000c34 <__udivmoddi4+0x260>
 8000c68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000c70:	3801      	subs	r0, #1
 8000c72:	e7df      	b.n	8000c34 <__udivmoddi4+0x260>
 8000c74:	4608      	mov	r0, r1
 8000c76:	e7d2      	b.n	8000c1e <__udivmoddi4+0x24a>
 8000c78:	4660      	mov	r0, ip
 8000c7a:	e78d      	b.n	8000b98 <__udivmoddi4+0x1c4>
 8000c7c:	4681      	mov	r9, r0
 8000c7e:	e7b9      	b.n	8000bf4 <__udivmoddi4+0x220>
 8000c80:	4666      	mov	r6, ip
 8000c82:	e775      	b.n	8000b70 <__udivmoddi4+0x19c>
 8000c84:	4630      	mov	r0, r6
 8000c86:	e74a      	b.n	8000b1e <__udivmoddi4+0x14a>
 8000c88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c8c:	4439      	add	r1, r7
 8000c8e:	e713      	b.n	8000ab8 <__udivmoddi4+0xe4>
 8000c90:	3802      	subs	r0, #2
 8000c92:	443c      	add	r4, r7
 8000c94:	e724      	b.n	8000ae0 <__udivmoddi4+0x10c>
 8000c96:	bf00      	nop

08000c98 <__aeabi_idiv0>:
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop

08000c9c <button_init>:
 * @brief  Init matrix button
 * @param  None
 * @retval None
 */
void button_init()
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	2108      	movs	r1, #8
 8000ca4:	4802      	ldr	r0, [pc, #8]	; (8000cb0 <button_init+0x14>)
 8000ca6:	f002 fda9 	bl	80037fc <HAL_GPIO_WritePin>
}
 8000caa:	bf00      	nop
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40020c00 	.word	0x40020c00

08000cb4 <button_Scan>:
 * @param  None
 * @note  	Call every 50ms
 * @retval None
 */
void button_Scan()
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2108      	movs	r1, #8
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <button_Scan+0xc8>)
 8000cc0:	f002 fd9c 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2108      	movs	r1, #8
 8000cc8:	482c      	ldr	r0, [pc, #176]	; (8000d7c <button_Scan+0xc8>)
 8000cca:	f002 fd97 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void *)&spi_button, 2, 10);
 8000cce:	230a      	movs	r3, #10
 8000cd0:	2202      	movs	r2, #2
 8000cd2:	492b      	ldr	r1, [pc, #172]	; (8000d80 <button_Scan+0xcc>)
 8000cd4:	482b      	ldr	r0, [pc, #172]	; (8000d84 <button_Scan+0xd0>)
 8000cd6:	f003 fa74 	bl	80041c2 <HAL_SPI_Receive>
	int button_index = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 8000cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ce2:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++)
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e03f      	b.n	8000d6a <button_Scan+0xb6>
	{
		if (i >= 0 && i <= 3)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	db06      	blt.n	8000cfe <button_Scan+0x4a>
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	dc03      	bgt.n	8000cfe <button_Scan+0x4a>
		{
			button_index = i + 4;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	e018      	b.n	8000d30 <button_Scan+0x7c>
		}
		else if (i >= 4 && i <= 7)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	dd07      	ble.n	8000d14 <button_Scan+0x60>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2b07      	cmp	r3, #7
 8000d08:	dc04      	bgt.n	8000d14 <button_Scan+0x60>
		{
			button_index = 7 - i;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f1c3 0307 	rsb	r3, r3, #7
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	e00d      	b.n	8000d30 <button_Scan+0x7c>
		}
		else if (i >= 8 && i <= 11)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	dd06      	ble.n	8000d28 <button_Scan+0x74>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2b0b      	cmp	r3, #11
 8000d1e:	dc03      	bgt.n	8000d28 <button_Scan+0x74>
		{
			button_index = i + 4;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3304      	adds	r3, #4
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	e003      	b.n	8000d30 <button_Scan+0x7c>
		}
		else
		{
			button_index = 23 - i;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f1c3 0317 	rsb	r3, r3, #23
 8000d2e:	60fb      	str	r3, [r7, #12]
		}
		if (spi_button & mask)
 8000d30:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <button_Scan+0xcc>)
 8000d32:	881a      	ldrh	r2, [r3, #0]
 8000d34:	897b      	ldrh	r3, [r7, #10]
 8000d36:	4013      	ands	r3, r2
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d005      	beq.n	8000d4a <button_Scan+0x96>
			button_count[button_index] = 0;
 8000d3e:	4a12      	ldr	r2, [pc, #72]	; (8000d88 <button_Scan+0xd4>)
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	2100      	movs	r1, #0
 8000d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d48:	e009      	b.n	8000d5e <button_Scan+0xaa>
		else
			button_count[button_index]++;
 8000d4a:	4a0f      	ldr	r2, [pc, #60]	; (8000d88 <button_Scan+0xd4>)
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d52:	3301      	adds	r3, #1
 8000d54:	b299      	uxth	r1, r3
 8000d56:	4a0c      	ldr	r2, [pc, #48]	; (8000d88 <button_Scan+0xd4>)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 8000d5e:	897b      	ldrh	r3, [r7, #10]
 8000d60:	085b      	lsrs	r3, r3, #1
 8000d62:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3301      	adds	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	ddbc      	ble.n	8000cea <button_Scan+0x36>
	}
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3710      	adds	r7, #16
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	40020c00 	.word	0x40020c00
 8000d80:	2000004c 	.word	0x2000004c
 8000d84:	200001e8 	.word	0x200001e8
 8000d88:	2000005c 	.word	0x2000005c

08000d8c <is_button_pressed>:
 * @param  id - id of button [0...15]
 * @retval 1: button is pressed
 * 		0: invalid para OR button is not pressed
 */
bool is_button_pressed(uint8_t id)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	4603      	mov	r3, r0
 8000d94:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	2b10      	cmp	r3, #16
 8000d9a:	d901      	bls.n	8000da0 <is_button_pressed+0x14>
		return 0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	e008      	b.n	8000db2 <is_button_pressed+0x26>
	return button_count[id] == 1;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <is_button_pressed+0x34>)
 8000da4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	bf0c      	ite	eq
 8000dac:	2301      	moveq	r3, #1
 8000dae:	2300      	movne	r3, #0
 8000db0:	b2db      	uxtb	r3, r3
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	2000005c 	.word	0x2000005c

08000dc4 <is_button_long_pressed>:
 * @param  id - id of button [0...15]
 * @retval 1: button is long pressed
 * 		0: invalid para OR button is not long pressed
 */
bool is_button_long_pressed(uint8_t id)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	71fb      	strb	r3, [r7, #7]
	if (id > 16)
 8000dce:	79fb      	ldrb	r3, [r7, #7]
 8000dd0:	2b10      	cmp	r3, #16
 8000dd2:	d901      	bls.n	8000dd8 <is_button_long_pressed+0x14>
		return 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e00a      	b.n	8000dee <is_button_long_pressed+0x2a>
	if (button_count[id] < time_value)
 8000dd8:	79fb      	ldrb	r3, [r7, #7]
 8000dda:	4a08      	ldr	r2, [pc, #32]	; (8000dfc <is_button_long_pressed+0x38>)
 8000ddc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000de0:	4b07      	ldr	r3, [pc, #28]	; (8000e00 <is_button_long_pressed+0x3c>)
 8000de2:	881b      	ldrh	r3, [r3, #0]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d201      	bcs.n	8000dec <is_button_long_pressed+0x28>
	{
		return 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	e000      	b.n	8000dee <is_button_long_pressed+0x2a>
	}
	return 1;
 8000dec:	2301      	movs	r3, #1
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	370c      	adds	r7, #12
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	2000005c 	.word	0x2000005c
 8000e00:	20000000 	.word	0x20000000

08000e04 <traffic_light_fsm>:
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, green);
    }
}

/* FSM điều khiển đèn giao thông */
void traffic_light_fsm(void) {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
    switch (tl_state) {
 8000e08:	4b40      	ldr	r3, [pc, #256]	; (8000f0c <traffic_light_fsm+0x108>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d87a      	bhi.n	8000f06 <traffic_light_fsm+0x102>
 8000e10:	a201      	add	r2, pc, #4	; (adr r2, 8000e18 <traffic_light_fsm+0x14>)
 8000e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e16:	bf00      	nop
 8000e18:	08000e29 	.word	0x08000e29
 8000e1c:	08000e59 	.word	0x08000e59
 8000e20:	08000e91 	.word	0x08000e91
 8000e24:	08000ec1 	.word	0x08000ec1
        case RED_GREEN:
            control_traffic_light(0, 1, 0, 0); // Đèn chính: đỏ
 8000e28:	2300      	movs	r3, #0
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	2000      	movs	r0, #0
 8000e30:	f001 fd9c 	bl	800296c <control_traffic_light>
            control_traffic_light(1, 0, 0, 1); // Đèn phụ: xanh
 8000e34:	2301      	movs	r3, #1
 8000e36:	2200      	movs	r2, #0
 8000e38:	2100      	movs	r1, #0
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f001 fd96 	bl	800296c <control_traffic_light>
            if (timer2 == 0) {
 8000e40:	4b33      	ldr	r3, [pc, #204]	; (8000f10 <traffic_light_fsm+0x10c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d157      	bne.n	8000ef8 <traffic_light_fsm+0xf4>
                timer2 = yellow_time;
 8000e48:	4b32      	ldr	r3, [pc, #200]	; (8000f14 <traffic_light_fsm+0x110>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a30      	ldr	r2, [pc, #192]	; (8000f10 <traffic_light_fsm+0x10c>)
 8000e4e:	6013      	str	r3, [r2, #0]
                tl_state = RED_YELLOW;
 8000e50:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <traffic_light_fsm+0x108>)
 8000e52:	2201      	movs	r2, #1
 8000e54:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000e56:	e04f      	b.n	8000ef8 <traffic_light_fsm+0xf4>

        case RED_YELLOW:
            control_traffic_light(0, 1, 0, 0); // Đèn chính: đỏ
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2000      	movs	r0, #0
 8000e60:	f001 fd84 	bl	800296c <control_traffic_light>
            control_traffic_light(1, 0, 1, 0); // Đèn phụ: vàng
 8000e64:	2300      	movs	r3, #0
 8000e66:	2201      	movs	r2, #1
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	f001 fd7e 	bl	800296c <control_traffic_light>
            if (timer2 == 0) {
 8000e70:	4b27      	ldr	r3, [pc, #156]	; (8000f10 <traffic_light_fsm+0x10c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d141      	bne.n	8000efc <traffic_light_fsm+0xf8>
                timer1 = green_time;
 8000e78:	4b27      	ldr	r3, [pc, #156]	; (8000f18 <traffic_light_fsm+0x114>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	4a27      	ldr	r2, [pc, #156]	; (8000f1c <traffic_light_fsm+0x118>)
 8000e7e:	6013      	str	r3, [r2, #0]
                timer2 = red_time;
 8000e80:	4b27      	ldr	r3, [pc, #156]	; (8000f20 <traffic_light_fsm+0x11c>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a22      	ldr	r2, [pc, #136]	; (8000f10 <traffic_light_fsm+0x10c>)
 8000e86:	6013      	str	r3, [r2, #0]
                tl_state = GREEN_RED;
 8000e88:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <traffic_light_fsm+0x108>)
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000e8e:	e035      	b.n	8000efc <traffic_light_fsm+0xf8>

        case GREEN_RED:
            control_traffic_light(0, 0, 0, 1); // Đèn chính: xanh
 8000e90:	2301      	movs	r3, #1
 8000e92:	2200      	movs	r2, #0
 8000e94:	2100      	movs	r1, #0
 8000e96:	2000      	movs	r0, #0
 8000e98:	f001 fd68 	bl	800296c <control_traffic_light>
            control_traffic_light(1, 1, 0, 0); // Đèn phụ: đỏ
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	f001 fd62 	bl	800296c <control_traffic_light>
            if (timer1 == 0) {
 8000ea8:	4b1c      	ldr	r3, [pc, #112]	; (8000f1c <traffic_light_fsm+0x118>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d127      	bne.n	8000f00 <traffic_light_fsm+0xfc>
                timer1 = yellow_time;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <traffic_light_fsm+0x110>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a19      	ldr	r2, [pc, #100]	; (8000f1c <traffic_light_fsm+0x118>)
 8000eb6:	6013      	str	r3, [r2, #0]
                tl_state = YELLOW_RED;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <traffic_light_fsm+0x108>)
 8000eba:	2203      	movs	r2, #3
 8000ebc:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000ebe:	e01f      	b.n	8000f00 <traffic_light_fsm+0xfc>

        case YELLOW_RED:
            control_traffic_light(0, 0, 1, 0); // Đèn chính: vàng
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f001 fd50 	bl	800296c <control_traffic_light>
            control_traffic_light(1, 1, 0, 0); // Đèn phụ: đỏ
 8000ecc:	2300      	movs	r3, #0
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2101      	movs	r1, #1
 8000ed2:	2001      	movs	r0, #1
 8000ed4:	f001 fd4a 	bl	800296c <control_traffic_light>
            if (timer1 == 0) {
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <traffic_light_fsm+0x118>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d111      	bne.n	8000f04 <traffic_light_fsm+0x100>
                timer1 = red_time;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <traffic_light_fsm+0x11c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a0d      	ldr	r2, [pc, #52]	; (8000f1c <traffic_light_fsm+0x118>)
 8000ee6:	6013      	str	r3, [r2, #0]
                timer2 = green_time;
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <traffic_light_fsm+0x114>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <traffic_light_fsm+0x10c>)
 8000eee:	6013      	str	r3, [r2, #0]
                tl_state = RED_GREEN;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <traffic_light_fsm+0x108>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	701a      	strb	r2, [r3, #0]
            }
            break;
 8000ef6:	e005      	b.n	8000f04 <traffic_light_fsm+0x100>
            break;
 8000ef8:	bf00      	nop
 8000efa:	e004      	b.n	8000f06 <traffic_light_fsm+0x102>
            break;
 8000efc:	bf00      	nop
 8000efe:	e002      	b.n	8000f06 <traffic_light_fsm+0x102>
            break;
 8000f00:	bf00      	nop
 8000f02:	e000      	b.n	8000f06 <traffic_light_fsm+0x102>
            break;
 8000f04:	bf00      	nop
    }
}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000050 	.word	0x20000050
 8000f10:	20000020 	.word	0x20000020
 8000f14:	2000000c 	.word	0x2000000c
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	2000001c 	.word	0x2000001c
 8000f20:	20000004 	.word	0x20000004

08000f24 <button_fsm>:

/* FSM nút bấm */
void button_fsm(uint8_t button_id) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
    switch (button_states[button_id]) {
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	4a3d      	ldr	r2, [pc, #244]	; (8001028 <button_fsm+0x104>)
 8000f32:	5cd3      	ldrb	r3, [r2, r3]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d05f      	beq.n	8000ff8 <button_fsm+0xd4>
 8000f38:	2b02      	cmp	r3, #2
 8000f3a:	dc71      	bgt.n	8001020 <button_fsm+0xfc>
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d002      	beq.n	8000f46 <button_fsm+0x22>
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d03e      	beq.n	8000fc2 <button_fsm+0x9e>
        case LONG_PRESSED:
            if (!is_button_pressed(button_id))
                button_states[button_id] = RELEASED;
            break;
    }
}
 8000f44:	e06c      	b.n	8001020 <button_fsm+0xfc>
            if (is_button_pressed(button_id)) {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff ff1f 	bl	8000d8c <is_button_pressed>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d060      	beq.n	8001016 <button_fsm+0xf2>
                previous_state = current_state;
 8000f54:	4b35      	ldr	r3, [pc, #212]	; (800102c <button_fsm+0x108>)
 8000f56:	781a      	ldrb	r2, [r3, #0]
 8000f58:	4b35      	ldr	r3, [pc, #212]	; (8001030 <button_fsm+0x10c>)
 8000f5a:	701a      	strb	r2, [r3, #0]
                switch (button_id) {
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d026      	beq.n	8000fb0 <button_fsm+0x8c>
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	dc28      	bgt.n	8000fb8 <button_fsm+0x94>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <button_fsm+0x4c>
 8000f6a:	2b01      	cmp	r3, #1
 8000f6c:	d01c      	beq.n	8000fa8 <button_fsm+0x84>
 8000f6e:	e023      	b.n	8000fb8 <button_fsm+0x94>
                        if (current_state == TRAFFIC_LIGHT)
 8000f70:	4b2e      	ldr	r3, [pc, #184]	; (800102c <button_fsm+0x108>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d103      	bne.n	8000f80 <button_fsm+0x5c>
                            current_state = RED_ADJUSTMENT;
 8000f78:	4b2c      	ldr	r3, [pc, #176]	; (800102c <button_fsm+0x108>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	701a      	strb	r2, [r3, #0]
                        break;
 8000f7e:	e01b      	b.n	8000fb8 <button_fsm+0x94>
                        else if (current_state == RED_ADJUSTMENT)
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <button_fsm+0x108>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d103      	bne.n	8000f90 <button_fsm+0x6c>
                            current_state = YELLOW_ADJUSTMENT;
 8000f88:	4b28      	ldr	r3, [pc, #160]	; (800102c <button_fsm+0x108>)
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
                        break;
 8000f8e:	e013      	b.n	8000fb8 <button_fsm+0x94>
                        else if (current_state == YELLOW_ADJUSTMENT)
 8000f90:	4b26      	ldr	r3, [pc, #152]	; (800102c <button_fsm+0x108>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d103      	bne.n	8000fa0 <button_fsm+0x7c>
                            current_state = GREEN_ADJUSTMENT;
 8000f98:	4b24      	ldr	r3, [pc, #144]	; (800102c <button_fsm+0x108>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	701a      	strb	r2, [r3, #0]
                        break;
 8000f9e:	e00b      	b.n	8000fb8 <button_fsm+0x94>
                            current_state = TRAFFIC_LIGHT;
 8000fa0:	4b22      	ldr	r3, [pc, #136]	; (800102c <button_fsm+0x108>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	701a      	strb	r2, [r3, #0]
                        break;
 8000fa6:	e007      	b.n	8000fb8 <button_fsm+0x94>
                        current_state = INCREASE_BY_1;
 8000fa8:	4b20      	ldr	r3, [pc, #128]	; (800102c <button_fsm+0x108>)
 8000faa:	2205      	movs	r2, #5
 8000fac:	701a      	strb	r2, [r3, #0]
                        break;
 8000fae:	e003      	b.n	8000fb8 <button_fsm+0x94>
                        current_state = SET_VALUE;
 8000fb0:	4b1e      	ldr	r3, [pc, #120]	; (800102c <button_fsm+0x108>)
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	701a      	strb	r2, [r3, #0]
                        break;
 8000fb6:	bf00      	nop
                button_states[button_id] = PRESSED;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4a1b      	ldr	r2, [pc, #108]	; (8001028 <button_fsm+0x104>)
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	54d1      	strb	r1, [r2, r3]
            break;
 8000fc0:	e029      	b.n	8001016 <button_fsm+0xf2>
            if (!is_button_pressed(button_id))
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fee1 	bl	8000d8c <is_button_pressed>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	f083 0301 	eor.w	r3, r3, #1
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d004      	beq.n	8000fe0 <button_fsm+0xbc>
                button_states[button_id] = RELEASED;
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	4a13      	ldr	r2, [pc, #76]	; (8001028 <button_fsm+0x104>)
 8000fda:	2100      	movs	r1, #0
 8000fdc:	54d1      	strb	r1, [r2, r3]
            break;
 8000fde:	e01c      	b.n	800101a <button_fsm+0xf6>
            else if (is_button_long_pressed(button_id))
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff feee 	bl	8000dc4 <is_button_long_pressed>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d015      	beq.n	800101a <button_fsm+0xf6>
                button_states[button_id] = LONG_PRESSED;
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	4a0d      	ldr	r2, [pc, #52]	; (8001028 <button_fsm+0x104>)
 8000ff2:	2102      	movs	r1, #2
 8000ff4:	54d1      	strb	r1, [r2, r3]
            break;
 8000ff6:	e010      	b.n	800101a <button_fsm+0xf6>
            if (!is_button_pressed(button_id))
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff fec6 	bl	8000d8c <is_button_pressed>
 8001000:	4603      	mov	r3, r0
 8001002:	f083 0301 	eor.w	r3, r3, #1
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <button_fsm+0xfa>
                button_states[button_id] = RELEASED;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	4a06      	ldr	r2, [pc, #24]	; (8001028 <button_fsm+0x104>)
 8001010:	2100      	movs	r1, #0
 8001012:	54d1      	strb	r1, [r2, r3]
            break;
 8001014:	e003      	b.n	800101e <button_fsm+0xfa>
            break;
 8001016:	bf00      	nop
 8001018:	e002      	b.n	8001020 <button_fsm+0xfc>
            break;
 800101a:	bf00      	nop
 800101c:	e000      	b.n	8001020 <button_fsm+0xfc>
            break;
 800101e:	bf00      	nop
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000054 	.word	0x20000054
 800102c:	2000004e 	.word	0x2000004e
 8001030:	2000004f 	.word	0x2000004f

08001034 <traffic_run>:

/* FSM tổng */
void traffic_run(void) {
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af04      	add	r7, sp, #16
    switch (current_state) {
 800103a:	4b73      	ldr	r3, [pc, #460]	; (8001208 <traffic_run+0x1d4>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b06      	cmp	r3, #6
 8001040:	f200 80dc 	bhi.w	80011fc <traffic_run+0x1c8>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <traffic_run+0x18>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001069 	.word	0x08001069
 8001050:	08001111 	.word	0x08001111
 8001054:	08001111 	.word	0x08001111
 8001058:	08001111 	.word	0x08001111
 800105c:	0800111f 	.word	0x0800111f
 8001060:	0800115d 	.word	0x0800115d
 8001064:	080011a1 	.word	0x080011a1
        case TRAFFIC_LIGHT:
            if (red_time != (green_time + yellow_time)) {
 8001068:	4b68      	ldr	r3, [pc, #416]	; (800120c <traffic_run+0x1d8>)
 800106a:	681a      	ldr	r2, [r3, #0]
 800106c:	4b68      	ldr	r3, [pc, #416]	; (8001210 <traffic_run+0x1dc>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	441a      	add	r2, r3
 8001072:	4b68      	ldr	r3, [pc, #416]	; (8001214 <traffic_run+0x1e0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d01a      	beq.n	80010b0 <traffic_run+0x7c>
                // Báo lỗi nếu thời gian không hợp lệ
                control_traffic_light(0, 0, 0, 0);
 800107a:	2300      	movs	r3, #0
 800107c:	2200      	movs	r2, #0
 800107e:	2100      	movs	r1, #0
 8001080:	2000      	movs	r0, #0
 8001082:	f001 fc73 	bl	800296c <control_traffic_light>
                control_traffic_light(1, 0, 0, 0);
 8001086:	2300      	movs	r3, #0
 8001088:	2200      	movs	r2, #0
 800108a:	2100      	movs	r1, #0
 800108c:	2001      	movs	r0, #1
 800108e:	f001 fc6d 	bl	800296c <control_traffic_light>
                lcd_ShowStr(40, 130, "SYSTEM ERROR!", RED, WHITE, 32, 1);
 8001092:	2301      	movs	r3, #1
 8001094:	9302      	str	r3, [sp, #8]
 8001096:	2320      	movs	r3, #32
 8001098:	9301      	str	r3, [sp, #4]
 800109a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109e:	9300      	str	r3, [sp, #0]
 80010a0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80010a4:	4a5c      	ldr	r2, [pc, #368]	; (8001218 <traffic_run+0x1e4>)
 80010a6:	2182      	movs	r1, #130	; 0x82
 80010a8:	2028      	movs	r0, #40	; 0x28
 80010aa:	f001 f881 	bl	80021b0 <lcd_ShowStr>
                    if (timer2 > 0) timer2--;
                    set_timer(1, ONE_SECOND);
                }
                traffic_light_fsm();
            }
            break;
 80010ae:	e0a5      	b.n	80011fc <traffic_run+0x1c8>
                lcd_ShowStr(40, 130, "SYSTEM RUNNING", WHITE, BLACK, 32, 1);
 80010b0:	2301      	movs	r3, #1
 80010b2:	9302      	str	r3, [sp, #8]
 80010b4:	2320      	movs	r3, #32
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2300      	movs	r3, #0
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c0:	4a56      	ldr	r2, [pc, #344]	; (800121c <traffic_run+0x1e8>)
 80010c2:	2182      	movs	r1, #130	; 0x82
 80010c4:	2028      	movs	r0, #40	; 0x28
 80010c6:	f001 f873 	bl	80021b0 <lcd_ShowStr>
                if (!is_timer_on(1)) {
 80010ca:	2001      	movs	r0, #1
 80010cc:	f001 feba 	bl	8002e44 <is_timer_on>
 80010d0:	4603      	mov	r3, r0
 80010d2:	f083 0301 	eor.w	r3, r3, #1
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d016      	beq.n	800110a <traffic_run+0xd6>
                    if (timer1 > 0) timer1--;
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <traffic_run+0x1ec>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d004      	beq.n	80010ee <traffic_run+0xba>
 80010e4:	4b4e      	ldr	r3, [pc, #312]	; (8001220 <traffic_run+0x1ec>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	4a4d      	ldr	r2, [pc, #308]	; (8001220 <traffic_run+0x1ec>)
 80010ec:	6013      	str	r3, [r2, #0]
                    if (timer2 > 0) timer2--;
 80010ee:	4b4d      	ldr	r3, [pc, #308]	; (8001224 <traffic_run+0x1f0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d004      	beq.n	8001100 <traffic_run+0xcc>
 80010f6:	4b4b      	ldr	r3, [pc, #300]	; (8001224 <traffic_run+0x1f0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	3b01      	subs	r3, #1
 80010fc:	4a49      	ldr	r2, [pc, #292]	; (8001224 <traffic_run+0x1f0>)
 80010fe:	6013      	str	r3, [r2, #0]
                    set_timer(1, ONE_SECOND);
 8001100:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001104:	2001      	movs	r0, #1
 8001106:	f001 fe3f 	bl	8002d88 <set_timer>
                traffic_light_fsm();
 800110a:	f7ff fe7b 	bl	8000e04 <traffic_light_fsm>
            break;
 800110e:	e075      	b.n	80011fc <traffic_run+0x1c8>

        case RED_ADJUSTMENT:
        case YELLOW_ADJUSTMENT:
        case GREEN_ADJUSTMENT:
            // Điều chỉnh thời gian cho từng màu
            button_fsm(1); // Xử lý nút tăng
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ff07 	bl	8000f24 <button_fsm>
            button_fsm(2); // Xử lý nút xác nhận
 8001116:	2002      	movs	r0, #2
 8001118:	f7ff ff04 	bl	8000f24 <button_fsm>
            break;
 800111c:	e06e      	b.n	80011fc <traffic_run+0x1c8>

        case SET_VALUE:
            // Lưu giá trị mới
            if (previous_state == RED_ADJUSTMENT) red_time = red_buffer;
 800111e:	4b42      	ldr	r3, [pc, #264]	; (8001228 <traffic_run+0x1f4>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d104      	bne.n	8001130 <traffic_run+0xfc>
 8001126:	4b41      	ldr	r3, [pc, #260]	; (800122c <traffic_run+0x1f8>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a3a      	ldr	r2, [pc, #232]	; (8001214 <traffic_run+0x1e0>)
 800112c:	6013      	str	r3, [r2, #0]
 800112e:	e010      	b.n	8001152 <traffic_run+0x11e>
            else if (previous_state == YELLOW_ADJUSTMENT) yellow_time = yellow_buffer;
 8001130:	4b3d      	ldr	r3, [pc, #244]	; (8001228 <traffic_run+0x1f4>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b02      	cmp	r3, #2
 8001136:	d104      	bne.n	8001142 <traffic_run+0x10e>
 8001138:	4b3d      	ldr	r3, [pc, #244]	; (8001230 <traffic_run+0x1fc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a34      	ldr	r2, [pc, #208]	; (8001210 <traffic_run+0x1dc>)
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	e007      	b.n	8001152 <traffic_run+0x11e>
            else if (previous_state == GREEN_ADJUSTMENT) green_time = green_buffer;
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <traffic_run+0x1f4>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	2b03      	cmp	r3, #3
 8001148:	d103      	bne.n	8001152 <traffic_run+0x11e>
 800114a:	4b3a      	ldr	r3, [pc, #232]	; (8001234 <traffic_run+0x200>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <traffic_run+0x1d8>)
 8001150:	6013      	str	r3, [r2, #0]
            current_state = previous_state;
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <traffic_run+0x1f4>)
 8001154:	781a      	ldrb	r2, [r3, #0]
 8001156:	4b2c      	ldr	r3, [pc, #176]	; (8001208 <traffic_run+0x1d4>)
 8001158:	701a      	strb	r2, [r3, #0]
            break;
 800115a:	e04f      	b.n	80011fc <traffic_run+0x1c8>

        case INCREASE_BY_1:
            if (previous_state == RED_ADJUSTMENT) red_buffer++;
 800115c:	4b32      	ldr	r3, [pc, #200]	; (8001228 <traffic_run+0x1f4>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	2b01      	cmp	r3, #1
 8001162:	d105      	bne.n	8001170 <traffic_run+0x13c>
 8001164:	4b31      	ldr	r3, [pc, #196]	; (800122c <traffic_run+0x1f8>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	3301      	adds	r3, #1
 800116a:	4a30      	ldr	r2, [pc, #192]	; (800122c <traffic_run+0x1f8>)
 800116c:	6013      	str	r3, [r2, #0]
 800116e:	e012      	b.n	8001196 <traffic_run+0x162>
            else if (previous_state == YELLOW_ADJUSTMENT) yellow_buffer++;
 8001170:	4b2d      	ldr	r3, [pc, #180]	; (8001228 <traffic_run+0x1f4>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	2b02      	cmp	r3, #2
 8001176:	d105      	bne.n	8001184 <traffic_run+0x150>
 8001178:	4b2d      	ldr	r3, [pc, #180]	; (8001230 <traffic_run+0x1fc>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	3301      	adds	r3, #1
 800117e:	4a2c      	ldr	r2, [pc, #176]	; (8001230 <traffic_run+0x1fc>)
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e008      	b.n	8001196 <traffic_run+0x162>
            else if (previous_state == GREEN_ADJUSTMENT) green_buffer++;
 8001184:	4b28      	ldr	r3, [pc, #160]	; (8001228 <traffic_run+0x1f4>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d104      	bne.n	8001196 <traffic_run+0x162>
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <traffic_run+0x200>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	4a28      	ldr	r2, [pc, #160]	; (8001234 <traffic_run+0x200>)
 8001194:	6013      	str	r3, [r2, #0]
            current_state = previous_state;
 8001196:	4b24      	ldr	r3, [pc, #144]	; (8001228 <traffic_run+0x1f4>)
 8001198:	781a      	ldrb	r2, [r3, #0]
 800119a:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <traffic_run+0x1d4>)
 800119c:	701a      	strb	r2, [r3, #0]
            break;
 800119e:	e02d      	b.n	80011fc <traffic_run+0x1c8>

        case INCREASE_BY_1_OVER_TIME:
            if (!is_timer_on(4)) {
 80011a0:	2004      	movs	r0, #4
 80011a2:	f001 fe4f 	bl	8002e44 <is_timer_on>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f083 0301 	eor.w	r3, r3, #1
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d023      	beq.n	80011fa <traffic_run+0x1c6>
                button_fsm(1); // Kiểm tra nút giữ
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff feb6 	bl	8000f24 <button_fsm>
                if (previous_state == RED_ADJUSTMENT) red_buffer++;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <traffic_run+0x1f4>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b01      	cmp	r3, #1
 80011be:	d105      	bne.n	80011cc <traffic_run+0x198>
 80011c0:	4b1a      	ldr	r3, [pc, #104]	; (800122c <traffic_run+0x1f8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a19      	ldr	r2, [pc, #100]	; (800122c <traffic_run+0x1f8>)
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e012      	b.n	80011f2 <traffic_run+0x1be>
                else if (previous_state == YELLOW_ADJUSTMENT) yellow_buffer++;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <traffic_run+0x1f4>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d105      	bne.n	80011e0 <traffic_run+0x1ac>
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <traffic_run+0x1fc>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a15      	ldr	r2, [pc, #84]	; (8001230 <traffic_run+0x1fc>)
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	e008      	b.n	80011f2 <traffic_run+0x1be>
                else if (previous_state == GREEN_ADJUSTMENT) green_buffer++;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <traffic_run+0x1f4>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b03      	cmp	r3, #3
 80011e6:	d104      	bne.n	80011f2 <traffic_run+0x1be>
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <traffic_run+0x200>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <traffic_run+0x200>)
 80011f0:	6013      	str	r3, [r2, #0]
                set_timer(4, INCREASE_TIME);
 80011f2:	21fa      	movs	r1, #250	; 0xfa
 80011f4:	2004      	movs	r0, #4
 80011f6:	f001 fdc7 	bl	8002d88 <set_timer>
            }
            break;
 80011fa:	bf00      	nop
    }
    LCD_DisplayNum();
 80011fc:	f001 fc7a 	bl	8002af4 <LCD_DisplayNum>
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000004e 	.word	0x2000004e
 800120c:	20000008 	.word	0x20000008
 8001210:	2000000c 	.word	0x2000000c
 8001214:	20000004 	.word	0x20000004
 8001218:	08005568 	.word	0x08005568
 800121c:	08005578 	.word	0x08005578
 8001220:	2000001c 	.word	0x2000001c
 8001224:	20000020 	.word	0x20000020
 8001228:	2000004f 	.word	0x2000004f
 800122c:	20000010 	.word	0x20000010
 8001230:	20000018 	.word	0x20000018
 8001234:	20000014 	.word	0x20000014

08001238 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08e      	sub	sp, #56	; 0x38
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800123e:	f107 031c 	add.w	r3, r7, #28
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	611a      	str	r2, [r3, #16]
 800124e:	615a      	str	r2, [r3, #20]
 8001250:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001252:	463b      	mov	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	601a      	str	r2, [r3, #0]
 8001258:	605a      	str	r2, [r3, #4]
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	60da      	str	r2, [r3, #12]
 800125e:	611a      	str	r2, [r3, #16]
 8001260:	615a      	str	r2, [r3, #20]
 8001262:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001264:	4b2f      	ldr	r3, [pc, #188]	; (8001324 <MX_FSMC_Init+0xec>)
 8001266:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800126a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800126c:	4b2d      	ldr	r3, [pc, #180]	; (8001324 <MX_FSMC_Init+0xec>)
 800126e:	4a2e      	ldr	r2, [pc, #184]	; (8001328 <MX_FSMC_Init+0xf0>)
 8001270:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001272:	4b2c      	ldr	r3, [pc, #176]	; (8001324 <MX_FSMC_Init+0xec>)
 8001274:	2200      	movs	r2, #0
 8001276:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001278:	4b2a      	ldr	r3, [pc, #168]	; (8001324 <MX_FSMC_Init+0xec>)
 800127a:	2200      	movs	r2, #0
 800127c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800127e:	4b29      	ldr	r3, [pc, #164]	; (8001324 <MX_FSMC_Init+0xec>)
 8001280:	2200      	movs	r2, #0
 8001282:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001284:	4b27      	ldr	r3, [pc, #156]	; (8001324 <MX_FSMC_Init+0xec>)
 8001286:	2210      	movs	r2, #16
 8001288:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800128a:	4b26      	ldr	r3, [pc, #152]	; (8001324 <MX_FSMC_Init+0xec>)
 800128c:	2200      	movs	r2, #0
 800128e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001290:	4b24      	ldr	r3, [pc, #144]	; (8001324 <MX_FSMC_Init+0xec>)
 8001292:	2200      	movs	r2, #0
 8001294:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001296:	4b23      	ldr	r3, [pc, #140]	; (8001324 <MX_FSMC_Init+0xec>)
 8001298:	2200      	movs	r2, #0
 800129a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800129c:	4b21      	ldr	r3, [pc, #132]	; (8001324 <MX_FSMC_Init+0xec>)
 800129e:	2200      	movs	r2, #0
 80012a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012a2:	4b20      	ldr	r3, [pc, #128]	; (8001324 <MX_FSMC_Init+0xec>)
 80012a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012aa:	4b1e      	ldr	r3, [pc, #120]	; (8001324 <MX_FSMC_Init+0xec>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012b0:	4b1c      	ldr	r3, [pc, #112]	; (8001324 <MX_FSMC_Init+0xec>)
 80012b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b6:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <MX_FSMC_Init+0xec>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012be:	4b19      	ldr	r3, [pc, #100]	; (8001324 <MX_FSMC_Init+0xec>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012c4:	4b17      	ldr	r3, [pc, #92]	; (8001324 <MX_FSMC_Init+0xec>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012ca:	230f      	movs	r3, #15
 80012cc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012ce:	230f      	movs	r3, #15
 80012d0:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 80012d2:	233c      	movs	r3, #60	; 0x3c
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 80012da:	2310      	movs	r3, #16
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 80012de:	2311      	movs	r3, #17
 80012e0:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80012e2:	2300      	movs	r3, #0
 80012e4:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80012e6:	2308      	movs	r3, #8
 80012e8:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80012ea:	230f      	movs	r3, #15
 80012ec:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80012ee:	2309      	movs	r3, #9
 80012f0:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80012f6:	2310      	movs	r3, #16
 80012f8:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80012fa:	2311      	movs	r3, #17
 80012fc:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001302:	463a      	mov	r2, r7
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	4806      	ldr	r0, [pc, #24]	; (8001324 <MX_FSMC_Init+0xec>)
 800130c:	f003 fb5e 	bl	80049cc <HAL_SRAM_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001316:	f001 fd27 	bl	8002d68 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800131a:	bf00      	nop
 800131c:	3738      	adds	r7, #56	; 0x38
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	2000007c 	.word	0x2000007c
 8001328:	a0000104 	.word	0xa0000104

0800132c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800132c:	b580      	push	{r7, lr}
 800132e:	b086      	sub	sp, #24
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001332:	1d3b      	adds	r3, r7, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001340:	4b1c      	ldr	r3, [pc, #112]	; (80013b4 <HAL_FSMC_MspInit+0x88>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d131      	bne.n	80013ac <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001348:	4b1a      	ldr	r3, [pc, #104]	; (80013b4 <HAL_FSMC_MspInit+0x88>)
 800134a:	2201      	movs	r2, #1
 800134c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	603b      	str	r3, [r7, #0]
 8001352:	4b19      	ldr	r3, [pc, #100]	; (80013b8 <HAL_FSMC_MspInit+0x8c>)
 8001354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001356:	4a18      	ldr	r2, [pc, #96]	; (80013b8 <HAL_FSMC_MspInit+0x8c>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6393      	str	r3, [r2, #56]	; 0x38
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_FSMC_MspInit+0x8c>)
 8001360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800136a:	f64f 7388 	movw	r3, #65416	; 0xff88
 800136e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800137c:	230c      	movs	r3, #12
 800137e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	4619      	mov	r1, r3
 8001384:	480d      	ldr	r0, [pc, #52]	; (80013bc <HAL_FSMC_MspInit+0x90>)
 8001386:	f002 f89d 	bl	80034c4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800138a:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800138e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 800139c:	230c      	movs	r3, #12
 800139e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	1d3b      	adds	r3, r7, #4
 80013a2:	4619      	mov	r1, r3
 80013a4:	4806      	ldr	r0, [pc, #24]	; (80013c0 <HAL_FSMC_MspInit+0x94>)
 80013a6:	f002 f88d 	bl	80034c4 <HAL_GPIO_Init>
 80013aa:	e000      	b.n	80013ae <HAL_FSMC_MspInit+0x82>
    return;
 80013ac:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000058 	.word	0x20000058
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40021000 	.word	0x40021000
 80013c0:	40020c00 	.word	0x40020c00

080013c4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013cc:	f7ff ffae 	bl	800132c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08c      	sub	sp, #48	; 0x30
 80013dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
 80013f2:	4b6f      	ldr	r3, [pc, #444]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	4a6e      	ldr	r2, [pc, #440]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 80013f8:	f043 0310 	orr.w	r3, r3, #16
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	4b6c      	ldr	r3, [pc, #432]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001402:	f003 0310 	and.w	r3, r3, #16
 8001406:	61bb      	str	r3, [r7, #24]
 8001408:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
 800140e:	4b68      	ldr	r3, [pc, #416]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	4a67      	ldr	r2, [pc, #412]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	6313      	str	r3, [r2, #48]	; 0x30
 800141a:	4b65      	ldr	r3, [pc, #404]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b61      	ldr	r3, [pc, #388]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a60      	ldr	r2, [pc, #384]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b5e      	ldr	r3, [pc, #376]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b5a      	ldr	r3, [pc, #360]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a59      	ldr	r2, [pc, #356]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b57      	ldr	r3, [pc, #348]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60bb      	str	r3, [r7, #8]
 8001462:	4b53      	ldr	r3, [pc, #332]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a52      	ldr	r2, [pc, #328]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b50      	ldr	r3, [pc, #320]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	60bb      	str	r3, [r7, #8]
 8001478:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	4b4c      	ldr	r3, [pc, #304]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a4b      	ldr	r2, [pc, #300]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b49      	ldr	r3, [pc, #292]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001492:	607b      	str	r3, [r7, #4]
 8001494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
 800149a:	4b45      	ldr	r3, [pc, #276]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	4a44      	ldr	r2, [pc, #272]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 80014a0:	f043 0302 	orr.w	r3, r3, #2
 80014a4:	6313      	str	r3, [r2, #48]	; 0x30
 80014a6:	4b42      	ldr	r3, [pc, #264]	; (80015b0 <MX_GPIO_Init+0x1d8>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	f003 0302 	and.w	r3, r3, #2
 80014ae:	603b      	str	r3, [r7, #0]
 80014b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2170      	movs	r1, #112	; 0x70
 80014b6:	483f      	ldr	r0, [pc, #252]	; (80015b4 <MX_GPIO_Init+0x1dc>)
 80014b8:	f002 f9a0 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	483d      	ldr	r0, [pc, #244]	; (80015b8 <MX_GPIO_Init+0x1e0>)
 80014c4:	f002 f99a 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2140      	movs	r1, #64	; 0x40
 80014cc:	483b      	ldr	r0, [pc, #236]	; (80015bc <MX_GPIO_Init+0x1e4>)
 80014ce:	f002 f995 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d8:	4839      	ldr	r0, [pc, #228]	; (80015c0 <MX_GPIO_Init+0x1e8>)
 80014da:	f002 f98f 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2108      	movs	r1, #8
 80014e2:	4838      	ldr	r0, [pc, #224]	; (80015c4 <MX_GPIO_Init+0x1ec>)
 80014e4:	f002 f98a 	bl	80037fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80014e8:	2370      	movs	r3, #112	; 0x70
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	482d      	ldr	r0, [pc, #180]	; (80015b4 <MX_GPIO_Init+0x1dc>)
 8001500:	f001 ffe0 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001508:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800150a:	2301      	movs	r3, #1
 800150c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001516:	f107 031c 	add.w	r3, r7, #28
 800151a:	4619      	mov	r1, r3
 800151c:	4826      	ldr	r0, [pc, #152]	; (80015b8 <MX_GPIO_Init+0x1e0>)
 800151e:	f001 ffd1 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 8001522:	23c0      	movs	r3, #192	; 0xc0
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001526:	2300      	movs	r3, #0
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4822      	ldr	r0, [pc, #136]	; (80015c0 <MX_GPIO_Init+0x1e8>)
 8001536:	f001 ffc5 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|INPUT_X3_Pin;
 800153a:	2330      	movs	r3, #48	; 0x30
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800153e:	2300      	movs	r3, #0
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	481a      	ldr	r0, [pc, #104]	; (80015b8 <MX_GPIO_Init+0x1e0>)
 800154e:	f001 ffb9 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001552:	2340      	movs	r3, #64	; 0x40
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4814      	ldr	r0, [pc, #80]	; (80015bc <MX_GPIO_Init+0x1e4>)
 800156a:	f001 ffab 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800156e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	480e      	ldr	r0, [pc, #56]	; (80015c0 <MX_GPIO_Init+0x1e8>)
 8001588:	f001 ff9c 	bl	80034c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800158c:	2308      	movs	r3, #8
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	; (80015c4 <MX_GPIO_Init+0x1ec>)
 80015a4:	f001 ff8e 	bl	80034c4 <HAL_GPIO_Init>

}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	; 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40021800 	.word	0x40021800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <LCD_WR_REG>:
unsigned char s[50];

_lcd_dev lcddev;

void LCD_WR_REG(uint16_t reg)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG=reg;
 80015d2:	4a04      	ldr	r2, [pc, #16]	; (80015e4 <LCD_WR_REG+0x1c>)
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	8013      	strh	r3, [r2, #0]
}
 80015d8:	bf00      	nop
 80015da:	370c      	adds	r7, #12
 80015dc:	46bd      	mov	sp, r7
 80015de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e2:	4770      	bx	lr
 80015e4:	600ffffe 	.word	0x600ffffe

080015e8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM=data;
 80015f2:	4a04      	ldr	r2, [pc, #16]	; (8001604 <LCD_WR_DATA+0x1c>)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	8053      	strh	r3, [r2, #2]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	600ffffe 	.word	0x600ffffe

08001608 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram=LCD->LCD_RAM;
 800160e:	4b06      	ldr	r3, [pc, #24]	; (8001628 <LCD_RD_DATA+0x20>)
 8001610:	885b      	ldrh	r3, [r3, #2]
 8001612:	b29b      	uxth	r3, r3
 8001614:	80fb      	strh	r3, [r7, #6]
	return ram;
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	b29b      	uxth	r3, r3
}
 800161a:	4618      	mov	r0, r3
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	600ffffe 	.word	0x600ffffe

0800162c <lcd_AddressSet>:


void lcd_AddressSet(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2)
{
 800162c:	b590      	push	{r4, r7, lr}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4604      	mov	r4, r0
 8001634:	4608      	mov	r0, r1
 8001636:	4611      	mov	r1, r2
 8001638:	461a      	mov	r2, r3
 800163a:	4623      	mov	r3, r4
 800163c:	80fb      	strh	r3, [r7, #6]
 800163e:	4603      	mov	r3, r0
 8001640:	80bb      	strh	r3, [r7, #4]
 8001642:	460b      	mov	r3, r1
 8001644:	807b      	strh	r3, [r7, #2]
 8001646:	4613      	mov	r3, r2
 8001648:	803b      	strh	r3, [r7, #0]
		LCD_WR_REG(0x2a);
 800164a:	202a      	movs	r0, #42	; 0x2a
 800164c:	f7ff ffbc 	bl	80015c8 <LCD_WR_REG>
		LCD_WR_DATA(x1>>8);
 8001650:	88fb      	ldrh	r3, [r7, #6]
 8001652:	0a1b      	lsrs	r3, r3, #8
 8001654:	b29b      	uxth	r3, r3
 8001656:	4618      	mov	r0, r3
 8001658:	f7ff ffc6 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_DATA(x1&0xff);
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	4618      	mov	r0, r3
 8001664:	f7ff ffc0 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_DATA(x2>>8);
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	0a1b      	lsrs	r3, r3, #8
 800166c:	b29b      	uxth	r3, r3
 800166e:	4618      	mov	r0, r3
 8001670:	f7ff ffba 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_DATA(x2&0xff);
 8001674:	887b      	ldrh	r3, [r7, #2]
 8001676:	b2db      	uxtb	r3, r3
 8001678:	b29b      	uxth	r3, r3
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ffb4 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_REG(0x2b);
 8001680:	202b      	movs	r0, #43	; 0x2b
 8001682:	f7ff ffa1 	bl	80015c8 <LCD_WR_REG>
		LCD_WR_DATA(y1>>8);
 8001686:	88bb      	ldrh	r3, [r7, #4]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	b29b      	uxth	r3, r3
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ffab 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_DATA(y1&0xff);
 8001692:	88bb      	ldrh	r3, [r7, #4]
 8001694:	b2db      	uxtb	r3, r3
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ffa5 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_DATA(y2>>8);
 800169e:	883b      	ldrh	r3, [r7, #0]
 80016a0:	0a1b      	lsrs	r3, r3, #8
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff9f 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_DATA(y2&0xff);
 80016aa:	883b      	ldrh	r3, [r7, #0]
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff99 	bl	80015e8 <LCD_WR_DATA>
		LCD_WR_REG(0x2c);
 80016b6:	202c      	movs	r0, #44	; 0x2c
 80016b8:	f7ff ff86 	bl	80015c8 <LCD_WR_REG>
}
 80016bc:	bf00      	nop
 80016be:	370c      	adds	r7, #12
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd90      	pop	{r4, r7, pc}

080016c4 <lcd_Clear>:
  * @brief  Fill all pixels with a color
  * @param  color Color to fill the screen
  * @retval None
  */
void lcd_Clear(uint16_t color) //
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
	uint16_t i,j;
	lcd_AddressSet(0,0,lcddev.width-1,lcddev.height-1);
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <lcd_Clear+0x60>)
 80016d0:	881b      	ldrh	r3, [r3, #0]
 80016d2:	3b01      	subs	r3, #1
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b13      	ldr	r3, [pc, #76]	; (8001724 <lcd_Clear+0x60>)
 80016d8:	885b      	ldrh	r3, [r3, #2]
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	2100      	movs	r1, #0
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff ffa3 	bl	800162c <lcd_AddressSet>
	for(i=0;i<lcddev.width;i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	81fb      	strh	r3, [r7, #14]
 80016ea:	e011      	b.n	8001710 <lcd_Clear+0x4c>
	{
		for(j=0;j<lcddev.height;j++)
 80016ec:	2300      	movs	r3, #0
 80016ee:	81bb      	strh	r3, [r7, #12]
 80016f0:	e006      	b.n	8001700 <lcd_Clear+0x3c>
		{
			LCD_WR_DATA(color);
 80016f2:	88fb      	ldrh	r3, [r7, #6]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff77 	bl	80015e8 <LCD_WR_DATA>
		for(j=0;j<lcddev.height;j++)
 80016fa:	89bb      	ldrh	r3, [r7, #12]
 80016fc:	3301      	adds	r3, #1
 80016fe:	81bb      	strh	r3, [r7, #12]
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <lcd_Clear+0x60>)
 8001702:	885b      	ldrh	r3, [r3, #2]
 8001704:	89ba      	ldrh	r2, [r7, #12]
 8001706:	429a      	cmp	r2, r3
 8001708:	d3f3      	bcc.n	80016f2 <lcd_Clear+0x2e>
	for(i=0;i<lcddev.width;i++)
 800170a:	89fb      	ldrh	r3, [r7, #14]
 800170c:	3301      	adds	r3, #1
 800170e:	81fb      	strh	r3, [r7, #14]
 8001710:	4b04      	ldr	r3, [pc, #16]	; (8001724 <lcd_Clear+0x60>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	89fa      	ldrh	r2, [r7, #14]
 8001716:	429a      	cmp	r2, r3
 8001718:	d3e8      	bcc.n	80016ec <lcd_Clear+0x28>
		}
	}
}
 800171a:	bf00      	nop
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200000cc 	.word	0x200000cc

08001728 <lcd_Fill>:
  * @param  yend	End row
  * @param  color Color to fill
  * @retval None
  */
void lcd_Fill(uint16_t xsta,uint16_t ysta,uint16_t xend,uint16_t yend,uint16_t color) //add a hcn = 1 mau car been trogn
{
 8001728:	b590      	push	{r4, r7, lr}
 800172a:	b085      	sub	sp, #20
 800172c:	af00      	add	r7, sp, #0
 800172e:	4604      	mov	r4, r0
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4623      	mov	r3, r4
 8001738:	80fb      	strh	r3, [r7, #6]
 800173a:	4603      	mov	r3, r0
 800173c:	80bb      	strh	r3, [r7, #4]
 800173e:	460b      	mov	r3, r1
 8001740:	807b      	strh	r3, [r7, #2]
 8001742:	4613      	mov	r3, r2
 8001744:	803b      	strh	r3, [r7, #0]
	uint16_t i,j;
	lcd_AddressSet(xsta,ysta,xend-1,yend-1);
 8001746:	887b      	ldrh	r3, [r7, #2]
 8001748:	3b01      	subs	r3, #1
 800174a:	b29a      	uxth	r2, r3
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	3b01      	subs	r3, #1
 8001750:	b29b      	uxth	r3, r3
 8001752:	88b9      	ldrh	r1, [r7, #4]
 8001754:	88f8      	ldrh	r0, [r7, #6]
 8001756:	f7ff ff69 	bl	800162c <lcd_AddressSet>
	for(i=ysta;i<yend;i++)
 800175a:	88bb      	ldrh	r3, [r7, #4]
 800175c:	81fb      	strh	r3, [r7, #14]
 800175e:	e010      	b.n	8001782 <lcd_Fill+0x5a>
	{
		for(j=xsta;j<xend;j++)
 8001760:	88fb      	ldrh	r3, [r7, #6]
 8001762:	81bb      	strh	r3, [r7, #12]
 8001764:	e006      	b.n	8001774 <lcd_Fill+0x4c>
		{
			LCD_WR_DATA(color);
 8001766:	8c3b      	ldrh	r3, [r7, #32]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff3d 	bl	80015e8 <LCD_WR_DATA>
		for(j=xsta;j<xend;j++)
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	3301      	adds	r3, #1
 8001772:	81bb      	strh	r3, [r7, #12]
 8001774:	89ba      	ldrh	r2, [r7, #12]
 8001776:	887b      	ldrh	r3, [r7, #2]
 8001778:	429a      	cmp	r2, r3
 800177a:	d3f4      	bcc.n	8001766 <lcd_Fill+0x3e>
	for(i=ysta;i<yend;i++)
 800177c:	89fb      	ldrh	r3, [r7, #14]
 800177e:	3301      	adds	r3, #1
 8001780:	81fb      	strh	r3, [r7, #14]
 8001782:	89fa      	ldrh	r2, [r7, #14]
 8001784:	883b      	ldrh	r3, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3ea      	bcc.n	8001760 <lcd_Fill+0x38>
		}
	}
}
 800178a:	bf00      	nop
 800178c:	bf00      	nop
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bd90      	pop	{r4, r7, pc}

08001794 <lcd_DrawPoint>:
  * @param  y Y coordinate
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawPoint(uint16_t x,uint16_t y,uint16_t color) // 1 ddieemr anhr
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	80fb      	strh	r3, [r7, #6]
 800179e:	460b      	mov	r3, r1
 80017a0:	80bb      	strh	r3, [r7, #4]
 80017a2:	4613      	mov	r3, r2
 80017a4:	807b      	strh	r3, [r7, #2]
	lcd_AddressSet(x,y,x,y);//ÉèÖÃ¹â±êÎ»ÖÃ
 80017a6:	88bb      	ldrh	r3, [r7, #4]
 80017a8:	88fa      	ldrh	r2, [r7, #6]
 80017aa:	88b9      	ldrh	r1, [r7, #4]
 80017ac:	88f8      	ldrh	r0, [r7, #6]
 80017ae:	f7ff ff3d 	bl	800162c <lcd_AddressSet>
	LCD_WR_DATA(color);
 80017b2:	887b      	ldrh	r3, [r7, #2]
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff17 	bl	80015e8 <LCD_WR_DATA>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <lcd_DrawLine>:
  * @param  y2 Y coordinate of end point
  * @param  color Color to fill
  * @retval None
  */
void lcd_DrawLine(uint16_t x1,uint16_t y1,uint16_t x2,uint16_t y2,uint16_t color) // ve duong
{
 80017c2:	b590      	push	{r4, r7, lr}
 80017c4:	b08d      	sub	sp, #52	; 0x34
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	4604      	mov	r4, r0
 80017ca:	4608      	mov	r0, r1
 80017cc:	4611      	mov	r1, r2
 80017ce:	461a      	mov	r2, r3
 80017d0:	4623      	mov	r3, r4
 80017d2:	80fb      	strh	r3, [r7, #6]
 80017d4:	4603      	mov	r3, r0
 80017d6:	80bb      	strh	r3, [r7, #4]
 80017d8:	460b      	mov	r3, r1
 80017da:	807b      	strh	r3, [r7, #2]
 80017dc:	4613      	mov	r3, r2
 80017de:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr=0,yerr=0,delta_x,delta_y,distance;
 80017e0:	2300      	movs	r3, #0
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80017e4:	2300      	movs	r3, #0
 80017e6:	627b      	str	r3, [r7, #36]	; 0x24
	int incx,incy,uRow,uCol;
	delta_x=x2-x1;
 80017e8:	887a      	ldrh	r2, [r7, #2]
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	623b      	str	r3, [r7, #32]
	delta_y=y2-y1;
 80017f0:	883a      	ldrh	r2, [r7, #0]
 80017f2:	88bb      	ldrh	r3, [r7, #4]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	61fb      	str	r3, [r7, #28]
	uRow=x1;
 80017f8:	88fb      	ldrh	r3, [r7, #6]
 80017fa:	60fb      	str	r3, [r7, #12]
	uCol=y1;
 80017fc:	88bb      	ldrh	r3, [r7, #4]
 80017fe:	60bb      	str	r3, [r7, #8]
	if(delta_x>0)incx=1;
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	2b00      	cmp	r3, #0
 8001804:	dd02      	ble.n	800180c <lcd_DrawLine+0x4a>
 8001806:	2301      	movs	r3, #1
 8001808:	617b      	str	r3, [r7, #20]
 800180a:	e00b      	b.n	8001824 <lcd_DrawLine+0x62>
	else if (delta_x==0)incx=0;
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d102      	bne.n	8001818 <lcd_DrawLine+0x56>
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
 8001816:	e005      	b.n	8001824 <lcd_DrawLine+0x62>
	else {incx=-1;delta_x=-delta_x;}
 8001818:	f04f 33ff 	mov.w	r3, #4294967295
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	425b      	negs	r3, r3
 8001822:	623b      	str	r3, [r7, #32]
	if(delta_y>0)incy=1;
 8001824:	69fb      	ldr	r3, [r7, #28]
 8001826:	2b00      	cmp	r3, #0
 8001828:	dd02      	ble.n	8001830 <lcd_DrawLine+0x6e>
 800182a:	2301      	movs	r3, #1
 800182c:	613b      	str	r3, [r7, #16]
 800182e:	e00b      	b.n	8001848 <lcd_DrawLine+0x86>
	else if (delta_y==0)incy=0;
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d102      	bne.n	800183c <lcd_DrawLine+0x7a>
 8001836:	2300      	movs	r3, #0
 8001838:	613b      	str	r3, [r7, #16]
 800183a:	e005      	b.n	8001848 <lcd_DrawLine+0x86>
	else {incy=-1;delta_y=-delta_y;}
 800183c:	f04f 33ff 	mov.w	r3, #4294967295
 8001840:	613b      	str	r3, [r7, #16]
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	425b      	negs	r3, r3
 8001846:	61fb      	str	r3, [r7, #28]
	if(delta_x>delta_y)distance=delta_x;
 8001848:	6a3a      	ldr	r2, [r7, #32]
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	429a      	cmp	r2, r3
 800184e:	dd02      	ble.n	8001856 <lcd_DrawLine+0x94>
 8001850:	6a3b      	ldr	r3, [r7, #32]
 8001852:	61bb      	str	r3, [r7, #24]
 8001854:	e001      	b.n	800185a <lcd_DrawLine+0x98>
	else distance=delta_y;
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	61bb      	str	r3, [r7, #24]
	for(t=0;t<distance+1;t++)
 800185a:	2300      	movs	r3, #0
 800185c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800185e:	e02b      	b.n	80018b8 <lcd_DrawLine+0xf6>
	{
		lcd_DrawPoint(uRow,uCol,color);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	b29b      	uxth	r3, r3
 8001864:	68ba      	ldr	r2, [r7, #8]
 8001866:	b291      	uxth	r1, r2
 8001868:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff91 	bl	8001794 <lcd_DrawPoint>
		xerr+=delta_x;
 8001872:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	4413      	add	r3, r2
 8001878:	62bb      	str	r3, [r7, #40]	; 0x28
		yerr+=delta_y;
 800187a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4413      	add	r3, r2
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
		if(xerr>distance)
 8001882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	429a      	cmp	r2, r3
 8001888:	dd07      	ble.n	800189a <lcd_DrawLine+0xd8>
		{
			xerr-=distance;
 800188a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
			uRow+=incx;
 8001892:	68fa      	ldr	r2, [r7, #12]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4413      	add	r3, r2
 8001898:	60fb      	str	r3, [r7, #12]
		}
		if(yerr>distance)
 800189a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	429a      	cmp	r2, r3
 80018a0:	dd07      	ble.n	80018b2 <lcd_DrawLine+0xf0>
		{
			yerr-=distance;
 80018a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	627b      	str	r3, [r7, #36]	; 0x24
			uCol+=incy;
 80018aa:	68ba      	ldr	r2, [r7, #8]
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	4413      	add	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
	for(t=0;t<distance+1;t++)
 80018b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018b4:	3301      	adds	r3, #1
 80018b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80018b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dacf      	bge.n	8001860 <lcd_DrawLine+0x9e>
		}
	}
}
 80018c0:	bf00      	nop
 80018c2:	bf00      	nop
 80018c4:	3734      	adds	r7, #52	; 0x34
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd90      	pop	{r4, r7, pc}

080018ca <lcd_DrawRectangle>:


void lcd_DrawRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,uint16_t color) // ve hcn(vien
{
 80018ca:	b590      	push	{r4, r7, lr}
 80018cc:	b085      	sub	sp, #20
 80018ce:	af02      	add	r7, sp, #8
 80018d0:	4604      	mov	r4, r0
 80018d2:	4608      	mov	r0, r1
 80018d4:	4611      	mov	r1, r2
 80018d6:	461a      	mov	r2, r3
 80018d8:	4623      	mov	r3, r4
 80018da:	80fb      	strh	r3, [r7, #6]
 80018dc:	4603      	mov	r3, r0
 80018de:	80bb      	strh	r3, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	807b      	strh	r3, [r7, #2]
 80018e4:	4613      	mov	r3, r2
 80018e6:	803b      	strh	r3, [r7, #0]
	lcd_DrawLine(x1,y1,x2,y1,color);
 80018e8:	88bc      	ldrh	r4, [r7, #4]
 80018ea:	887a      	ldrh	r2, [r7, #2]
 80018ec:	88b9      	ldrh	r1, [r7, #4]
 80018ee:	88f8      	ldrh	r0, [r7, #6]
 80018f0:	8b3b      	ldrh	r3, [r7, #24]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	4623      	mov	r3, r4
 80018f6:	f7ff ff64 	bl	80017c2 <lcd_DrawLine>
	lcd_DrawLine(x1,y1,x1,y2,color);
 80018fa:	883c      	ldrh	r4, [r7, #0]
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	88b9      	ldrh	r1, [r7, #4]
 8001900:	88f8      	ldrh	r0, [r7, #6]
 8001902:	8b3b      	ldrh	r3, [r7, #24]
 8001904:	9300      	str	r3, [sp, #0]
 8001906:	4623      	mov	r3, r4
 8001908:	f7ff ff5b 	bl	80017c2 <lcd_DrawLine>
	lcd_DrawLine(x1,y2,x2,y2,color);
 800190c:	883c      	ldrh	r4, [r7, #0]
 800190e:	887a      	ldrh	r2, [r7, #2]
 8001910:	8839      	ldrh	r1, [r7, #0]
 8001912:	88f8      	ldrh	r0, [r7, #6]
 8001914:	8b3b      	ldrh	r3, [r7, #24]
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	4623      	mov	r3, r4
 800191a:	f7ff ff52 	bl	80017c2 <lcd_DrawLine>
	lcd_DrawLine(x2,y1,x2,y2,color);
 800191e:	883c      	ldrh	r4, [r7, #0]
 8001920:	887a      	ldrh	r2, [r7, #2]
 8001922:	88b9      	ldrh	r1, [r7, #4]
 8001924:	8878      	ldrh	r0, [r7, #2]
 8001926:	8b3b      	ldrh	r3, [r7, #24]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	4623      	mov	r3, r4
 800192c:	f7ff ff49 	bl	80017c2 <lcd_DrawLine>
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bd90      	pop	{r4, r7, pc}

08001938 <lcd_ShowChar>:

void lcd_ShowChar(uint16_t x,uint16_t y,uint8_t character,uint16_t fc,uint16_t bc,uint8_t sizey,uint8_t mode) // 1ky tu size = 12 16 24 32, fc: mau chuw, bc, mauf neefn, mode: hien neen
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
 800193e:	4604      	mov	r4, r0
 8001940:	4608      	mov	r0, r1
 8001942:	4611      	mov	r1, r2
 8001944:	461a      	mov	r2, r3
 8001946:	4623      	mov	r3, r4
 8001948:	80fb      	strh	r3, [r7, #6]
 800194a:	4603      	mov	r3, r0
 800194c:	80bb      	strh	r3, [r7, #4]
 800194e:	460b      	mov	r3, r1
 8001950:	70fb      	strb	r3, [r7, #3]
 8001952:	4613      	mov	r3, r2
 8001954:	803b      	strh	r3, [r7, #0]
	uint8_t temp,sizex,t,m=0;
 8001956:	2300      	movs	r3, #0
 8001958:	757b      	strb	r3, [r7, #21]
	uint16_t i,TypefaceNum;
	uint16_t x0=x;
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	823b      	strh	r3, [r7, #16]
	sizex=sizey/2;
 800195e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001962:	085b      	lsrs	r3, r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
	TypefaceNum=(sizex/8+((sizex%8)?1:0))*sizey;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	b2db      	uxtb	r3, r3
 800196c:	461a      	mov	r2, r3
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29a      	uxth	r2, r3
 8001984:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001988:	b29b      	uxth	r3, r3
 800198a:	fb12 f303 	smulbb	r3, r2, r3
 800198e:	81bb      	strh	r3, [r7, #12]
	character=character-' ';
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	3b20      	subs	r3, #32
 8001994:	70fb      	strb	r3, [r7, #3]
	lcd_AddressSet(x,y,x+sizex-1,y+sizey-1);
 8001996:	7bfb      	ldrb	r3, [r7, #15]
 8001998:	b29a      	uxth	r2, r3
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	4413      	add	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	3b01      	subs	r3, #1
 80019a2:	b29c      	uxth	r4, r3
 80019a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	88bb      	ldrh	r3, [r7, #4]
 80019ac:	4413      	add	r3, r2
 80019ae:	b29b      	uxth	r3, r3
 80019b0:	3b01      	subs	r3, #1
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	88b9      	ldrh	r1, [r7, #4]
 80019b6:	88f8      	ldrh	r0, [r7, #6]
 80019b8:	4622      	mov	r2, r4
 80019ba:	f7ff fe37 	bl	800162c <lcd_AddressSet>
	for(i=0;i<TypefaceNum;i++)
 80019be:	2300      	movs	r3, #0
 80019c0:	827b      	strh	r3, [r7, #18]
 80019c2:	e07a      	b.n	8001aba <lcd_ShowChar+0x182>
	{
		if(sizey==12);
 80019c4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019c8:	2b0c      	cmp	r3, #12
 80019ca:	d028      	beq.n	8001a1e <lcd_ShowChar+0xe6>
		else if(sizey==16)temp=ascii_1608[character][i];
 80019cc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019d0:	2b10      	cmp	r3, #16
 80019d2:	d108      	bne.n	80019e6 <lcd_ShowChar+0xae>
 80019d4:	78fa      	ldrb	r2, [r7, #3]
 80019d6:	8a7b      	ldrh	r3, [r7, #18]
 80019d8:	493c      	ldr	r1, [pc, #240]	; (8001acc <lcd_ShowChar+0x194>)
 80019da:	0112      	lsls	r2, r2, #4
 80019dc:	440a      	add	r2, r1
 80019de:	4413      	add	r3, r2
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	75fb      	strb	r3, [r7, #23]
 80019e4:	e01b      	b.n	8001a1e <lcd_ShowChar+0xe6>
		else if(sizey==24)temp=ascii_2412[character][i];
 80019e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80019ea:	2b18      	cmp	r3, #24
 80019ec:	d10b      	bne.n	8001a06 <lcd_ShowChar+0xce>
 80019ee:	78fa      	ldrb	r2, [r7, #3]
 80019f0:	8a79      	ldrh	r1, [r7, #18]
 80019f2:	4837      	ldr	r0, [pc, #220]	; (8001ad0 <lcd_ShowChar+0x198>)
 80019f4:	4613      	mov	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4413      	add	r3, r2
 80019fa:	011b      	lsls	r3, r3, #4
 80019fc:	4403      	add	r3, r0
 80019fe:	440b      	add	r3, r1
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	75fb      	strb	r3, [r7, #23]
 8001a04:	e00b      	b.n	8001a1e <lcd_ShowChar+0xe6>
		else if(sizey==32)temp=ascii_3216[character][i];
 8001a06:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001a0a:	2b20      	cmp	r3, #32
 8001a0c:	d15a      	bne.n	8001ac4 <lcd_ShowChar+0x18c>
 8001a0e:	78fa      	ldrb	r2, [r7, #3]
 8001a10:	8a7b      	ldrh	r3, [r7, #18]
 8001a12:	4930      	ldr	r1, [pc, #192]	; (8001ad4 <lcd_ShowChar+0x19c>)
 8001a14:	0192      	lsls	r2, r2, #6
 8001a16:	440a      	add	r2, r1
 8001a18:	4413      	add	r3, r2
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	75fb      	strb	r3, [r7, #23]
		else return;
		for(t=0;t<8;t++)
 8001a1e:	2300      	movs	r3, #0
 8001a20:	75bb      	strb	r3, [r7, #22]
 8001a22:	e044      	b.n	8001aae <lcd_ShowChar+0x176>
		{
			if(!mode)
 8001a24:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d120      	bne.n	8001a6e <lcd_ShowChar+0x136>
			{
				if(temp&(0x01<<t))LCD_WR_DATA(fc);
 8001a2c:	7dfa      	ldrb	r2, [r7, #23]
 8001a2e:	7dbb      	ldrb	r3, [r7, #22]
 8001a30:	fa42 f303 	asr.w	r3, r2, r3
 8001a34:	f003 0301 	and.w	r3, r3, #1
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d004      	beq.n	8001a46 <lcd_ShowChar+0x10e>
 8001a3c:	883b      	ldrh	r3, [r7, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff fdd2 	bl	80015e8 <LCD_WR_DATA>
 8001a44:	e003      	b.n	8001a4e <lcd_ShowChar+0x116>
				else LCD_WR_DATA(bc);
 8001a46:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff fdcd 	bl	80015e8 <LCD_WR_DATA>
				m++;
 8001a4e:	7d7b      	ldrb	r3, [r7, #21]
 8001a50:	3301      	adds	r3, #1
 8001a52:	757b      	strb	r3, [r7, #21]
				if(m%sizex==0)
 8001a54:	7d7b      	ldrb	r3, [r7, #21]
 8001a56:	7bfa      	ldrb	r2, [r7, #15]
 8001a58:	fbb3 f1f2 	udiv	r1, r3, r2
 8001a5c:	fb02 f201 	mul.w	r2, r2, r1
 8001a60:	1a9b      	subs	r3, r3, r2
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d11f      	bne.n	8001aa8 <lcd_ShowChar+0x170>
				{
					m=0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	757b      	strb	r3, [r7, #21]
					break;
 8001a6c:	e022      	b.n	8001ab4 <lcd_ShowChar+0x17c>
				}
			}
			else
			{
				if(temp&(0x01<<t))lcd_DrawPoint(x,y,fc);
 8001a6e:	7dfa      	ldrb	r2, [r7, #23]
 8001a70:	7dbb      	ldrb	r3, [r7, #22]
 8001a72:	fa42 f303 	asr.w	r3, r2, r3
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d005      	beq.n	8001a8a <lcd_ShowChar+0x152>
 8001a7e:	883a      	ldrh	r2, [r7, #0]
 8001a80:	88b9      	ldrh	r1, [r7, #4]
 8001a82:	88fb      	ldrh	r3, [r7, #6]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fe85 	bl	8001794 <lcd_DrawPoint>
				x++;
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	80fb      	strh	r3, [r7, #6]
				if((x-x0)==sizex)
 8001a90:	88fa      	ldrh	r2, [r7, #6]
 8001a92:	8a3b      	ldrh	r3, [r7, #16]
 8001a94:	1ad2      	subs	r2, r2, r3
 8001a96:	7bfb      	ldrb	r3, [r7, #15]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d105      	bne.n	8001aa8 <lcd_ShowChar+0x170>
				{
					x=x0;
 8001a9c:	8a3b      	ldrh	r3, [r7, #16]
 8001a9e:	80fb      	strh	r3, [r7, #6]
					y++;
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	80bb      	strh	r3, [r7, #4]
					break;
 8001aa6:	e005      	b.n	8001ab4 <lcd_ShowChar+0x17c>
		for(t=0;t<8;t++)
 8001aa8:	7dbb      	ldrb	r3, [r7, #22]
 8001aaa:	3301      	adds	r3, #1
 8001aac:	75bb      	strb	r3, [r7, #22]
 8001aae:	7dbb      	ldrb	r3, [r7, #22]
 8001ab0:	2b07      	cmp	r3, #7
 8001ab2:	d9b7      	bls.n	8001a24 <lcd_ShowChar+0xec>
	for(i=0;i<TypefaceNum;i++)
 8001ab4:	8a7b      	ldrh	r3, [r7, #18]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	827b      	strh	r3, [r7, #18]
 8001aba:	8a7a      	ldrh	r2, [r7, #18]
 8001abc:	89bb      	ldrh	r3, [r7, #12]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d380      	bcc.n	80019c4 <lcd_ShowChar+0x8c>
 8001ac2:	e000      	b.n	8001ac6 <lcd_ShowChar+0x18e>
		else return;
 8001ac4:	bf00      	nop
				}
			}
		}
	}
}
 8001ac6:	371c      	adds	r7, #28
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd90      	pop	{r4, r7, pc}
 8001acc:	080055a0 	.word	0x080055a0
 8001ad0:	08005b90 	.word	0x08005b90
 8001ad4:	08006d60 	.word	0x08006d60

08001ad8 <mypow>:

uint32_t mypow(uint8_t m,uint8_t n)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	460a      	mov	r2, r1
 8001ae2:	71fb      	strb	r3, [r7, #7]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	71bb      	strb	r3, [r7, #6]
	uint32_t result=1;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 8001aec:	e004      	b.n	8001af8 <mypow+0x20>
 8001aee:	79fa      	ldrb	r2, [r7, #7]
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	79bb      	ldrb	r3, [r7, #6]
 8001afa:	1e5a      	subs	r2, r3, #1
 8001afc:	71ba      	strb	r2, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d1f5      	bne.n	8001aee <mypow+0x16>
	return result;
 8001b02:	68fb      	ldr	r3, [r7, #12]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <lcd_ShowIntNum>:

void lcd_ShowIntNum(uint16_t x,uint16_t y,uint16_t num,uint8_t len,uint16_t fc,uint16_t bc,uint8_t sizey) //len: ddooj daif cuar so
{
 8001b10:	b590      	push	{r4, r7, lr}
 8001b12:	b089      	sub	sp, #36	; 0x24
 8001b14:	af04      	add	r7, sp, #16
 8001b16:	4604      	mov	r4, r0
 8001b18:	4608      	mov	r0, r1
 8001b1a:	4611      	mov	r1, r2
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4623      	mov	r3, r4
 8001b20:	80fb      	strh	r3, [r7, #6]
 8001b22:	4603      	mov	r3, r0
 8001b24:	80bb      	strh	r3, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	707b      	strb	r3, [r7, #1]
	uint8_t t,temp;
	uint8_t enshow=0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex=sizey/2;
 8001b32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001b36:	085b      	lsrs	r3, r3, #1
 8001b38:	737b      	strb	r3, [r7, #13]
	for(t=0;t<len;t++)
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	73fb      	strb	r3, [r7, #15]
 8001b3e:	e059      	b.n	8001bf4 <lcd_ShowIntNum+0xe4>
	{
		temp=(num/mypow(10,len-t-1))%10;
 8001b40:	887c      	ldrh	r4, [r7, #2]
 8001b42:	787a      	ldrb	r2, [r7, #1]
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	3b01      	subs	r3, #1
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	4619      	mov	r1, r3
 8001b50:	200a      	movs	r0, #10
 8001b52:	f7ff ffc1 	bl	8001ad8 <mypow>
 8001b56:	4603      	mov	r3, r0
 8001b58:	fbb4 f1f3 	udiv	r1, r4, r3
 8001b5c:	4b2a      	ldr	r3, [pc, #168]	; (8001c08 <lcd_ShowIntNum+0xf8>)
 8001b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b62:	08da      	lsrs	r2, r3, #3
 8001b64:	4613      	mov	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	4413      	add	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	1aca      	subs	r2, r1, r3
 8001b6e:	4613      	mov	r3, r2
 8001b70:	733b      	strb	r3, [r7, #12]
		if(enshow==0&&t<(len-1))
 8001b72:	7bbb      	ldrb	r3, [r7, #14]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d121      	bne.n	8001bbc <lcd_ShowIntNum+0xac>
 8001b78:	7bfa      	ldrb	r2, [r7, #15]
 8001b7a:	787b      	ldrb	r3, [r7, #1]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	da1c      	bge.n	8001bbc <lcd_ShowIntNum+0xac>
		{
			if(temp==0)
 8001b82:	7b3b      	ldrb	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d117      	bne.n	8001bb8 <lcd_ShowIntNum+0xa8>
			{
				lcd_ShowChar(x+t*sizex,y,' ',fc,bc,sizey,0);
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	7b7b      	ldrb	r3, [r7, #13]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	fb12 f303 	smulbb	r3, r2, r3
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4413      	add	r3, r2
 8001b9a:	b298      	uxth	r0, r3
 8001b9c:	8c3a      	ldrh	r2, [r7, #32]
 8001b9e:	88b9      	ldrh	r1, [r7, #4]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001ba8:	9301      	str	r3, [sp, #4]
 8001baa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bac:	9300      	str	r3, [sp, #0]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	2220      	movs	r2, #32
 8001bb2:	f7ff fec1 	bl	8001938 <lcd_ShowChar>
				continue;
 8001bb6:	e01a      	b.n	8001bee <lcd_ShowIntNum+0xde>
			}else enshow=1;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73bb      	strb	r3, [r7, #14]

		}
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	b29a      	uxth	r2, r3
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	fb12 f303 	smulbb	r3, r2, r3
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4413      	add	r3, r2
 8001bce:	b298      	uxth	r0, r3
 8001bd0:	7b3b      	ldrb	r3, [r7, #12]
 8001bd2:	3330      	adds	r3, #48	; 0x30
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	8c3c      	ldrh	r4, [r7, #32]
 8001bd8:	88b9      	ldrh	r1, [r7, #4]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001be2:	9301      	str	r3, [sp, #4]
 8001be4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	4623      	mov	r3, r4
 8001bea:	f7ff fea5 	bl	8001938 <lcd_ShowChar>
	for(t=0;t<len;t++)
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	787b      	ldrb	r3, [r7, #1]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d3a1      	bcc.n	8001b40 <lcd_ShowIntNum+0x30>
	}
}
 8001bfc:	bf00      	nop
 8001bfe:	bf00      	nop
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}
 8001c06:	bf00      	nop
 8001c08:	cccccccd 	.word	0xcccccccd

08001c0c <lcd_ShowPicture>:
	 	lcd_ShowChar(x+t*sizex,y,temp+48,fc,bc,sizey,0);
	}
}

void lcd_ShowPicture(uint16_t x,uint16_t y,uint16_t length,uint16_t width,const uint8_t pic[]) //code of picture
{
 8001c0c:	b590      	push	{r4, r7, lr}
 8001c0e:	b087      	sub	sp, #28
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4604      	mov	r4, r0
 8001c14:	4608      	mov	r0, r1
 8001c16:	4611      	mov	r1, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	80fb      	strh	r3, [r7, #6]
 8001c1e:	4603      	mov	r3, r0
 8001c20:	80bb      	strh	r3, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	807b      	strh	r3, [r7, #2]
 8001c26:	4613      	mov	r3, r2
 8001c28:	803b      	strh	r3, [r7, #0]
	uint8_t picH,picL;
	uint16_t i,j;
	uint32_t k=0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	613b      	str	r3, [r7, #16]
	lcd_AddressSet(x,y,x+length-1,y+width-1);
 8001c2e:	88fa      	ldrh	r2, [r7, #6]
 8001c30:	887b      	ldrh	r3, [r7, #2]
 8001c32:	4413      	add	r3, r2
 8001c34:	b29b      	uxth	r3, r3
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29c      	uxth	r4, r3
 8001c3a:	88ba      	ldrh	r2, [r7, #4]
 8001c3c:	883b      	ldrh	r3, [r7, #0]
 8001c3e:	4413      	add	r3, r2
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	3b01      	subs	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	88b9      	ldrh	r1, [r7, #4]
 8001c48:	88f8      	ldrh	r0, [r7, #6]
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	f7ff fcee 	bl	800162c <lcd_AddressSet>
	for(i=0;i<length;i++)
 8001c50:	2300      	movs	r3, #0
 8001c52:	82fb      	strh	r3, [r7, #22]
 8001c54:	e027      	b.n	8001ca6 <lcd_ShowPicture+0x9a>
	{
		for(j=0;j<width;j++)
 8001c56:	2300      	movs	r3, #0
 8001c58:	82bb      	strh	r3, [r7, #20]
 8001c5a:	e01d      	b.n	8001c98 <lcd_ShowPicture+0x8c>
		{
			picH=pic[k*2];
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c62:	4413      	add	r3, r2
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	73fb      	strb	r3, [r7, #15]
			picL=pic[k*2+1];
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c70:	4413      	add	r3, r2
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH<<8|picL);
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
 8001c78:	021b      	lsls	r3, r3, #8
 8001c7a:	b21a      	sxth	r2, r3
 8001c7c:	7bbb      	ldrb	r3, [r7, #14]
 8001c7e:	b21b      	sxth	r3, r3
 8001c80:	4313      	orrs	r3, r2
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff fcae 	bl	80015e8 <LCD_WR_DATA>
			k++;
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	613b      	str	r3, [r7, #16]
		for(j=0;j<width;j++)
 8001c92:	8abb      	ldrh	r3, [r7, #20]
 8001c94:	3301      	adds	r3, #1
 8001c96:	82bb      	strh	r3, [r7, #20]
 8001c98:	8aba      	ldrh	r2, [r7, #20]
 8001c9a:	883b      	ldrh	r3, [r7, #0]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	d3dd      	bcc.n	8001c5c <lcd_ShowPicture+0x50>
	for(i=0;i<length;i++)
 8001ca0:	8afb      	ldrh	r3, [r7, #22]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	82fb      	strh	r3, [r7, #22]
 8001ca6:	8afa      	ldrh	r2, [r7, #22]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d3d3      	bcc.n	8001c56 <lcd_ShowPicture+0x4a>
		}
	}
}
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
 8001cb2:	371c      	adds	r7, #28
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd90      	pop	{r4, r7, pc}

08001cb8 <lcd_SetDir>:


void lcd_SetDir(uint8_t dir) //chinh huong man hinh
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	71fb      	strb	r3, [r7, #7]
	if((dir>>4)%4)
 8001cc2:	79fb      	ldrb	r3, [r7, #7]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <lcd_SetDir+0x2a>
	{
		lcddev.width=320;
 8001cd2:	4b0a      	ldr	r3, [pc, #40]	; (8001cfc <lcd_SetDir+0x44>)
 8001cd4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cd8:	801a      	strh	r2, [r3, #0]
		lcddev.height=240;
 8001cda:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <lcd_SetDir+0x44>)
 8001cdc:	22f0      	movs	r2, #240	; 0xf0
 8001cde:	805a      	strh	r2, [r3, #2]
	}else
	{
		lcddev.width=240;
		lcddev.height=320;
	}
}
 8001ce0:	e006      	b.n	8001cf0 <lcd_SetDir+0x38>
		lcddev.width=240;
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <lcd_SetDir+0x44>)
 8001ce4:	22f0      	movs	r2, #240	; 0xf0
 8001ce6:	801a      	strh	r2, [r3, #0]
		lcddev.height=320;
 8001ce8:	4b04      	ldr	r3, [pc, #16]	; (8001cfc <lcd_SetDir+0x44>)
 8001cea:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001cee:	805a      	strh	r2, [r3, #2]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	200000cc 	.word	0x200000cc

08001d00 <lcd_init>:


void lcd_init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d0a:	48aa      	ldr	r0, [pc, #680]	; (8001fb4 <lcd_init+0x2b4>)
 8001d0c:	f001 fd76 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d10:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d14:	f001 faa0 	bl	8003258 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d1e:	48a5      	ldr	r0, [pc, #660]	; (8001fb4 <lcd_init+0x2b4>)
 8001d20:	f001 fd6c 	bl	80037fc <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8001d24:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d28:	f001 fa96 	bl	8003258 <HAL_Delay>
	lcd_SetDir(DFT_SCAN_DIR);
 8001d2c:	2000      	movs	r0, #0
 8001d2e:	f7ff ffc3 	bl	8001cb8 <lcd_SetDir>
	LCD_WR_REG(0XD3);
 8001d32:	20d3      	movs	r0, #211	; 0xd3
 8001d34:	f7ff fc48 	bl	80015c8 <LCD_WR_REG>
	lcddev.id=LCD_RD_DATA();	//dummy read
 8001d38:	f7ff fc66 	bl	8001608 <LCD_RD_DATA>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b9d      	ldr	r3, [pc, #628]	; (8001fb8 <lcd_init+0x2b8>)
 8001d42:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d44:	f7ff fc60 	bl	8001608 <LCD_RD_DATA>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	4b9a      	ldr	r3, [pc, #616]	; (8001fb8 <lcd_init+0x2b8>)
 8001d4e:	809a      	strh	r2, [r3, #4]
	lcddev.id=LCD_RD_DATA();
 8001d50:	f7ff fc5a 	bl	8001608 <LCD_RD_DATA>
 8001d54:	4603      	mov	r3, r0
 8001d56:	461a      	mov	r2, r3
 8001d58:	4b97      	ldr	r3, [pc, #604]	; (8001fb8 <lcd_init+0x2b8>)
 8001d5a:	809a      	strh	r2, [r3, #4]
	lcddev.id<<=8;
 8001d5c:	4b96      	ldr	r3, [pc, #600]	; (8001fb8 <lcd_init+0x2b8>)
 8001d5e:	889b      	ldrh	r3, [r3, #4]
 8001d60:	021b      	lsls	r3, r3, #8
 8001d62:	b29a      	uxth	r2, r3
 8001d64:	4b94      	ldr	r3, [pc, #592]	; (8001fb8 <lcd_init+0x2b8>)
 8001d66:	809a      	strh	r2, [r3, #4]
	lcddev.id|=LCD_RD_DATA();
 8001d68:	f7ff fc4e 	bl	8001608 <LCD_RD_DATA>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	4b91      	ldr	r3, [pc, #580]	; (8001fb8 <lcd_init+0x2b8>)
 8001d72:	889b      	ldrh	r3, [r3, #4]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b8f      	ldr	r3, [pc, #572]	; (8001fb8 <lcd_init+0x2b8>)
 8001d7a:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8001d7c:	20cf      	movs	r0, #207	; 0xcf
 8001d7e:	f7ff fc23 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001d82:	2000      	movs	r0, #0
 8001d84:	f7ff fc30 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8001d88:	20c1      	movs	r0, #193	; 0xc1
 8001d8a:	f7ff fc2d 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8001d8e:	2030      	movs	r0, #48	; 0x30
 8001d90:	f7ff fc2a 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8001d94:	20ed      	movs	r0, #237	; 0xed
 8001d96:	f7ff fc17 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8001d9a:	2064      	movs	r0, #100	; 0x64
 8001d9c:	f7ff fc24 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8001da0:	2003      	movs	r0, #3
 8001da2:	f7ff fc21 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8001da6:	2012      	movs	r0, #18
 8001da8:	f7ff fc1e 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8001dac:	2081      	movs	r0, #129	; 0x81
 8001dae:	f7ff fc1b 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8001db2:	20e8      	movs	r0, #232	; 0xe8
 8001db4:	f7ff fc08 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8001db8:	2085      	movs	r0, #133	; 0x85
 8001dba:	f7ff fc15 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001dbe:	2010      	movs	r0, #16
 8001dc0:	f7ff fc12 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8001dc4:	207a      	movs	r0, #122	; 0x7a
 8001dc6:	f7ff fc0f 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8001dca:	20cb      	movs	r0, #203	; 0xcb
 8001dcc:	f7ff fbfc 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8001dd0:	2039      	movs	r0, #57	; 0x39
 8001dd2:	f7ff fc09 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8001dd6:	202c      	movs	r0, #44	; 0x2c
 8001dd8:	f7ff fc06 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ddc:	2000      	movs	r0, #0
 8001dde:	f7ff fc03 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8001de2:	2034      	movs	r0, #52	; 0x34
 8001de4:	f7ff fc00 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7ff fbfd 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8001dee:	20f7      	movs	r0, #247	; 0xf7
 8001df0:	f7ff fbea 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8001df4:	2020      	movs	r0, #32
 8001df6:	f7ff fbf7 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8001dfa:	20ea      	movs	r0, #234	; 0xea
 8001dfc:	f7ff fbe4 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e00:	2000      	movs	r0, #0
 8001e02:	f7ff fbf1 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fbee 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8001e0c:	20c0      	movs	r0, #192	; 0xc0
 8001e0e:	f7ff fbdb 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8001e12:	201b      	movs	r0, #27
 8001e14:	f7ff fbe8 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8001e18:	20c1      	movs	r0, #193	; 0xc1
 8001e1a:	f7ff fbd5 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f7ff fbe2 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8001e24:	20c5      	movs	r0, #197	; 0xc5
 8001e26:	f7ff fbcf 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8001e2a:	2030      	movs	r0, #48	; 0x30
 8001e2c:	f7ff fbdc 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8001e30:	2030      	movs	r0, #48	; 0x30
 8001e32:	f7ff fbd9 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8001e36:	20c7      	movs	r0, #199	; 0xc7
 8001e38:	f7ff fbc6 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8001e3c:	20b7      	movs	r0, #183	; 0xb7
 8001e3e:	f7ff fbd3 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8001e42:	2036      	movs	r0, #54	; 0x36
 8001e44:	f7ff fbc0 	bl	80015c8 <LCD_WR_REG>

	LCD_WR_DATA(0x08|DFT_SCAN_DIR);
 8001e48:	2008      	movs	r0, #8
 8001e4a:	f7ff fbcd 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8001e4e:	203a      	movs	r0, #58	; 0x3a
 8001e50:	f7ff fbba 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8001e54:	2055      	movs	r0, #85	; 0x55
 8001e56:	f7ff fbc7 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8001e5a:	20b1      	movs	r0, #177	; 0xb1
 8001e5c:	f7ff fbb4 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e60:	2000      	movs	r0, #0
 8001e62:	f7ff fbc1 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8001e66:	201a      	movs	r0, #26
 8001e68:	f7ff fbbe 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8001e6c:	20b6      	movs	r0, #182	; 0xb6
 8001e6e:	f7ff fbab 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8001e72:	200a      	movs	r0, #10
 8001e74:	f7ff fbb8 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8001e78:	20a2      	movs	r0, #162	; 0xa2
 8001e7a:	f7ff fbb5 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8001e7e:	20f2      	movs	r0, #242	; 0xf2
 8001e80:	f7ff fba2 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001e84:	2000      	movs	r0, #0
 8001e86:	f7ff fbaf 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8001e8a:	2026      	movs	r0, #38	; 0x26
 8001e8c:	f7ff fb9c 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8001e90:	2001      	movs	r0, #1
 8001e92:	f7ff fba9 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8001e96:	20e0      	movs	r0, #224	; 0xe0
 8001e98:	f7ff fb96 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8001e9c:	200f      	movs	r0, #15
 8001e9e:	f7ff fba3 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8001ea2:	202a      	movs	r0, #42	; 0x2a
 8001ea4:	f7ff fba0 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8001ea8:	2028      	movs	r0, #40	; 0x28
 8001eaa:	f7ff fb9d 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001eae:	2008      	movs	r0, #8
 8001eb0:	f7ff fb9a 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8001eb4:	200e      	movs	r0, #14
 8001eb6:	f7ff fb97 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8001eba:	2008      	movs	r0, #8
 8001ebc:	f7ff fb94 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8001ec0:	2054      	movs	r0, #84	; 0x54
 8001ec2:	f7ff fb91 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8001ec6:	20a9      	movs	r0, #169	; 0xa9
 8001ec8:	f7ff fb8e 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8001ecc:	2043      	movs	r0, #67	; 0x43
 8001ece:	f7ff fb8b 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8001ed2:	200a      	movs	r0, #10
 8001ed4:	f7ff fb88 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001ed8:	200f      	movs	r0, #15
 8001eda:	f7ff fb85 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ede:	2000      	movs	r0, #0
 8001ee0:	f7ff fb82 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ee4:	2000      	movs	r0, #0
 8001ee6:	f7ff fb7f 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f7ff fb7c 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	f7ff fb79 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8001ef6:	20e1      	movs	r0, #225	; 0xe1
 8001ef8:	f7ff fb66 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f7ff fb73 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8001f02:	2015      	movs	r0, #21
 8001f04:	f7ff fb70 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8001f08:	2017      	movs	r0, #23
 8001f0a:	f7ff fb6d 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8001f0e:	2007      	movs	r0, #7
 8001f10:	f7ff fb6a 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8001f14:	2011      	movs	r0, #17
 8001f16:	f7ff fb67 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8001f1a:	2006      	movs	r0, #6
 8001f1c:	f7ff fb64 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8001f20:	202b      	movs	r0, #43	; 0x2b
 8001f22:	f7ff fb61 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8001f26:	2056      	movs	r0, #86	; 0x56
 8001f28:	f7ff fb5e 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8001f2c:	203c      	movs	r0, #60	; 0x3c
 8001f2e:	f7ff fb5b 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8001f32:	2005      	movs	r0, #5
 8001f34:	f7ff fb58 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8001f38:	2010      	movs	r0, #16
 8001f3a:	f7ff fb55 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f3e:	200f      	movs	r0, #15
 8001f40:	f7ff fb52 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f44:	203f      	movs	r0, #63	; 0x3f
 8001f46:	f7ff fb4f 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8001f4a:	203f      	movs	r0, #63	; 0x3f
 8001f4c:	f7ff fb4c 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8001f50:	200f      	movs	r0, #15
 8001f52:	f7ff fb49 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8001f56:	202b      	movs	r0, #43	; 0x2b
 8001f58:	f7ff fb36 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f5c:	2000      	movs	r0, #0
 8001f5e:	f7ff fb43 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f62:	2000      	movs	r0, #0
 8001f64:	f7ff fb40 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8001f68:	2001      	movs	r0, #1
 8001f6a:	f7ff fb3d 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8001f6e:	203f      	movs	r0, #63	; 0x3f
 8001f70:	f7ff fb3a 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8001f74:	202a      	movs	r0, #42	; 0x2a
 8001f76:	f7ff fb27 	bl	80015c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fb34 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff fb31 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8001f86:	2000      	movs	r0, #0
 8001f88:	f7ff fb2e 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8001f8c:	20ef      	movs	r0, #239	; 0xef
 8001f8e:	f7ff fb2b 	bl	80015e8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); //Exit Sleep
 8001f92:	2011      	movs	r0, #17
 8001f94:	f7ff fb18 	bl	80015c8 <LCD_WR_REG>
	HAL_Delay(120);
 8001f98:	2078      	movs	r0, #120	; 0x78
 8001f9a:	f001 f95d 	bl	8003258 <HAL_Delay>
	LCD_WR_REG(0x29); //display on
 8001f9e:	2029      	movs	r0, #41	; 0x29
 8001fa0:	f7ff fb12 	bl	80015c8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001faa:	4804      	ldr	r0, [pc, #16]	; (8001fbc <lcd_init+0x2bc>)
 8001fac:	f001 fc26 	bl	80037fc <HAL_GPIO_WritePin>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	200000cc 	.word	0x200000cc
 8001fbc:	40020000 	.word	0x40020000

08001fc0 <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	603b      	str	r3, [r7, #0]
	lcd_DrawPoint(xc + x, yc + y, c);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	b298      	uxth	r0, r3
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	8b3a      	ldrh	r2, [r7, #24]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f7ff fbd3 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc + y, c);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	b298      	uxth	r0, r3
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4413      	add	r3, r2
 8002004:	b29b      	uxth	r3, r3
 8002006:	8b3a      	ldrh	r2, [r7, #24]
 8002008:	4619      	mov	r1, r3
 800200a:	f7ff fbc3 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc + x, yc - y, c);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	b29a      	uxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	b29b      	uxth	r3, r3
 8002016:	4413      	add	r3, r2
 8002018:	b298      	uxth	r0, r3
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	b29a      	uxth	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	b29b      	uxth	r3, r3
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	b29b      	uxth	r3, r3
 8002026:	8b3a      	ldrh	r2, [r7, #24]
 8002028:	4619      	mov	r1, r3
 800202a:	f7ff fbb3 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc - x, yc - y, c);
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	b29a      	uxth	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	b29b      	uxth	r3, r3
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	b298      	uxth	r0, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	b29a      	uxth	r2, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	b29b      	uxth	r3, r3
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	b29b      	uxth	r3, r3
 8002046:	8b3a      	ldrh	r2, [r7, #24]
 8002048:	4619      	mov	r1, r3
 800204a:	f7ff fba3 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc + x, c);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	b29a      	uxth	r2, r3
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4413      	add	r3, r2
 8002058:	b298      	uxth	r0, r3
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	b29a      	uxth	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	b29b      	uxth	r3, r3
 8002062:	4413      	add	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	8b3a      	ldrh	r2, [r7, #24]
 8002068:	4619      	mov	r1, r3
 800206a:	f7ff fb93 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc + x, c);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	b29a      	uxth	r2, r3
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b29b      	uxth	r3, r3
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	b298      	uxth	r0, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	b29a      	uxth	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	b29b      	uxth	r3, r3
 8002082:	4413      	add	r3, r2
 8002084:	b29b      	uxth	r3, r3
 8002086:	8b3a      	ldrh	r2, [r7, #24]
 8002088:	4619      	mov	r1, r3
 800208a:	f7ff fb83 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc + y, yc - x, c);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	b29a      	uxth	r2, r3
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4413      	add	r3, r2
 8002098:	b298      	uxth	r0, r3
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	b29a      	uxth	r2, r3
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	b29b      	uxth	r3, r3
 80020a6:	8b3a      	ldrh	r2, [r7, #24]
 80020a8:	4619      	mov	r1, r3
 80020aa:	f7ff fb73 	bl	8001794 <lcd_DrawPoint>

	lcd_DrawPoint(xc - y, yc - x, c);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	b298      	uxth	r0, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	b29a      	uxth	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	b29b      	uxth	r3, r3
 80020c2:	1ad3      	subs	r3, r2, r3
 80020c4:	b29b      	uxth	r3, r3
 80020c6:	8b3a      	ldrh	r2, [r7, #24]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f7ff fb63 	bl	8001794 <lcd_DrawPoint>
}
 80020ce:	bf00      	nop
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}

080020d6 <lcd_DrawCircle>:

void lcd_DrawCircle(int xc, int yc,uint16_t c,int r, int fill) //ve duong or hinh, c: color
{
 80020d6:	b580      	push	{r7, lr}
 80020d8:	b08a      	sub	sp, #40	; 0x28
 80020da:	af02      	add	r7, sp, #8
 80020dc:	60f8      	str	r0, [r7, #12]
 80020de:	60b9      	str	r1, [r7, #8]
 80020e0:	603b      	str	r3, [r7, #0]
 80020e2:	4613      	mov	r3, r2
 80020e4:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61fb      	str	r3, [r7, #28]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	f1c3 0303 	rsb	r3, r3, #3
 80020f6:	613b      	str	r3, [r7, #16]


	if (fill)
 80020f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d04f      	beq.n	800219e <lcd_DrawCircle+0xc8>
	{
		while (x <= y) {
 80020fe:	e029      	b.n	8002154 <lcd_DrawCircle+0x7e>
			for (yi = x; yi <= y; yi++)
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	e00a      	b.n	800211c <lcd_DrawCircle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8002106:	88fb      	ldrh	r3, [r7, #6]
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	68b9      	ldr	r1, [r7, #8]
 8002110:	68f8      	ldr	r0, [r7, #12]
 8002112:	f7ff ff55 	bl	8001fc0 <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	3301      	adds	r3, #1
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	429a      	cmp	r2, r3
 8002122:	ddf0      	ble.n	8002106 <lcd_DrawCircle+0x30>

			if (d < 0) {
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	2b00      	cmp	r3, #0
 8002128:	da06      	bge.n	8002138 <lcd_DrawCircle+0x62>
				d = d + 4 * x + 6;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	009a      	lsls	r2, r3, #2
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4413      	add	r3, r2
 8002132:	3306      	adds	r3, #6
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	e00a      	b.n	800214e <lcd_DrawCircle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	009a      	lsls	r2, r3, #2
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4413      	add	r3, r2
 8002144:	330a      	adds	r3, #10
 8002146:	613b      	str	r3, [r7, #16]
				y--;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	3b01      	subs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
			}
			x++;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	3301      	adds	r3, #1
 8002152:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8002154:	69fa      	ldr	r2, [r7, #28]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	429a      	cmp	r2, r3
 800215a:	ddd1      	ble.n	8002100 <lcd_DrawCircle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 800215c:	e023      	b.n	80021a6 <lcd_DrawCircle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	69fa      	ldr	r2, [r7, #28]
 8002166:	68b9      	ldr	r1, [r7, #8]
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff ff29 	bl	8001fc0 <_draw_circle_8>
			if (d < 0) {
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	2b00      	cmp	r3, #0
 8002172:	da06      	bge.n	8002182 <lcd_DrawCircle+0xac>
				d = d + 4 * x + 6;
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	009a      	lsls	r2, r3, #2
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	4413      	add	r3, r2
 800217c:	3306      	adds	r3, #6
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	e00a      	b.n	8002198 <lcd_DrawCircle+0xc2>
				d = d + 4 * (x - y) + 10;
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	69bb      	ldr	r3, [r7, #24]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	009a      	lsls	r2, r3, #2
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4413      	add	r3, r2
 800218e:	330a      	adds	r3, #10
 8002190:	613b      	str	r3, [r7, #16]
				y--;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3b01      	subs	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
			x++;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	3301      	adds	r3, #1
 800219c:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800219e:	69fa      	ldr	r2, [r7, #28]
 80021a0:	69bb      	ldr	r3, [r7, #24]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	dddb      	ble.n	800215e <lcd_DrawCircle+0x88>
}
 80021a6:	bf00      	nop
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <lcd_ShowStr>:

void lcd_ShowStr(uint16_t x, uint16_t y,char *str,uint16_t fc, uint16_t bc,uint8_t sizey,uint8_t mode)
{
 80021b0:	b590      	push	{r4, r7, lr}
 80021b2:	b08b      	sub	sp, #44	; 0x2c
 80021b4:	af04      	add	r7, sp, #16
 80021b6:	60ba      	str	r2, [r7, #8]
 80021b8:	461a      	mov	r2, r3
 80021ba:	4603      	mov	r3, r0
 80021bc:	81fb      	strh	r3, [r7, #14]
 80021be:	460b      	mov	r3, r1
 80021c0:	81bb      	strh	r3, [r7, #12]
 80021c2:	4613      	mov	r3, r2
 80021c4:	80fb      	strh	r3, [r7, #6]
	uint16_t x0=x;
 80021c6:	89fb      	ldrh	r3, [r7, #14]
 80021c8:	82bb      	strh	r3, [r7, #20]
  uint8_t bHz=0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	75fb      	strb	r3, [r7, #23]
	while(*str!=0)
 80021ce:	e048      	b.n	8002262 <lcd_ShowStr+0xb2>
	{
		if(!bHz)
 80021d0:	7dfb      	ldrb	r3, [r7, #23]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d145      	bne.n	8002262 <lcd_ShowStr+0xb2>
		{
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 80021d6:	89fa      	ldrh	r2, [r7, #14]
 80021d8:	4b26      	ldr	r3, [pc, #152]	; (8002274 <lcd_ShowStr+0xc4>)
 80021da:	881b      	ldrh	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021e2:	085b      	lsrs	r3, r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	1acb      	subs	r3, r1, r3
 80021e8:	429a      	cmp	r2, r3
 80021ea:	dc3f      	bgt.n	800226c <lcd_ShowStr+0xbc>
 80021ec:	89ba      	ldrh	r2, [r7, #12]
 80021ee:	4b21      	ldr	r3, [pc, #132]	; (8002274 <lcd_ShowStr+0xc4>)
 80021f0:	885b      	ldrh	r3, [r3, #2]
 80021f2:	4619      	mov	r1, r3
 80021f4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80021f8:	1acb      	subs	r3, r1, r3
 80021fa:	429a      	cmp	r2, r3
 80021fc:	dc36      	bgt.n	800226c <lcd_ShowStr+0xbc>
			if(*str>0x80)bHz=1;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b80      	cmp	r3, #128	; 0x80
 8002204:	d902      	bls.n	800220c <lcd_ShowStr+0x5c>
 8002206:	2301      	movs	r3, #1
 8002208:	75fb      	strb	r3, [r7, #23]
 800220a:	e02a      	b.n	8002262 <lcd_ShowStr+0xb2>
			else
			{
				if(*str==0x0D)
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	2b0d      	cmp	r3, #13
 8002212:	d10b      	bne.n	800222c <lcd_ShowStr+0x7c>
				{
					y+=sizey;
 8002214:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002218:	b29a      	uxth	r2, r3
 800221a:	89bb      	ldrh	r3, [r7, #12]
 800221c:	4413      	add	r3, r2
 800221e:	81bb      	strh	r3, [r7, #12]
					x=x0;
 8002220:	8abb      	ldrh	r3, [r7, #20]
 8002222:	81fb      	strh	r3, [r7, #14]
					str++;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	3301      	adds	r3, #1
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	e017      	b.n	800225c <lcd_ShowStr+0xac>
				}else
				{
					lcd_ShowChar(x,y,*str,fc,bc,sizey,mode);
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	88fc      	ldrh	r4, [r7, #6]
 8002232:	89b9      	ldrh	r1, [r7, #12]
 8002234:	89f8      	ldrh	r0, [r7, #14]
 8002236:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800223a:	9302      	str	r3, [sp, #8]
 800223c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	4623      	mov	r3, r4
 8002248:	f7ff fb76 	bl	8001938 <lcd_ShowChar>
					x+=sizey/2;
 800224c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	b29a      	uxth	r2, r3
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	4413      	add	r3, r2
 800225a:	81fb      	strh	r3, [r7, #14]
				}
			  str++;
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	3301      	adds	r3, #1
 8002260:	60bb      	str	r3, [r7, #8]
	while(*str!=0)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1b2      	bne.n	80021d0 <lcd_ShowStr+0x20>
 800226a:	e000      	b.n	800226e <lcd_ShowStr+0xbe>
			if(x>(lcddev.width-sizey/2)||y>(lcddev.height-sizey)) return;
 800226c:	bf00      	nop
			}
		}
	}
}
 800226e:	371c      	adds	r7, #28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd90      	pop	{r4, r7, pc}
 8002274:	200000cc 	.word	0x200000cc

08002278 <box_rec>:

// draw a rectangle-box
void box_rec(uint8_t box_idx, uint16_t x_start, uint16_t y_start,
			 uint16_t width, uint16_t height, uint16_t color_edge,
			 uint16_t color_fill, uint8_t is_fill)
{
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	b085      	sub	sp, #20
 800227c:	af02      	add	r7, sp, #8
 800227e:	4604      	mov	r4, r0
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	4603      	mov	r3, r0
 800228c:	80bb      	strh	r3, [r7, #4]
 800228e:	460b      	mov	r3, r1
 8002290:	807b      	strh	r3, [r7, #2]
 8002292:	4613      	mov	r3, r2
 8002294:	803b      	strh	r3, [r7, #0]
	BOX[box_idx].X = x_start;
 8002296:	79fa      	ldrb	r2, [r7, #7]
 8002298:	4970      	ldr	r1, [pc, #448]	; (800245c <box_rec+0x1e4>)
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	440b      	add	r3, r1
 80022a4:	88ba      	ldrh	r2, [r7, #4]
 80022a6:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].Y = y_start;
 80022a8:	79fa      	ldrb	r2, [r7, #7]
 80022aa:	496c      	ldr	r1, [pc, #432]	; (800245c <box_rec+0x1e4>)
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	440b      	add	r3, r1
 80022b6:	3302      	adds	r3, #2
 80022b8:	887a      	ldrh	r2, [r7, #2]
 80022ba:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].height = height;
 80022bc:	79fa      	ldrb	r2, [r7, #7]
 80022be:	4967      	ldr	r1, [pc, #412]	; (800245c <box_rec+0x1e4>)
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	440b      	add	r3, r1
 80022ca:	3304      	adds	r3, #4
 80022cc:	8c3a      	ldrh	r2, [r7, #32]
 80022ce:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].width = width;
 80022d0:	79fa      	ldrb	r2, [r7, #7]
 80022d2:	4962      	ldr	r1, [pc, #392]	; (800245c <box_rec+0x1e4>)
 80022d4:	4613      	mov	r3, r2
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	440b      	add	r3, r1
 80022de:	3306      	adds	r3, #6
 80022e0:	883a      	ldrh	r2, [r7, #0]
 80022e2:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].COLOR_EDGE = color_edge;
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	495d      	ldr	r1, [pc, #372]	; (800245c <box_rec+0x1e4>)
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	440b      	add	r3, r1
 80022f2:	3308      	adds	r3, #8
 80022f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80022f6:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].COLOR_FILL = color_fill;
 80022f8:	79fa      	ldrb	r2, [r7, #7]
 80022fa:	4958      	ldr	r1, [pc, #352]	; (800245c <box_rec+0x1e4>)
 80022fc:	4613      	mov	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	1a9b      	subs	r3, r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	440b      	add	r3, r1
 8002306:	330a      	adds	r3, #10
 8002308:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800230a:	801a      	strh	r2, [r3, #0]
	BOX[box_idx].is_fill = is_fill;
 800230c:	79fa      	ldrb	r2, [r7, #7]
 800230e:	4953      	ldr	r1, [pc, #332]	; (800245c <box_rec+0x1e4>)
 8002310:	4613      	mov	r3, r2
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	1a9b      	subs	r3, r3, r2
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	440b      	add	r3, r1
 800231a:	330c      	adds	r3, #12
 800231c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002320:	701a      	strb	r2, [r3, #0]
	lcd_DrawRectangle(BOX[box_idx].X, BOX[box_idx].Y,
 8002322:	79fa      	ldrb	r2, [r7, #7]
 8002324:	494d      	ldr	r1, [pc, #308]	; (800245c <box_rec+0x1e4>)
 8002326:	4613      	mov	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	440b      	add	r3, r1
 8002330:	8818      	ldrh	r0, [r3, #0]
 8002332:	79fa      	ldrb	r2, [r7, #7]
 8002334:	4949      	ldr	r1, [pc, #292]	; (800245c <box_rec+0x1e4>)
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	440b      	add	r3, r1
 8002340:	3302      	adds	r3, #2
 8002342:	881c      	ldrh	r4, [r3, #0]
					  BOX[box_idx].X + BOX[box_idx].width,
 8002344:	79fa      	ldrb	r2, [r7, #7]
 8002346:	4945      	ldr	r1, [pc, #276]	; (800245c <box_rec+0x1e4>)
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	440b      	add	r3, r1
 8002352:	8819      	ldrh	r1, [r3, #0]
 8002354:	79fa      	ldrb	r2, [r7, #7]
 8002356:	4d41      	ldr	r5, [pc, #260]	; (800245c <box_rec+0x1e4>)
 8002358:	4613      	mov	r3, r2
 800235a:	00db      	lsls	r3, r3, #3
 800235c:	1a9b      	subs	r3, r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	442b      	add	r3, r5
 8002362:	3306      	adds	r3, #6
 8002364:	881b      	ldrh	r3, [r3, #0]
	lcd_DrawRectangle(BOX[box_idx].X, BOX[box_idx].Y,
 8002366:	440b      	add	r3, r1
 8002368:	b29d      	uxth	r5, r3
					  BOX[box_idx].Y + BOX[box_idx].height, BOX[box_idx].COLOR_EDGE);
 800236a:	79fa      	ldrb	r2, [r7, #7]
 800236c:	493b      	ldr	r1, [pc, #236]	; (800245c <box_rec+0x1e4>)
 800236e:	4613      	mov	r3, r2
 8002370:	00db      	lsls	r3, r3, #3
 8002372:	1a9b      	subs	r3, r3, r2
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	440b      	add	r3, r1
 8002378:	3302      	adds	r3, #2
 800237a:	8819      	ldrh	r1, [r3, #0]
 800237c:	79fa      	ldrb	r2, [r7, #7]
 800237e:	4e37      	ldr	r6, [pc, #220]	; (800245c <box_rec+0x1e4>)
 8002380:	4613      	mov	r3, r2
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4433      	add	r3, r6
 800238a:	3304      	adds	r3, #4
 800238c:	881b      	ldrh	r3, [r3, #0]
	lcd_DrawRectangle(BOX[box_idx].X, BOX[box_idx].Y,
 800238e:	440b      	add	r3, r1
 8002390:	b299      	uxth	r1, r3
 8002392:	79fa      	ldrb	r2, [r7, #7]
 8002394:	4e31      	ldr	r6, [pc, #196]	; (800245c <box_rec+0x1e4>)
 8002396:	4613      	mov	r3, r2
 8002398:	00db      	lsls	r3, r3, #3
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4433      	add	r3, r6
 80023a0:	3308      	adds	r3, #8
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	9300      	str	r3, [sp, #0]
 80023a6:	460b      	mov	r3, r1
 80023a8:	462a      	mov	r2, r5
 80023aa:	4621      	mov	r1, r4
 80023ac:	f7ff fa8d 	bl	80018ca <lcd_DrawRectangle>
	if (BOX[box_idx].is_fill)
 80023b0:	79fa      	ldrb	r2, [r7, #7]
 80023b2:	492a      	ldr	r1, [pc, #168]	; (800245c <box_rec+0x1e4>)
 80023b4:	4613      	mov	r3, r2
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	330c      	adds	r3, #12
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d046      	beq.n	8002454 <box_rec+0x1dc>
	{
		lcd_Fill(BOX[box_idx].X, BOX[box_idx].Y,
 80023c6:	79fa      	ldrb	r2, [r7, #7]
 80023c8:	4924      	ldr	r1, [pc, #144]	; (800245c <box_rec+0x1e4>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	440b      	add	r3, r1
 80023d4:	8818      	ldrh	r0, [r3, #0]
 80023d6:	79fa      	ldrb	r2, [r7, #7]
 80023d8:	4920      	ldr	r1, [pc, #128]	; (800245c <box_rec+0x1e4>)
 80023da:	4613      	mov	r3, r2
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	1a9b      	subs	r3, r3, r2
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	440b      	add	r3, r1
 80023e4:	3302      	adds	r3, #2
 80023e6:	881c      	ldrh	r4, [r3, #0]
				 BOX[box_idx].X + BOX[box_idx].width,
 80023e8:	79fa      	ldrb	r2, [r7, #7]
 80023ea:	491c      	ldr	r1, [pc, #112]	; (800245c <box_rec+0x1e4>)
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	1a9b      	subs	r3, r3, r2
 80023f2:	005b      	lsls	r3, r3, #1
 80023f4:	440b      	add	r3, r1
 80023f6:	8819      	ldrh	r1, [r3, #0]
 80023f8:	79fa      	ldrb	r2, [r7, #7]
 80023fa:	4d18      	ldr	r5, [pc, #96]	; (800245c <box_rec+0x1e4>)
 80023fc:	4613      	mov	r3, r2
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	442b      	add	r3, r5
 8002406:	3306      	adds	r3, #6
 8002408:	881b      	ldrh	r3, [r3, #0]
		lcd_Fill(BOX[box_idx].X, BOX[box_idx].Y,
 800240a:	440b      	add	r3, r1
 800240c:	b29d      	uxth	r5, r3
				 BOX[box_idx].Y + BOX[box_idx].height, BOX[box_idx].COLOR_FILL);
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	4912      	ldr	r1, [pc, #72]	; (800245c <box_rec+0x1e4>)
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	1a9b      	subs	r3, r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	440b      	add	r3, r1
 800241c:	3302      	adds	r3, #2
 800241e:	8819      	ldrh	r1, [r3, #0]
 8002420:	79fa      	ldrb	r2, [r7, #7]
 8002422:	4e0e      	ldr	r6, [pc, #56]	; (800245c <box_rec+0x1e4>)
 8002424:	4613      	mov	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	1a9b      	subs	r3, r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4433      	add	r3, r6
 800242e:	3304      	adds	r3, #4
 8002430:	881b      	ldrh	r3, [r3, #0]
		lcd_Fill(BOX[box_idx].X, BOX[box_idx].Y,
 8002432:	440b      	add	r3, r1
 8002434:	b299      	uxth	r1, r3
 8002436:	79fa      	ldrb	r2, [r7, #7]
 8002438:	4e08      	ldr	r6, [pc, #32]	; (800245c <box_rec+0x1e4>)
 800243a:	4613      	mov	r3, r2
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	1a9b      	subs	r3, r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	4433      	add	r3, r6
 8002444:	330a      	adds	r3, #10
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	460b      	mov	r3, r1
 800244c:	462a      	mov	r2, r5
 800244e:	4621      	mov	r1, r4
 8002450:	f7ff f96a 	bl	8001728 <lcd_Fill>
	}
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800245c:	20000140 	.word	0x20000140

08002460 <init_traffic_light>:

/*@brief:	function to init traffic light
 * @para:	none
 * @retval:	none*/
void init_traffic_light(void)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	b085      	sub	sp, #20
 8002464:	af04      	add	r7, sp, #16
	/*init WE-----------------------------------------------------------------*/
	traffic_WE.x = 40;
 8002466:	4b60      	ldr	r3, [pc, #384]	; (80025e8 <init_traffic_light+0x188>)
 8002468:	2228      	movs	r2, #40	; 0x28
 800246a:	801a      	strh	r2, [r3, #0]
	traffic_WE.y = 60;
 800246c:	4b5e      	ldr	r3, [pc, #376]	; (80025e8 <init_traffic_light+0x188>)
 800246e:	223c      	movs	r2, #60	; 0x3c
 8002470:	805a      	strh	r2, [r3, #2]
	traffic_WE.width = 120;
 8002472:	4b5d      	ldr	r3, [pc, #372]	; (80025e8 <init_traffic_light+0x188>)
 8002474:	2278      	movs	r2, #120	; 0x78
 8002476:	80da      	strh	r2, [r3, #6]
	traffic_WE.height = 40;
 8002478:	4b5b      	ldr	r3, [pc, #364]	; (80025e8 <init_traffic_light+0x188>)
 800247a:	2228      	movs	r2, #40	; 0x28
 800247c:	809a      	strh	r2, [r3, #4]
	traffic_WE.COLOR_FILL = GRAY;
 800247e:	4b5a      	ldr	r3, [pc, #360]	; (80025e8 <init_traffic_light+0x188>)
 8002480:	f248 4230 	movw	r2, #33840	; 0x8430
 8002484:	811a      	strh	r2, [r3, #8]
	// draw a black box
	lcd_DrawRectangle(traffic_WE.x, traffic_WE.y, traffic_WE.x + traffic_WE.width, traffic_WE.y + traffic_WE.height, traffic_WE.COLOR_FILL);
 8002486:	4b58      	ldr	r3, [pc, #352]	; (80025e8 <init_traffic_light+0x188>)
 8002488:	8818      	ldrh	r0, [r3, #0]
 800248a:	4b57      	ldr	r3, [pc, #348]	; (80025e8 <init_traffic_light+0x188>)
 800248c:	8859      	ldrh	r1, [r3, #2]
 800248e:	4b56      	ldr	r3, [pc, #344]	; (80025e8 <init_traffic_light+0x188>)
 8002490:	881a      	ldrh	r2, [r3, #0]
 8002492:	4b55      	ldr	r3, [pc, #340]	; (80025e8 <init_traffic_light+0x188>)
 8002494:	88db      	ldrh	r3, [r3, #6]
 8002496:	4413      	add	r3, r2
 8002498:	b29c      	uxth	r4, r3
 800249a:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <init_traffic_light+0x188>)
 800249c:	885a      	ldrh	r2, [r3, #2]
 800249e:	4b52      	ldr	r3, [pc, #328]	; (80025e8 <init_traffic_light+0x188>)
 80024a0:	889b      	ldrh	r3, [r3, #4]
 80024a2:	4413      	add	r3, r2
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <init_traffic_light+0x188>)
 80024a8:	891b      	ldrh	r3, [r3, #8]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4613      	mov	r3, r2
 80024ae:	4622      	mov	r2, r4
 80024b0:	f7ff fa0b 	bl	80018ca <lcd_DrawRectangle>
	lcd_Fill(traffic_WE.x, traffic_WE.y, traffic_WE.x + traffic_WE.width, traffic_WE.y + traffic_WE.height, traffic_WE.COLOR_FILL);
 80024b4:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <init_traffic_light+0x188>)
 80024b6:	8818      	ldrh	r0, [r3, #0]
 80024b8:	4b4b      	ldr	r3, [pc, #300]	; (80025e8 <init_traffic_light+0x188>)
 80024ba:	8859      	ldrh	r1, [r3, #2]
 80024bc:	4b4a      	ldr	r3, [pc, #296]	; (80025e8 <init_traffic_light+0x188>)
 80024be:	881a      	ldrh	r2, [r3, #0]
 80024c0:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <init_traffic_light+0x188>)
 80024c2:	88db      	ldrh	r3, [r3, #6]
 80024c4:	4413      	add	r3, r2
 80024c6:	b29c      	uxth	r4, r3
 80024c8:	4b47      	ldr	r3, [pc, #284]	; (80025e8 <init_traffic_light+0x188>)
 80024ca:	885a      	ldrh	r2, [r3, #2]
 80024cc:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <init_traffic_light+0x188>)
 80024ce:	889b      	ldrh	r3, [r3, #4]
 80024d0:	4413      	add	r3, r2
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	4b44      	ldr	r3, [pc, #272]	; (80025e8 <init_traffic_light+0x188>)
 80024d6:	891b      	ldrh	r3, [r3, #8]
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	4613      	mov	r3, r2
 80024dc:	4622      	mov	r2, r4
 80024de:	f7ff f923 	bl	8001728 <lcd_Fill>

	// calculate center and radius of each light inside above black box
	traffic_WE.red.center_x = traffic_WE.x + traffic_WE.width / 6;
 80024e2:	4b41      	ldr	r3, [pc, #260]	; (80025e8 <init_traffic_light+0x188>)
 80024e4:	881a      	ldrh	r2, [r3, #0]
 80024e6:	4b40      	ldr	r3, [pc, #256]	; (80025e8 <init_traffic_light+0x188>)
 80024e8:	88db      	ldrh	r3, [r3, #6]
 80024ea:	4940      	ldr	r1, [pc, #256]	; (80025ec <init_traffic_light+0x18c>)
 80024ec:	fba1 1303 	umull	r1, r3, r1, r3
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	4413      	add	r3, r2
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <init_traffic_light+0x188>)
 80024fa:	815a      	strh	r2, [r3, #10]
	traffic_WE.yellow.center_x = traffic_WE.x + 3 * traffic_WE.width / 6;
 80024fc:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <init_traffic_light+0x188>)
 80024fe:	881a      	ldrh	r2, [r3, #0]
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <init_traffic_light+0x188>)
 8002502:	88db      	ldrh	r3, [r3, #6]
 8002504:	0fd9      	lsrs	r1, r3, #31
 8002506:	440b      	add	r3, r1
 8002508:	105b      	asrs	r3, r3, #1
 800250a:	b29b      	uxth	r3, r3
 800250c:	4413      	add	r3, r2
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b35      	ldr	r3, [pc, #212]	; (80025e8 <init_traffic_light+0x188>)
 8002512:	829a      	strh	r2, [r3, #20]
	traffic_WE.green.center_x = traffic_WE.x + 5 * traffic_WE.width / 6;
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <init_traffic_light+0x188>)
 8002516:	881a      	ldrh	r2, [r3, #0]
 8002518:	4b33      	ldr	r3, [pc, #204]	; (80025e8 <init_traffic_light+0x188>)
 800251a:	88db      	ldrh	r3, [r3, #6]
 800251c:	4619      	mov	r1, r3
 800251e:	460b      	mov	r3, r1
 8002520:	009b      	lsls	r3, r3, #2
 8002522:	440b      	add	r3, r1
 8002524:	4932      	ldr	r1, [pc, #200]	; (80025f0 <init_traffic_light+0x190>)
 8002526:	fb81 0103 	smull	r0, r1, r1, r3
 800252a:	17db      	asrs	r3, r3, #31
 800252c:	1acb      	subs	r3, r1, r3
 800252e:	b29b      	uxth	r3, r3
 8002530:	4413      	add	r3, r2
 8002532:	b29a      	uxth	r2, r3
 8002534:	4b2c      	ldr	r3, [pc, #176]	; (80025e8 <init_traffic_light+0x188>)
 8002536:	83da      	strh	r2, [r3, #30]

	traffic_WE.red.center_y = traffic_WE.y + traffic_WE.height / 2;
 8002538:	4b2b      	ldr	r3, [pc, #172]	; (80025e8 <init_traffic_light+0x188>)
 800253a:	885a      	ldrh	r2, [r3, #2]
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <init_traffic_light+0x188>)
 800253e:	889b      	ldrh	r3, [r3, #4]
 8002540:	085b      	lsrs	r3, r3, #1
 8002542:	b29b      	uxth	r3, r3
 8002544:	4413      	add	r3, r2
 8002546:	b29a      	uxth	r2, r3
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <init_traffic_light+0x188>)
 800254a:	819a      	strh	r2, [r3, #12]
	traffic_WE.yellow.center_y = traffic_WE.red.center_y;
 800254c:	4b26      	ldr	r3, [pc, #152]	; (80025e8 <init_traffic_light+0x188>)
 800254e:	899a      	ldrh	r2, [r3, #12]
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <init_traffic_light+0x188>)
 8002552:	82da      	strh	r2, [r3, #22]
	traffic_WE.green.center_y = traffic_WE.red.center_y;
 8002554:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <init_traffic_light+0x188>)
 8002556:	899a      	ldrh	r2, [r3, #12]
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <init_traffic_light+0x188>)
 800255a:	841a      	strh	r2, [r3, #32]

	traffic_WE.red.radius = (traffic_WE.height / 2) * 90 / 100;
 800255c:	4b22      	ldr	r3, [pc, #136]	; (80025e8 <init_traffic_light+0x188>)
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	085b      	lsrs	r3, r3, #1
 8002562:	b29b      	uxth	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	235a      	movs	r3, #90	; 0x5a
 8002568:	fb03 f302 	mul.w	r3, r3, r2
 800256c:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <init_traffic_light+0x194>)
 800256e:	fb82 1203 	smull	r1, r2, r2, r3
 8002572:	1152      	asrs	r2, r2, #5
 8002574:	17db      	asrs	r3, r3, #31
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	b29a      	uxth	r2, r3
 800257a:	4b1b      	ldr	r3, [pc, #108]	; (80025e8 <init_traffic_light+0x188>)
 800257c:	821a      	strh	r2, [r3, #16]
	traffic_WE.yellow.radius = traffic_WE.red.radius;
 800257e:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <init_traffic_light+0x188>)
 8002580:	8a1a      	ldrh	r2, [r3, #16]
 8002582:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <init_traffic_light+0x188>)
 8002584:	835a      	strh	r2, [r3, #26]
	traffic_WE.green.radius = traffic_WE.red.radius;
 8002586:	4b18      	ldr	r3, [pc, #96]	; (80025e8 <init_traffic_light+0x188>)
 8002588:	8a1a      	ldrh	r2, [r3, #16]
 800258a:	4b17      	ldr	r3, [pc, #92]	; (80025e8 <init_traffic_light+0x188>)
 800258c:	849a      	strh	r2, [r3, #36]	; 0x24

	traffic_WE.red.is_fill = 1;
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <init_traffic_light+0x188>)
 8002590:	2201      	movs	r2, #1
 8002592:	749a      	strb	r2, [r3, #18]
	if (traffic_WE.red.is_fill == 1)
 8002594:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <init_traffic_light+0x188>)
 8002596:	7c9b      	ldrb	r3, [r3, #18]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d104      	bne.n	80025a6 <init_traffic_light+0x146>
	{
		traffic_WE.red.COLOR_FILL = RED;
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <init_traffic_light+0x188>)
 800259e:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80025a2:	81da      	strh	r2, [r3, #14]
 80025a4:	e002      	b.n	80025ac <init_traffic_light+0x14c>
	}
	else
	{
		traffic_WE.red.COLOR_FILL = BLACK;
 80025a6:	4b10      	ldr	r3, [pc, #64]	; (80025e8 <init_traffic_light+0x188>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	81da      	strh	r2, [r3, #14]
	}
	traffic_WE.yellow.is_fill = 1;
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <init_traffic_light+0x188>)
 80025ae:	2201      	movs	r2, #1
 80025b0:	771a      	strb	r2, [r3, #28]
	if (traffic_WE.yellow.is_fill == 1)
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <init_traffic_light+0x188>)
 80025b4:	7f1b      	ldrb	r3, [r3, #28]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d104      	bne.n	80025c4 <init_traffic_light+0x164>
	{
		traffic_WE.yellow.COLOR_FILL = YELLOW;
 80025ba:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <init_traffic_light+0x188>)
 80025bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80025c0:	831a      	strh	r2, [r3, #24]
 80025c2:	e002      	b.n	80025ca <init_traffic_light+0x16a>
	}
	else
	{
		traffic_WE.yellow.COLOR_FILL = BLACK;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <init_traffic_light+0x188>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	831a      	strh	r2, [r3, #24]
	}
	traffic_WE.green.is_fill = 1;
 80025ca:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <init_traffic_light+0x188>)
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (traffic_WE.green.is_fill == 1)
 80025d2:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <init_traffic_light+0x188>)
 80025d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d10d      	bne.n	80025f8 <init_traffic_light+0x198>
	{
		traffic_WE.green.COLOR_FILL = GREEN;
 80025dc:	4b02      	ldr	r3, [pc, #8]	; (80025e8 <init_traffic_light+0x188>)
 80025de:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80025e2:	845a      	strh	r2, [r3, #34]	; 0x22
 80025e4:	e00b      	b.n	80025fe <init_traffic_light+0x19e>
 80025e6:	bf00      	nop
 80025e8:	20000188 	.word	0x20000188
 80025ec:	aaaaaaab 	.word	0xaaaaaaab
 80025f0:	2aaaaaab 	.word	0x2aaaaaab
 80025f4:	51eb851f 	.word	0x51eb851f
	}
	else
	{
		traffic_WE.green.COLOR_FILL = BLACK;
 80025f8:	4b94      	ldr	r3, [pc, #592]	; (800284c <init_traffic_light+0x3ec>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	// draw red
	lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y, traffic_WE.red.COLOR_FILL, traffic_WE.red.radius, traffic_WE.red.is_fill);
 80025fe:	4b93      	ldr	r3, [pc, #588]	; (800284c <init_traffic_light+0x3ec>)
 8002600:	895b      	ldrh	r3, [r3, #10]
 8002602:	4618      	mov	r0, r3
 8002604:	4b91      	ldr	r3, [pc, #580]	; (800284c <init_traffic_light+0x3ec>)
 8002606:	899b      	ldrh	r3, [r3, #12]
 8002608:	4619      	mov	r1, r3
 800260a:	4b90      	ldr	r3, [pc, #576]	; (800284c <init_traffic_light+0x3ec>)
 800260c:	89da      	ldrh	r2, [r3, #14]
 800260e:	4b8f      	ldr	r3, [pc, #572]	; (800284c <init_traffic_light+0x3ec>)
 8002610:	8a1b      	ldrh	r3, [r3, #16]
 8002612:	461c      	mov	r4, r3
 8002614:	4b8d      	ldr	r3, [pc, #564]	; (800284c <init_traffic_light+0x3ec>)
 8002616:	7c9b      	ldrb	r3, [r3, #18]
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	4623      	mov	r3, r4
 800261c:	f7ff fd5b 	bl	80020d6 <lcd_DrawCircle>
	// draw yellow
	lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y, traffic_WE.yellow.COLOR_FILL, traffic_WE.yellow.radius, traffic_WE.yellow.is_fill);
 8002620:	4b8a      	ldr	r3, [pc, #552]	; (800284c <init_traffic_light+0x3ec>)
 8002622:	8a9b      	ldrh	r3, [r3, #20]
 8002624:	4618      	mov	r0, r3
 8002626:	4b89      	ldr	r3, [pc, #548]	; (800284c <init_traffic_light+0x3ec>)
 8002628:	8adb      	ldrh	r3, [r3, #22]
 800262a:	4619      	mov	r1, r3
 800262c:	4b87      	ldr	r3, [pc, #540]	; (800284c <init_traffic_light+0x3ec>)
 800262e:	8b1a      	ldrh	r2, [r3, #24]
 8002630:	4b86      	ldr	r3, [pc, #536]	; (800284c <init_traffic_light+0x3ec>)
 8002632:	8b5b      	ldrh	r3, [r3, #26]
 8002634:	461c      	mov	r4, r3
 8002636:	4b85      	ldr	r3, [pc, #532]	; (800284c <init_traffic_light+0x3ec>)
 8002638:	7f1b      	ldrb	r3, [r3, #28]
 800263a:	9300      	str	r3, [sp, #0]
 800263c:	4623      	mov	r3, r4
 800263e:	f7ff fd4a 	bl	80020d6 <lcd_DrawCircle>
	// draw green
	lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y, traffic_WE.green.COLOR_FILL, traffic_WE.green.radius, traffic_WE.green.is_fill);
 8002642:	4b82      	ldr	r3, [pc, #520]	; (800284c <init_traffic_light+0x3ec>)
 8002644:	8bdb      	ldrh	r3, [r3, #30]
 8002646:	4618      	mov	r0, r3
 8002648:	4b80      	ldr	r3, [pc, #512]	; (800284c <init_traffic_light+0x3ec>)
 800264a:	8c1b      	ldrh	r3, [r3, #32]
 800264c:	4619      	mov	r1, r3
 800264e:	4b7f      	ldr	r3, [pc, #508]	; (800284c <init_traffic_light+0x3ec>)
 8002650:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002652:	4b7e      	ldr	r3, [pc, #504]	; (800284c <init_traffic_light+0x3ec>)
 8002654:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002656:	461c      	mov	r4, r3
 8002658:	4b7c      	ldr	r3, [pc, #496]	; (800284c <init_traffic_light+0x3ec>)
 800265a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	4623      	mov	r3, r4
 8002662:	f7ff fd38 	bl	80020d6 <lcd_DrawCircle>

	// init num
	traffic_WE.num.len = 2;
 8002666:	4b79      	ldr	r3, [pc, #484]	; (800284c <init_traffic_light+0x3ec>)
 8002668:	2202      	movs	r2, #2
 800266a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	traffic_WE.num.fc = WHITE;
 800266e:	4b77      	ldr	r3, [pc, #476]	; (800284c <init_traffic_light+0x3ec>)
 8002670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002674:	861a      	strh	r2, [r3, #48]	; 0x30
	traffic_WE.num.bc = BLACK;
 8002676:	4b75      	ldr	r3, [pc, #468]	; (800284c <init_traffic_light+0x3ec>)
 8002678:	2200      	movs	r2, #0
 800267a:	865a      	strh	r2, [r3, #50]	; 0x32
	traffic_WE.num.sizey = 32;
 800267c:	4b73      	ldr	r3, [pc, #460]	; (800284c <init_traffic_light+0x3ec>)
 800267e:	2220      	movs	r2, #32
 8002680:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	traffic_WE.num.x = traffic_WE.x - traffic_WE.num.len * traffic_WE.num.sizey / 2;
 8002684:	4b71      	ldr	r3, [pc, #452]	; (800284c <init_traffic_light+0x3ec>)
 8002686:	881a      	ldrh	r2, [r3, #0]
 8002688:	4b70      	ldr	r3, [pc, #448]	; (800284c <init_traffic_light+0x3ec>)
 800268a:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 800268e:	4619      	mov	r1, r3
 8002690:	4b6e      	ldr	r3, [pc, #440]	; (800284c <init_traffic_light+0x3ec>)
 8002692:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002696:	fb03 f301 	mul.w	r3, r3, r1
 800269a:	0fd9      	lsrs	r1, r3, #31
 800269c:	440b      	add	r3, r1
 800269e:	105b      	asrs	r3, r3, #1
 80026a0:	425b      	negs	r3, r3
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	4b68      	ldr	r3, [pc, #416]	; (800284c <init_traffic_light+0x3ec>)
 80026aa:	851a      	strh	r2, [r3, #40]	; 0x28
	traffic_WE.num.y = traffic_WE.y;
 80026ac:	4b67      	ldr	r3, [pc, #412]	; (800284c <init_traffic_light+0x3ec>)
 80026ae:	885a      	ldrh	r2, [r3, #2]
 80026b0:	4b66      	ldr	r3, [pc, #408]	; (800284c <init_traffic_light+0x3ec>)
 80026b2:	855a      	strh	r2, [r3, #42]	; 0x2a
	traffic_WE.num.num = 10;
 80026b4:	4b65      	ldr	r3, [pc, #404]	; (800284c <init_traffic_light+0x3ec>)
 80026b6:	220a      	movs	r2, #10
 80026b8:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd_ShowIntNum(traffic_WE.num.x, traffic_WE.num.y, traffic_WE.num.num, traffic_WE.num.len, traffic_WE.num.fc, traffic_WE.num.bc, traffic_WE.num.sizey);
 80026ba:	4b64      	ldr	r3, [pc, #400]	; (800284c <init_traffic_light+0x3ec>)
 80026bc:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 80026be:	4b63      	ldr	r3, [pc, #396]	; (800284c <init_traffic_light+0x3ec>)
 80026c0:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 80026c2:	4b62      	ldr	r3, [pc, #392]	; (800284c <init_traffic_light+0x3ec>)
 80026c4:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 80026c6:	4b61      	ldr	r3, [pc, #388]	; (800284c <init_traffic_light+0x3ec>)
 80026c8:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 80026cc:	4b5f      	ldr	r3, [pc, #380]	; (800284c <init_traffic_light+0x3ec>)
 80026ce:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80026d0:	4a5e      	ldr	r2, [pc, #376]	; (800284c <init_traffic_light+0x3ec>)
 80026d2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80026d4:	495d      	ldr	r1, [pc, #372]	; (800284c <init_traffic_light+0x3ec>)
 80026d6:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 80026da:	9102      	str	r1, [sp, #8]
 80026dc:	9201      	str	r2, [sp, #4]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	4633      	mov	r3, r6
 80026e2:	462a      	mov	r2, r5
 80026e4:	4621      	mov	r1, r4
 80026e6:	f7ff fa13 	bl	8001b10 <lcd_ShowIntNum>
	/*End init WE-------------------------------------------------------------*/

	/*init NS    -------------------------------------------------------------*/
	traffic_NS.x = 180;
 80026ea:	4b59      	ldr	r3, [pc, #356]	; (8002850 <init_traffic_light+0x3f0>)
 80026ec:	22b4      	movs	r2, #180	; 0xb4
 80026ee:	801a      	strh	r2, [r3, #0]
	traffic_NS.y = 120;
 80026f0:	4b57      	ldr	r3, [pc, #348]	; (8002850 <init_traffic_light+0x3f0>)
 80026f2:	2278      	movs	r2, #120	; 0x78
 80026f4:	805a      	strh	r2, [r3, #2]
	traffic_NS.width = traffic_WE.height;
 80026f6:	4b55      	ldr	r3, [pc, #340]	; (800284c <init_traffic_light+0x3ec>)
 80026f8:	889a      	ldrh	r2, [r3, #4]
 80026fa:	4b55      	ldr	r3, [pc, #340]	; (8002850 <init_traffic_light+0x3f0>)
 80026fc:	80da      	strh	r2, [r3, #6]
	traffic_NS.height = traffic_WE.width;
 80026fe:	4b53      	ldr	r3, [pc, #332]	; (800284c <init_traffic_light+0x3ec>)
 8002700:	88da      	ldrh	r2, [r3, #6]
 8002702:	4b53      	ldr	r3, [pc, #332]	; (8002850 <init_traffic_light+0x3f0>)
 8002704:	809a      	strh	r2, [r3, #4]
	traffic_NS.COLOR_FILL = GRAY;
 8002706:	4b52      	ldr	r3, [pc, #328]	; (8002850 <init_traffic_light+0x3f0>)
 8002708:	f248 4230 	movw	r2, #33840	; 0x8430
 800270c:	811a      	strh	r2, [r3, #8]
	// draw a black box
	lcd_DrawRectangle(traffic_NS.x, traffic_NS.y, traffic_NS.x + traffic_NS.width, traffic_NS.y + traffic_NS.height, traffic_NS.COLOR_FILL);
 800270e:	4b50      	ldr	r3, [pc, #320]	; (8002850 <init_traffic_light+0x3f0>)
 8002710:	8818      	ldrh	r0, [r3, #0]
 8002712:	4b4f      	ldr	r3, [pc, #316]	; (8002850 <init_traffic_light+0x3f0>)
 8002714:	8859      	ldrh	r1, [r3, #2]
 8002716:	4b4e      	ldr	r3, [pc, #312]	; (8002850 <init_traffic_light+0x3f0>)
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <init_traffic_light+0x3f0>)
 800271c:	88db      	ldrh	r3, [r3, #6]
 800271e:	4413      	add	r3, r2
 8002720:	b29c      	uxth	r4, r3
 8002722:	4b4b      	ldr	r3, [pc, #300]	; (8002850 <init_traffic_light+0x3f0>)
 8002724:	885a      	ldrh	r2, [r3, #2]
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <init_traffic_light+0x3f0>)
 8002728:	889b      	ldrh	r3, [r3, #4]
 800272a:	4413      	add	r3, r2
 800272c:	b29a      	uxth	r2, r3
 800272e:	4b48      	ldr	r3, [pc, #288]	; (8002850 <init_traffic_light+0x3f0>)
 8002730:	891b      	ldrh	r3, [r3, #8]
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	4613      	mov	r3, r2
 8002736:	4622      	mov	r2, r4
 8002738:	f7ff f8c7 	bl	80018ca <lcd_DrawRectangle>
	lcd_Fill(traffic_NS.x, traffic_NS.y, traffic_NS.x + traffic_NS.width, traffic_NS.y + traffic_NS.height, traffic_NS.COLOR_FILL);
 800273c:	4b44      	ldr	r3, [pc, #272]	; (8002850 <init_traffic_light+0x3f0>)
 800273e:	8818      	ldrh	r0, [r3, #0]
 8002740:	4b43      	ldr	r3, [pc, #268]	; (8002850 <init_traffic_light+0x3f0>)
 8002742:	8859      	ldrh	r1, [r3, #2]
 8002744:	4b42      	ldr	r3, [pc, #264]	; (8002850 <init_traffic_light+0x3f0>)
 8002746:	881a      	ldrh	r2, [r3, #0]
 8002748:	4b41      	ldr	r3, [pc, #260]	; (8002850 <init_traffic_light+0x3f0>)
 800274a:	88db      	ldrh	r3, [r3, #6]
 800274c:	4413      	add	r3, r2
 800274e:	b29c      	uxth	r4, r3
 8002750:	4b3f      	ldr	r3, [pc, #252]	; (8002850 <init_traffic_light+0x3f0>)
 8002752:	885a      	ldrh	r2, [r3, #2]
 8002754:	4b3e      	ldr	r3, [pc, #248]	; (8002850 <init_traffic_light+0x3f0>)
 8002756:	889b      	ldrh	r3, [r3, #4]
 8002758:	4413      	add	r3, r2
 800275a:	b29a      	uxth	r2, r3
 800275c:	4b3c      	ldr	r3, [pc, #240]	; (8002850 <init_traffic_light+0x3f0>)
 800275e:	891b      	ldrh	r3, [r3, #8]
 8002760:	9300      	str	r3, [sp, #0]
 8002762:	4613      	mov	r3, r2
 8002764:	4622      	mov	r2, r4
 8002766:	f7fe ffdf 	bl	8001728 <lcd_Fill>

	// calculate center and radius of each light inside above black box
	traffic_NS.red.center_y = traffic_NS.y + traffic_NS.height / 6;
 800276a:	4b39      	ldr	r3, [pc, #228]	; (8002850 <init_traffic_light+0x3f0>)
 800276c:	885a      	ldrh	r2, [r3, #2]
 800276e:	4b38      	ldr	r3, [pc, #224]	; (8002850 <init_traffic_light+0x3f0>)
 8002770:	889b      	ldrh	r3, [r3, #4]
 8002772:	4938      	ldr	r1, [pc, #224]	; (8002854 <init_traffic_light+0x3f4>)
 8002774:	fba1 1303 	umull	r1, r3, r1, r3
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	b29b      	uxth	r3, r3
 800277c:	4413      	add	r3, r2
 800277e:	b29a      	uxth	r2, r3
 8002780:	4b33      	ldr	r3, [pc, #204]	; (8002850 <init_traffic_light+0x3f0>)
 8002782:	819a      	strh	r2, [r3, #12]
	traffic_NS.yellow.center_y = traffic_NS.y + 3 * traffic_NS.height / 6;
 8002784:	4b32      	ldr	r3, [pc, #200]	; (8002850 <init_traffic_light+0x3f0>)
 8002786:	885a      	ldrh	r2, [r3, #2]
 8002788:	4b31      	ldr	r3, [pc, #196]	; (8002850 <init_traffic_light+0x3f0>)
 800278a:	889b      	ldrh	r3, [r3, #4]
 800278c:	0fd9      	lsrs	r1, r3, #31
 800278e:	440b      	add	r3, r1
 8002790:	105b      	asrs	r3, r3, #1
 8002792:	b29b      	uxth	r3, r3
 8002794:	4413      	add	r3, r2
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <init_traffic_light+0x3f0>)
 800279a:	82da      	strh	r2, [r3, #22]
	traffic_NS.green.center_y = traffic_NS.y + 5 * traffic_NS.height / 6;
 800279c:	4b2c      	ldr	r3, [pc, #176]	; (8002850 <init_traffic_light+0x3f0>)
 800279e:	885a      	ldrh	r2, [r3, #2]
 80027a0:	4b2b      	ldr	r3, [pc, #172]	; (8002850 <init_traffic_light+0x3f0>)
 80027a2:	889b      	ldrh	r3, [r3, #4]
 80027a4:	4619      	mov	r1, r3
 80027a6:	460b      	mov	r3, r1
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	492a      	ldr	r1, [pc, #168]	; (8002858 <init_traffic_light+0x3f8>)
 80027ae:	fb81 0103 	smull	r0, r1, r1, r3
 80027b2:	17db      	asrs	r3, r3, #31
 80027b4:	1acb      	subs	r3, r1, r3
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	4413      	add	r3, r2
 80027ba:	b29a      	uxth	r2, r3
 80027bc:	4b24      	ldr	r3, [pc, #144]	; (8002850 <init_traffic_light+0x3f0>)
 80027be:	841a      	strh	r2, [r3, #32]

	traffic_NS.red.center_x = traffic_NS.x + traffic_NS.width / 2;
 80027c0:	4b23      	ldr	r3, [pc, #140]	; (8002850 <init_traffic_light+0x3f0>)
 80027c2:	881a      	ldrh	r2, [r3, #0]
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <init_traffic_light+0x3f0>)
 80027c6:	88db      	ldrh	r3, [r3, #6]
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b1f      	ldr	r3, [pc, #124]	; (8002850 <init_traffic_light+0x3f0>)
 80027d2:	815a      	strh	r2, [r3, #10]
	traffic_NS.yellow.center_x = traffic_NS.red.center_x;
 80027d4:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <init_traffic_light+0x3f0>)
 80027d6:	895a      	ldrh	r2, [r3, #10]
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <init_traffic_light+0x3f0>)
 80027da:	829a      	strh	r2, [r3, #20]
	traffic_NS.green.center_x = traffic_NS.red.center_x;
 80027dc:	4b1c      	ldr	r3, [pc, #112]	; (8002850 <init_traffic_light+0x3f0>)
 80027de:	895a      	ldrh	r2, [r3, #10]
 80027e0:	4b1b      	ldr	r3, [pc, #108]	; (8002850 <init_traffic_light+0x3f0>)
 80027e2:	83da      	strh	r2, [r3, #30]

	traffic_NS.red.radius = (traffic_NS.width / 2) * 90 / 100;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	; (8002850 <init_traffic_light+0x3f0>)
 80027e6:	88db      	ldrh	r3, [r3, #6]
 80027e8:	085b      	lsrs	r3, r3, #1
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	235a      	movs	r3, #90	; 0x5a
 80027f0:	fb03 f302 	mul.w	r3, r3, r2
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <init_traffic_light+0x3fc>)
 80027f6:	fb82 1203 	smull	r1, r2, r2, r3
 80027fa:	1152      	asrs	r2, r2, #5
 80027fc:	17db      	asrs	r3, r3, #31
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	b29a      	uxth	r2, r3
 8002802:	4b13      	ldr	r3, [pc, #76]	; (8002850 <init_traffic_light+0x3f0>)
 8002804:	821a      	strh	r2, [r3, #16]
	traffic_NS.yellow.radius = traffic_NS.red.radius;
 8002806:	4b12      	ldr	r3, [pc, #72]	; (8002850 <init_traffic_light+0x3f0>)
 8002808:	8a1a      	ldrh	r2, [r3, #16]
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <init_traffic_light+0x3f0>)
 800280c:	835a      	strh	r2, [r3, #26]
	traffic_NS.green.radius = traffic_NS.red.radius;
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <init_traffic_light+0x3f0>)
 8002810:	8a1a      	ldrh	r2, [r3, #16]
 8002812:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <init_traffic_light+0x3f0>)
 8002814:	849a      	strh	r2, [r3, #36]	; 0x24

	traffic_NS.red.is_fill = 1;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <init_traffic_light+0x3f0>)
 8002818:	2201      	movs	r2, #1
 800281a:	749a      	strb	r2, [r3, #18]
	if (traffic_NS.red.is_fill == 1)
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <init_traffic_light+0x3f0>)
 800281e:	7c9b      	ldrb	r3, [r3, #18]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d104      	bne.n	800282e <init_traffic_light+0x3ce>
	{
		traffic_NS.red.COLOR_FILL = RED;
 8002824:	4b0a      	ldr	r3, [pc, #40]	; (8002850 <init_traffic_light+0x3f0>)
 8002826:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 800282a:	81da      	strh	r2, [r3, #14]
 800282c:	e002      	b.n	8002834 <init_traffic_light+0x3d4>
	}
	else
	{
		traffic_NS.red.COLOR_FILL = BLACK;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <init_traffic_light+0x3f0>)
 8002830:	2200      	movs	r2, #0
 8002832:	81da      	strh	r2, [r3, #14]
	}
	traffic_NS.yellow.is_fill = 1;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <init_traffic_light+0x3f0>)
 8002836:	2201      	movs	r2, #1
 8002838:	771a      	strb	r2, [r3, #28]
	if (traffic_NS.yellow.is_fill == 1)
 800283a:	4b05      	ldr	r3, [pc, #20]	; (8002850 <init_traffic_light+0x3f0>)
 800283c:	7f1b      	ldrb	r3, [r3, #28]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10e      	bne.n	8002860 <init_traffic_light+0x400>
	{
		traffic_NS.yellow.COLOR_FILL = YELLOW;
 8002842:	4b03      	ldr	r3, [pc, #12]	; (8002850 <init_traffic_light+0x3f0>)
 8002844:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002848:	831a      	strh	r2, [r3, #24]
 800284a:	e00c      	b.n	8002866 <init_traffic_light+0x406>
 800284c:	20000188 	.word	0x20000188
 8002850:	20000108 	.word	0x20000108
 8002854:	aaaaaaab 	.word	0xaaaaaaab
 8002858:	2aaaaaab 	.word	0x2aaaaaab
 800285c:	51eb851f 	.word	0x51eb851f
	}
	else
	{
		traffic_NS.yellow.COLOR_FILL = BLACK;
 8002860:	4b41      	ldr	r3, [pc, #260]	; (8002968 <init_traffic_light+0x508>)
 8002862:	2200      	movs	r2, #0
 8002864:	831a      	strh	r2, [r3, #24]
	}
	traffic_NS.green.is_fill = 1;
 8002866:	4b40      	ldr	r3, [pc, #256]	; (8002968 <init_traffic_light+0x508>)
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	if (traffic_NS.green.is_fill == 1)
 800286e:	4b3e      	ldr	r3, [pc, #248]	; (8002968 <init_traffic_light+0x508>)
 8002870:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002874:	2b01      	cmp	r3, #1
 8002876:	d104      	bne.n	8002882 <init_traffic_light+0x422>
	{
		traffic_NS.green.COLOR_FILL = GREEN;
 8002878:	4b3b      	ldr	r3, [pc, #236]	; (8002968 <init_traffic_light+0x508>)
 800287a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800287e:	845a      	strh	r2, [r3, #34]	; 0x22
 8002880:	e002      	b.n	8002888 <init_traffic_light+0x428>
	}
	else
	{
		traffic_NS.green.COLOR_FILL = BLACK;
 8002882:	4b39      	ldr	r3, [pc, #228]	; (8002968 <init_traffic_light+0x508>)
 8002884:	2200      	movs	r2, #0
 8002886:	845a      	strh	r2, [r3, #34]	; 0x22
	}
	// draw red
	lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y, traffic_NS.red.COLOR_FILL, traffic_NS.red.radius, traffic_NS.red.is_fill);
 8002888:	4b37      	ldr	r3, [pc, #220]	; (8002968 <init_traffic_light+0x508>)
 800288a:	895b      	ldrh	r3, [r3, #10]
 800288c:	4618      	mov	r0, r3
 800288e:	4b36      	ldr	r3, [pc, #216]	; (8002968 <init_traffic_light+0x508>)
 8002890:	899b      	ldrh	r3, [r3, #12]
 8002892:	4619      	mov	r1, r3
 8002894:	4b34      	ldr	r3, [pc, #208]	; (8002968 <init_traffic_light+0x508>)
 8002896:	89da      	ldrh	r2, [r3, #14]
 8002898:	4b33      	ldr	r3, [pc, #204]	; (8002968 <init_traffic_light+0x508>)
 800289a:	8a1b      	ldrh	r3, [r3, #16]
 800289c:	461c      	mov	r4, r3
 800289e:	4b32      	ldr	r3, [pc, #200]	; (8002968 <init_traffic_light+0x508>)
 80028a0:	7c9b      	ldrb	r3, [r3, #18]
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	4623      	mov	r3, r4
 80028a6:	f7ff fc16 	bl	80020d6 <lcd_DrawCircle>
	// draw yellow
	lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y, traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, traffic_NS.yellow.is_fill);
 80028aa:	4b2f      	ldr	r3, [pc, #188]	; (8002968 <init_traffic_light+0x508>)
 80028ac:	8a9b      	ldrh	r3, [r3, #20]
 80028ae:	4618      	mov	r0, r3
 80028b0:	4b2d      	ldr	r3, [pc, #180]	; (8002968 <init_traffic_light+0x508>)
 80028b2:	8adb      	ldrh	r3, [r3, #22]
 80028b4:	4619      	mov	r1, r3
 80028b6:	4b2c      	ldr	r3, [pc, #176]	; (8002968 <init_traffic_light+0x508>)
 80028b8:	8b1a      	ldrh	r2, [r3, #24]
 80028ba:	4b2b      	ldr	r3, [pc, #172]	; (8002968 <init_traffic_light+0x508>)
 80028bc:	8b5b      	ldrh	r3, [r3, #26]
 80028be:	461c      	mov	r4, r3
 80028c0:	4b29      	ldr	r3, [pc, #164]	; (8002968 <init_traffic_light+0x508>)
 80028c2:	7f1b      	ldrb	r3, [r3, #28]
 80028c4:	9300      	str	r3, [sp, #0]
 80028c6:	4623      	mov	r3, r4
 80028c8:	f7ff fc05 	bl	80020d6 <lcd_DrawCircle>
	// draw green
	lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y, traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, traffic_NS.green.is_fill);
 80028cc:	4b26      	ldr	r3, [pc, #152]	; (8002968 <init_traffic_light+0x508>)
 80028ce:	8bdb      	ldrh	r3, [r3, #30]
 80028d0:	4618      	mov	r0, r3
 80028d2:	4b25      	ldr	r3, [pc, #148]	; (8002968 <init_traffic_light+0x508>)
 80028d4:	8c1b      	ldrh	r3, [r3, #32]
 80028d6:	4619      	mov	r1, r3
 80028d8:	4b23      	ldr	r3, [pc, #140]	; (8002968 <init_traffic_light+0x508>)
 80028da:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 80028dc:	4b22      	ldr	r3, [pc, #136]	; (8002968 <init_traffic_light+0x508>)
 80028de:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80028e0:	461c      	mov	r4, r3
 80028e2:	4b21      	ldr	r3, [pc, #132]	; (8002968 <init_traffic_light+0x508>)
 80028e4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	4623      	mov	r3, r4
 80028ec:	f7ff fbf3 	bl	80020d6 <lcd_DrawCircle>

	// init num
	traffic_NS.num.len = 2;
 80028f0:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <init_traffic_light+0x508>)
 80028f2:	2202      	movs	r2, #2
 80028f4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	traffic_NS.num.fc = WHITE;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <init_traffic_light+0x508>)
 80028fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fe:	861a      	strh	r2, [r3, #48]	; 0x30
	traffic_NS.num.bc = BLACK;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <init_traffic_light+0x508>)
 8002902:	2200      	movs	r2, #0
 8002904:	865a      	strh	r2, [r3, #50]	; 0x32
	traffic_NS.num.sizey = 32;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <init_traffic_light+0x508>)
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	traffic_NS.num.x = traffic_NS.x;
 800290e:	4b16      	ldr	r3, [pc, #88]	; (8002968 <init_traffic_light+0x508>)
 8002910:	881a      	ldrh	r2, [r3, #0]
 8002912:	4b15      	ldr	r3, [pc, #84]	; (8002968 <init_traffic_light+0x508>)
 8002914:	851a      	strh	r2, [r3, #40]	; 0x28
	traffic_NS.num.y = traffic_NS.y - traffic_NS.num.sizey;
 8002916:	4b14      	ldr	r3, [pc, #80]	; (8002968 <init_traffic_light+0x508>)
 8002918:	885a      	ldrh	r2, [r3, #2]
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <init_traffic_light+0x508>)
 800291c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002920:	b29b      	uxth	r3, r3
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	b29a      	uxth	r2, r3
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <init_traffic_light+0x508>)
 8002928:	855a      	strh	r2, [r3, #42]	; 0x2a
	traffic_NS.num.num = 99;
 800292a:	4b0f      	ldr	r3, [pc, #60]	; (8002968 <init_traffic_light+0x508>)
 800292c:	2263      	movs	r2, #99	; 0x63
 800292e:	859a      	strh	r2, [r3, #44]	; 0x2c
	lcd_ShowIntNum(traffic_NS.num.x, traffic_NS.num.y, traffic_NS.num.num, traffic_NS.num.len, traffic_NS.num.fc, traffic_NS.num.bc, traffic_NS.num.sizey);
 8002930:	4b0d      	ldr	r3, [pc, #52]	; (8002968 <init_traffic_light+0x508>)
 8002932:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <init_traffic_light+0x508>)
 8002936:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002938:	4b0b      	ldr	r3, [pc, #44]	; (8002968 <init_traffic_light+0x508>)
 800293a:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800293c:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <init_traffic_light+0x508>)
 800293e:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002942:	4b09      	ldr	r3, [pc, #36]	; (8002968 <init_traffic_light+0x508>)
 8002944:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002946:	4a08      	ldr	r2, [pc, #32]	; (8002968 <init_traffic_light+0x508>)
 8002948:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800294a:	4907      	ldr	r1, [pc, #28]	; (8002968 <init_traffic_light+0x508>)
 800294c:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002950:	9102      	str	r1, [sp, #8]
 8002952:	9201      	str	r2, [sp, #4]
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	4633      	mov	r3, r6
 8002958:	462a      	mov	r2, r5
 800295a:	4621      	mov	r1, r4
 800295c:	f7ff f8d8 	bl	8001b10 <lcd_ShowIntNum>
	/*End init NS-------------------------------------------------------------*/
}
 8002960:	bf00      	nop
 8002962:	3704      	adds	r7, #4
 8002964:	46bd      	mov	sp, r7
 8002966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002968:	20000108 	.word	0x20000108

0800296c <control_traffic_light>:
 * @brief: 	display traffic light function
 * @para:	i - id of traffic light(0: WE, 1: NS)
 * 			red, yellow, green - state of red, yellow and green led (1: on, 0: off)
 * @retval:	none*/
void control_traffic_light(uint8_t i, uint8_t red, uint8_t yellow, uint8_t green)
{
 800296c:	b590      	push	{r4, r7, lr}
 800296e:	b085      	sub	sp, #20
 8002970:	af02      	add	r7, sp, #8
 8002972:	4604      	mov	r4, r0
 8002974:	4608      	mov	r0, r1
 8002976:	4611      	mov	r1, r2
 8002978:	461a      	mov	r2, r3
 800297a:	4623      	mov	r3, r4
 800297c:	71fb      	strb	r3, [r7, #7]
 800297e:	4603      	mov	r3, r0
 8002980:	71bb      	strb	r3, [r7, #6]
 8002982:	460b      	mov	r3, r1
 8002984:	717b      	strb	r3, [r7, #5]
 8002986:	4613      	mov	r3, r2
 8002988:	713b      	strb	r3, [r7, #4]
	if (i == 0)
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d154      	bne.n	8002a3a <control_traffic_light+0xce>
	{
		// draw red
		if (!red)
 8002990:	79bb      	ldrb	r3, [r7, #6]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <control_traffic_light+0x34>
		{
			traffic_WE.red.COLOR_FILL = GRAY;
 8002996:	4b55      	ldr	r3, [pc, #340]	; (8002aec <control_traffic_light+0x180>)
 8002998:	f248 4230 	movw	r2, #33840	; 0x8430
 800299c:	81da      	strh	r2, [r3, #14]
 800299e:	e003      	b.n	80029a8 <control_traffic_light+0x3c>
		}
		else
		{
			traffic_WE.red.COLOR_FILL = RED;
 80029a0:	4b52      	ldr	r3, [pc, #328]	; (8002aec <control_traffic_light+0x180>)
 80029a2:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 80029a6:	81da      	strh	r2, [r3, #14]
		}
		if (!yellow)
 80029a8:	797b      	ldrb	r3, [r7, #5]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d104      	bne.n	80029b8 <control_traffic_light+0x4c>
		{
			traffic_WE.yellow.COLOR_FILL = GRAY;
 80029ae:	4b4f      	ldr	r3, [pc, #316]	; (8002aec <control_traffic_light+0x180>)
 80029b0:	f248 4230 	movw	r2, #33840	; 0x8430
 80029b4:	831a      	strh	r2, [r3, #24]
 80029b6:	e003      	b.n	80029c0 <control_traffic_light+0x54>
		}
		else
		{
			traffic_WE.yellow.COLOR_FILL = YELLOW;
 80029b8:	4b4c      	ldr	r3, [pc, #304]	; (8002aec <control_traffic_light+0x180>)
 80029ba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80029be:	831a      	strh	r2, [r3, #24]
		}
		if (!green)
 80029c0:	793b      	ldrb	r3, [r7, #4]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d104      	bne.n	80029d0 <control_traffic_light+0x64>
		{
			traffic_WE.green.COLOR_FILL = GRAY;
 80029c6:	4b49      	ldr	r3, [pc, #292]	; (8002aec <control_traffic_light+0x180>)
 80029c8:	f248 4230 	movw	r2, #33840	; 0x8430
 80029cc:	845a      	strh	r2, [r3, #34]	; 0x22
 80029ce:	e003      	b.n	80029d8 <control_traffic_light+0x6c>
		}
		else
		{
			traffic_WE.green.COLOR_FILL = GREEN;
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <control_traffic_light+0x180>)
 80029d2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80029d6:	845a      	strh	r2, [r3, #34]	; 0x22
		}
		lcd_DrawCircle(traffic_WE.red.center_x, traffic_WE.red.center_y, traffic_WE.red.COLOR_FILL, traffic_WE.red.radius, 1);
 80029d8:	4b44      	ldr	r3, [pc, #272]	; (8002aec <control_traffic_light+0x180>)
 80029da:	895b      	ldrh	r3, [r3, #10]
 80029dc:	4618      	mov	r0, r3
 80029de:	4b43      	ldr	r3, [pc, #268]	; (8002aec <control_traffic_light+0x180>)
 80029e0:	899b      	ldrh	r3, [r3, #12]
 80029e2:	4619      	mov	r1, r3
 80029e4:	4b41      	ldr	r3, [pc, #260]	; (8002aec <control_traffic_light+0x180>)
 80029e6:	89da      	ldrh	r2, [r3, #14]
 80029e8:	4b40      	ldr	r3, [pc, #256]	; (8002aec <control_traffic_light+0x180>)
 80029ea:	8a1b      	ldrh	r3, [r3, #16]
 80029ec:	461c      	mov	r4, r3
 80029ee:	2301      	movs	r3, #1
 80029f0:	9300      	str	r3, [sp, #0]
 80029f2:	4623      	mov	r3, r4
 80029f4:	f7ff fb6f 	bl	80020d6 <lcd_DrawCircle>
		// draw yellow
		lcd_DrawCircle(traffic_WE.yellow.center_x, traffic_WE.yellow.center_y, traffic_WE.yellow.COLOR_FILL, traffic_WE.yellow.radius, 1);
 80029f8:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <control_traffic_light+0x180>)
 80029fa:	8a9b      	ldrh	r3, [r3, #20]
 80029fc:	4618      	mov	r0, r3
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <control_traffic_light+0x180>)
 8002a00:	8adb      	ldrh	r3, [r3, #22]
 8002a02:	4619      	mov	r1, r3
 8002a04:	4b39      	ldr	r3, [pc, #228]	; (8002aec <control_traffic_light+0x180>)
 8002a06:	8b1a      	ldrh	r2, [r3, #24]
 8002a08:	4b38      	ldr	r3, [pc, #224]	; (8002aec <control_traffic_light+0x180>)
 8002a0a:	8b5b      	ldrh	r3, [r3, #26]
 8002a0c:	461c      	mov	r4, r3
 8002a0e:	2301      	movs	r3, #1
 8002a10:	9300      	str	r3, [sp, #0]
 8002a12:	4623      	mov	r3, r4
 8002a14:	f7ff fb5f 	bl	80020d6 <lcd_DrawCircle>
		// draw green
		lcd_DrawCircle(traffic_WE.green.center_x, traffic_WE.green.center_y, traffic_WE.green.COLOR_FILL, traffic_WE.green.radius, 1);
 8002a18:	4b34      	ldr	r3, [pc, #208]	; (8002aec <control_traffic_light+0x180>)
 8002a1a:	8bdb      	ldrh	r3, [r3, #30]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	4b33      	ldr	r3, [pc, #204]	; (8002aec <control_traffic_light+0x180>)
 8002a20:	8c1b      	ldrh	r3, [r3, #32]
 8002a22:	4619      	mov	r1, r3
 8002a24:	4b31      	ldr	r3, [pc, #196]	; (8002aec <control_traffic_light+0x180>)
 8002a26:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <control_traffic_light+0x180>)
 8002a2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a2c:	461c      	mov	r4, r3
 8002a2e:	2301      	movs	r3, #1
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4623      	mov	r3, r4
 8002a34:	f7ff fb4f 	bl	80020d6 <lcd_DrawCircle>
		// draw yellow
		lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y, traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, 1);
		// draw green
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y, traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, 1);
	}
}
 8002a38:	e053      	b.n	8002ae2 <control_traffic_light+0x176>
		if (!red)
 8002a3a:	79bb      	ldrb	r3, [r7, #6]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d104      	bne.n	8002a4a <control_traffic_light+0xde>
			traffic_NS.red.COLOR_FILL = GRAY;
 8002a40:	4b2b      	ldr	r3, [pc, #172]	; (8002af0 <control_traffic_light+0x184>)
 8002a42:	f248 4230 	movw	r2, #33840	; 0x8430
 8002a46:	81da      	strh	r2, [r3, #14]
 8002a48:	e003      	b.n	8002a52 <control_traffic_light+0xe6>
			traffic_NS.red.COLOR_FILL = RED;
 8002a4a:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <control_traffic_light+0x184>)
 8002a4c:	f44f 4278 	mov.w	r2, #63488	; 0xf800
 8002a50:	81da      	strh	r2, [r3, #14]
		if (!yellow)
 8002a52:	797b      	ldrb	r3, [r7, #5]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d104      	bne.n	8002a62 <control_traffic_light+0xf6>
			traffic_NS.yellow.COLOR_FILL = GRAY;
 8002a58:	4b25      	ldr	r3, [pc, #148]	; (8002af0 <control_traffic_light+0x184>)
 8002a5a:	f248 4230 	movw	r2, #33840	; 0x8430
 8002a5e:	831a      	strh	r2, [r3, #24]
 8002a60:	e003      	b.n	8002a6a <control_traffic_light+0xfe>
			traffic_NS.yellow.COLOR_FILL = YELLOW;
 8002a62:	4b23      	ldr	r3, [pc, #140]	; (8002af0 <control_traffic_light+0x184>)
 8002a64:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002a68:	831a      	strh	r2, [r3, #24]
		if (!green)
 8002a6a:	793b      	ldrb	r3, [r7, #4]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d104      	bne.n	8002a7a <control_traffic_light+0x10e>
			traffic_NS.green.COLOR_FILL = GRAY;
 8002a70:	4b1f      	ldr	r3, [pc, #124]	; (8002af0 <control_traffic_light+0x184>)
 8002a72:	f248 4230 	movw	r2, #33840	; 0x8430
 8002a76:	845a      	strh	r2, [r3, #34]	; 0x22
 8002a78:	e003      	b.n	8002a82 <control_traffic_light+0x116>
			traffic_NS.green.COLOR_FILL = GREEN;
 8002a7a:	4b1d      	ldr	r3, [pc, #116]	; (8002af0 <control_traffic_light+0x184>)
 8002a7c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a80:	845a      	strh	r2, [r3, #34]	; 0x22
		lcd_DrawCircle(traffic_NS.red.center_x, traffic_NS.red.center_y, traffic_NS.red.COLOR_FILL, traffic_NS.red.radius, 1);
 8002a82:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <control_traffic_light+0x184>)
 8002a84:	895b      	ldrh	r3, [r3, #10]
 8002a86:	4618      	mov	r0, r3
 8002a88:	4b19      	ldr	r3, [pc, #100]	; (8002af0 <control_traffic_light+0x184>)
 8002a8a:	899b      	ldrh	r3, [r3, #12]
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	4b18      	ldr	r3, [pc, #96]	; (8002af0 <control_traffic_light+0x184>)
 8002a90:	89da      	ldrh	r2, [r3, #14]
 8002a92:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <control_traffic_light+0x184>)
 8002a94:	8a1b      	ldrh	r3, [r3, #16]
 8002a96:	461c      	mov	r4, r3
 8002a98:	2301      	movs	r3, #1
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	4623      	mov	r3, r4
 8002a9e:	f7ff fb1a 	bl	80020d6 <lcd_DrawCircle>
		lcd_DrawCircle(traffic_NS.yellow.center_x, traffic_NS.yellow.center_y, traffic_NS.yellow.COLOR_FILL, traffic_NS.yellow.radius, 1);
 8002aa2:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <control_traffic_light+0x184>)
 8002aa4:	8a9b      	ldrh	r3, [r3, #20]
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4b11      	ldr	r3, [pc, #68]	; (8002af0 <control_traffic_light+0x184>)
 8002aaa:	8adb      	ldrh	r3, [r3, #22]
 8002aac:	4619      	mov	r1, r3
 8002aae:	4b10      	ldr	r3, [pc, #64]	; (8002af0 <control_traffic_light+0x184>)
 8002ab0:	8b1a      	ldrh	r2, [r3, #24]
 8002ab2:	4b0f      	ldr	r3, [pc, #60]	; (8002af0 <control_traffic_light+0x184>)
 8002ab4:	8b5b      	ldrh	r3, [r3, #26]
 8002ab6:	461c      	mov	r4, r3
 8002ab8:	2301      	movs	r3, #1
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4623      	mov	r3, r4
 8002abe:	f7ff fb0a 	bl	80020d6 <lcd_DrawCircle>
		lcd_DrawCircle(traffic_NS.green.center_x, traffic_NS.green.center_y, traffic_NS.green.COLOR_FILL, traffic_NS.green.radius, 1);
 8002ac2:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <control_traffic_light+0x184>)
 8002ac4:	8bdb      	ldrh	r3, [r3, #30]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <control_traffic_light+0x184>)
 8002aca:	8c1b      	ldrh	r3, [r3, #32]
 8002acc:	4619      	mov	r1, r3
 8002ace:	4b08      	ldr	r3, [pc, #32]	; (8002af0 <control_traffic_light+0x184>)
 8002ad0:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <control_traffic_light+0x184>)
 8002ad4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002ad6:	461c      	mov	r4, r3
 8002ad8:	2301      	movs	r3, #1
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	4623      	mov	r3, r4
 8002ade:	f7ff fafa 	bl	80020d6 <lcd_DrawCircle>
}
 8002ae2:	bf00      	nop
 8002ae4:	370c      	adds	r7, #12
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd90      	pop	{r4, r7, pc}
 8002aea:	bf00      	nop
 8002aec:	20000188 	.word	0x20000188
 8002af0:	20000108 	.word	0x20000108

08002af4 <LCD_DisplayNum>:
/*
 * @brief: 	display number function
 * @para:	noe
 * @retval:	none*/
void LCD_DisplayNum()
{
 8002af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af04      	add	r7, sp, #16
	lcd_ShowStr(60, 280, "MODE:", WHITE, GRAY, 32, 0);
 8002afa:	2300      	movs	r3, #0
 8002afc:	9302      	str	r3, [sp, #8]
 8002afe:	2320      	movs	r3, #32
 8002b00:	9301      	str	r3, [sp, #4]
 8002b02:	f248 4330 	movw	r3, #33840	; 0x8430
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b0c:	4a1c      	ldr	r2, [pc, #112]	; (8002b80 <LCD_DisplayNum+0x8c>)
 8002b0e:	f44f 718c 	mov.w	r1, #280	; 0x118
 8002b12:	203c      	movs	r0, #60	; 0x3c
 8002b14:	f7ff fb4c 	bl	80021b0 <lcd_ShowStr>
	lcd_ShowIntNum(traffic_WE.num.x, traffic_WE.num.y, traffic_WE.num.num, traffic_WE.num.len, traffic_WE.num.fc, traffic_WE.num.bc, traffic_WE.num.sizey);
 8002b18:	4b1a      	ldr	r3, [pc, #104]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b1a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b1e:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b22:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b26:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b2c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b2e:	4a15      	ldr	r2, [pc, #84]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b30:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002b32:	4914      	ldr	r1, [pc, #80]	; (8002b84 <LCD_DisplayNum+0x90>)
 8002b34:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002b38:	9102      	str	r1, [sp, #8]
 8002b3a:	9201      	str	r2, [sp, #4]
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	4633      	mov	r3, r6
 8002b40:	462a      	mov	r2, r5
 8002b42:	4621      	mov	r1, r4
 8002b44:	f7fe ffe4 	bl	8001b10 <lcd_ShowIntNum>
	lcd_ShowIntNum(traffic_NS.num.x, traffic_NS.num.y, traffic_NS.num.num, traffic_NS.num.len, traffic_NS.num.fc, traffic_NS.num.bc, traffic_NS.num.sizey);
 8002b48:	4b0f      	ldr	r3, [pc, #60]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b4a:	8d18      	ldrh	r0, [r3, #40]	; 0x28
 8002b4c:	4b0e      	ldr	r3, [pc, #56]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b4e:	8d5c      	ldrh	r4, [r3, #42]	; 0x2a
 8002b50:	4b0d      	ldr	r3, [pc, #52]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b52:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 8002b54:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b56:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8002b5a:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b5c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002b5e:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b60:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8002b62:	4909      	ldr	r1, [pc, #36]	; (8002b88 <LCD_DisplayNum+0x94>)
 8002b64:	f891 1034 	ldrb.w	r1, [r1, #52]	; 0x34
 8002b68:	9102      	str	r1, [sp, #8]
 8002b6a:	9201      	str	r2, [sp, #4]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	4633      	mov	r3, r6
 8002b70:	462a      	mov	r2, r5
 8002b72:	4621      	mov	r1, r4
 8002b74:	f7fe ffcc 	bl	8001b10 <lcd_ShowIntNum>
}
 8002b78:	bf00      	nop
 8002b7a:	3704      	adds	r7, #4
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b80:	08005588 	.word	0x08005588
 8002b84:	20000188 	.word	0x20000188
 8002b88:	20000108 	.word	0x20000108

08002b8c <init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  HAL_TIM_Base_Start_IT(&htim2);
 8002b90:	480b      	ldr	r0, [pc, #44]	; (8002bc0 <init+0x34>)
 8002b92:	f001 ffb3 	bl	8004afc <HAL_TIM_Base_Start_IT>
  set_timer(2, READ_BUTTON_TIME);
 8002b96:	210a      	movs	r1, #10
 8002b98:	2002      	movs	r0, #2
 8002b9a:	f000 f8f5 	bl	8002d88 <set_timer>
  set_timer(1, ONE_SECOND);
 8002b9e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f000 f8f0 	bl	8002d88 <set_timer>
  button_init();
 8002ba8:	f7fe f878 	bl	8000c9c <button_init>
  lcd_init();
 8002bac:	f7ff f8a8 	bl	8001d00 <lcd_init>
  lcd_Clear(WHITE);
 8002bb0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002bb4:	f7fe fd86 	bl	80016c4 <lcd_Clear>
  init_traffic_light();
 8002bb8:	f7ff fc52 	bl	8002460 <init_traffic_light>
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000240 	.word	0x20000240

08002bc4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002bca:	f000 fad3 	bl	8003174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002bce:	f000 f861 	bl	8002c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002bd2:	f7fe fc01 	bl	80013d8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002bd6:	f000 f945 	bl	8002e64 <MX_SPI1_Init>
  MX_TIM2_Init();
 8002bda:	f000 fa2f 	bl	800303c <MX_TIM2_Init>
  MX_FSMC_Init();
 8002bde:	f7fe fb2b 	bl	8001238 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  init();
 8002be2:	f7ff ffd3 	bl	8002b8c <init>
  box_rec(0, 0, 0, 240, 50, BLACK, BLACK, 0);
 8002be6:	2300      	movs	r3, #0
 8002be8:	9303      	str	r3, [sp, #12]
 8002bea:	2300      	movs	r3, #0
 8002bec:	9302      	str	r3, [sp, #8]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	9301      	str	r3, [sp, #4]
 8002bf2:	2332      	movs	r3, #50	; 0x32
 8002bf4:	9300      	str	r3, [sp, #0]
 8002bf6:	23f0      	movs	r3, #240	; 0xf0
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7ff fb3b 	bl	8002278 <box_rec>
  box_rec(1, 0, 50, 240, 220, BLACK, RED, 0);
 8002c02:	2300      	movs	r3, #0
 8002c04:	9303      	str	r3, [sp, #12]
 8002c06:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002c0a:	9302      	str	r3, [sp, #8]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	23dc      	movs	r3, #220	; 0xdc
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	23f0      	movs	r3, #240	; 0xf0
 8002c16:	2232      	movs	r2, #50	; 0x32
 8002c18:	2100      	movs	r1, #0
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f7ff fb2c 	bl	8002278 <box_rec>
  box_rec(2, 0, 270, 240, 50, BLACK, BLUE, 0);
 8002c20:	2300      	movs	r3, #0
 8002c22:	9303      	str	r3, [sp, #12]
 8002c24:	231f      	movs	r3, #31
 8002c26:	9302      	str	r3, [sp, #8]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	2332      	movs	r3, #50	; 0x32
 8002c2e:	9300      	str	r3, [sp, #0]
 8002c30:	23f0      	movs	r3, #240	; 0xf0
 8002c32:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8002c36:	2100      	movs	r1, #0
 8002c38:	2002      	movs	r0, #2
 8002c3a:	f7ff fb1d 	bl	8002278 <box_rec>
  lcd_ShowPicture(10, 0, 50, 50, gImage_logo_hcmut);
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <main+0xc8>)
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	2332      	movs	r3, #50	; 0x32
 8002c44:	2232      	movs	r2, #50	; 0x32
 8002c46:	2100      	movs	r1, #0
 8002c48:	200a      	movs	r0, #10
 8002c4a:	f7fe ffdf 	bl	8001c0c <lcd_ShowPicture>
  lcd_ShowStr(60, 20, "Lab3_TRAFFIC", BLACK, WHITE, 24, 1);
 8002c4e:	2301      	movs	r3, #1
 8002c50:	9302      	str	r3, [sp, #8]
 8002c52:	2318      	movs	r3, #24
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c5a:	9300      	str	r3, [sp, #0]
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	4a0c      	ldr	r2, [pc, #48]	; (8002c90 <main+0xcc>)
 8002c60:	2114      	movs	r1, #20
 8002c62:	203c      	movs	r0, #60	; 0x3c
 8002c64:	f7ff faa4 	bl	80021b0 <lcd_ShowStr>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    // read button every READ_BUTTON_TIME
    if (!is_timer_on(2))
 8002c68:	2002      	movs	r0, #2
 8002c6a:	f000 f8eb 	bl	8002e44 <is_timer_on>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	f083 0301 	eor.w	r3, r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <main+0xc2>
    {
      set_timer(2, READ_BUTTON_TIME);
 8002c7a:	210a      	movs	r1, #10
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f000 f883 	bl	8002d88 <set_timer>
      button_Scan();
 8002c82:	f7fe f817 	bl	8000cb4 <button_Scan>
    }

    traffic_run();
 8002c86:	f7fe f9d5 	bl	8001034 <traffic_run>
    if (!is_timer_on(2))
 8002c8a:	e7ed      	b.n	8002c68 <main+0xa4>
 8002c8c:	08008520 	.word	0x08008520
 8002c90:	08005590 	.word	0x08005590

08002c94 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b094      	sub	sp, #80	; 0x50
 8002c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c9a:	f107 0320 	add.w	r3, r7, #32
 8002c9e:	2230      	movs	r2, #48	; 0x30
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fc4c 	bl	8005540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ca8:	f107 030c 	add.w	r3, r7, #12
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60bb      	str	r3, [r7, #8]
 8002cbc:	4b28      	ldr	r3, [pc, #160]	; (8002d60 <SystemClock_Config+0xcc>)
 8002cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc0:	4a27      	ldr	r2, [pc, #156]	; (8002d60 <SystemClock_Config+0xcc>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6413      	str	r3, [r2, #64]	; 0x40
 8002cc8:	4b25      	ldr	r3, [pc, #148]	; (8002d60 <SystemClock_Config+0xcc>)
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	607b      	str	r3, [r7, #4]
 8002cd8:	4b22      	ldr	r3, [pc, #136]	; (8002d64 <SystemClock_Config+0xd0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a21      	ldr	r2, [pc, #132]	; (8002d64 <SystemClock_Config+0xd0>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	4b1f      	ldr	r3, [pc, #124]	; (8002d64 <SystemClock_Config+0xd0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	607b      	str	r3, [r7, #4]
 8002cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002cf0:	2302      	movs	r3, #2
 8002cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002d00:	2300      	movs	r3, #0
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002d04:	2308      	movs	r3, #8
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d08:	23a8      	movs	r3, #168	; 0xa8
 8002d0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002d10:	2304      	movs	r3, #4
 8002d12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d14:	f107 0320 	add.w	r3, r7, #32
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fd89 	bl	8003830 <HAL_RCC_OscConfig>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d24:	f000 f820 	bl	8002d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d28:	230f      	movs	r3, #15
 8002d2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d34:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8002d3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002d3e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002d40:	f107 030c 	add.w	r3, r7, #12
 8002d44:	2105      	movs	r1, #5
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 ffea 	bl	8003d20 <HAL_RCC_ClockConfig>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002d52:	f000 f809 	bl	8002d68 <Error_Handler>
  }
}
 8002d56:	bf00      	nop
 8002d58:	3750      	adds	r7, #80	; 0x50
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	40007000 	.word	0x40007000

08002d68 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d6c:	b672      	cpsid	i
}
 8002d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <Error_Handler+0x8>

08002d72 <HAL_TIM_PeriodElapsedCallback>:
 * timer[3]: to toggle led
 * timer[4]: to increase value by 1 over time
 * */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
	run_timer();
 8002d7a:	f000 f831 	bl	8002de0 <run_timer>
}
 8002d7e:	bf00      	nop
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <set_timer>:
 * @para:	i: id of timer
 * 			time: unit is ms
 * @retval:	none
 * */
void set_timer(unsigned i, unsigned int time)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
	timer[i].count = time * FREQUENCY_OF_TIM / 1000.0;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d98:	fb02 f303 	mul.w	r3, r2, r3
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fb55 	bl	800044c <__aeabi_ui2d>
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <set_timer+0x50>)
 8002da8:	f7fd fcf4 	bl	8000794 <__aeabi_ddiv>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7fd fdd6 	bl	8000964 <__aeabi_d2uiz>
 8002db8:	4602      	mov	r2, r0
 8002dba:	4908      	ldr	r1, [pc, #32]	; (8002ddc <set_timer+0x54>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	00db      	lsls	r3, r3, #3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	605a      	str	r2, [r3, #4]
	timer[i].state = 1;
 8002dc4:	4a05      	ldr	r2, [pc, #20]	; (8002ddc <set_timer+0x54>)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2101      	movs	r1, #1
 8002dca:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
}
 8002dce:	bf00      	nop
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	408f4000 	.word	0x408f4000
 8002ddc:	200001c0 	.word	0x200001c0

08002de0 <run_timer>:
 * @brief:	run all timers that is on
 * @para:	none
 * @retval:	none
 * */
void run_timer(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	607b      	str	r3, [r7, #4]
 8002dea:	e01f      	b.n	8002e2c <run_timer+0x4c>
	{
		if (timer[i].state)
 8002dec:	4a14      	ldr	r2, [pc, #80]	; (8002e40 <run_timer+0x60>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d016      	beq.n	8002e26 <run_timer+0x46>
		{
			timer[i].count--;
 8002df8:	4a11      	ldr	r2, [pc, #68]	; (8002e40 <run_timer+0x60>)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	1e5a      	subs	r2, r3, #1
 8002e04:	490e      	ldr	r1, [pc, #56]	; (8002e40 <run_timer+0x60>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	440b      	add	r3, r1
 8002e0c:	605a      	str	r2, [r3, #4]
			if (timer[i].count <= 0)
 8002e0e:	4a0c      	ldr	r2, [pc, #48]	; (8002e40 <run_timer+0x60>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d104      	bne.n	8002e26 <run_timer+0x46>
			{
				timer[i].state = 0;
 8002e1c:	4a08      	ldr	r2, [pc, #32]	; (8002e40 <run_timer+0x60>)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2100      	movs	r1, #0
 8002e22:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (unsigned i = 0; i < NUMBER_OF_TIMER; i++)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	607b      	str	r3, [r7, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b04      	cmp	r3, #4
 8002e30:	d9dc      	bls.n	8002dec <run_timer+0xc>
			}
		}
	}
}
 8002e32:	bf00      	nop
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr
 8002e40:	200001c0 	.word	0x200001c0

08002e44 <is_timer_on>:
bool is_timer_on(unsigned i)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
	return (timer[i].state == 1);
 8002e4c:	4a04      	ldr	r2, [pc, #16]	; (8002e60 <is_timer_on+0x1c>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	200001c0 	.word	0x200001c0

08002e64 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002e68:	4b17      	ldr	r3, [pc, #92]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e6a:	4a18      	ldr	r2, [pc, #96]	; (8002ecc <MX_SPI1_Init+0x68>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002e6e:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e70:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e7c:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e82:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e96:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e9c:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002eb0:	220a      	movs	r2, #10
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002eb4:	4804      	ldr	r0, [pc, #16]	; (8002ec8 <MX_SPI1_Init+0x64>)
 8002eb6:	f001 f8fb 	bl	80040b0 <HAL_SPI_Init>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002ec0:	f7ff ff52 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002ec4:	bf00      	nop
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200001e8 	.word	0x200001e8
 8002ecc:	40013000 	.word	0x40013000

08002ed0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b08a      	sub	sp, #40	; 0x28
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed8:	f107 0314 	add.w	r3, r7, #20
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
 8002ee0:	605a      	str	r2, [r3, #4]
 8002ee2:	609a      	str	r2, [r3, #8]
 8002ee4:	60da      	str	r2, [r3, #12]
 8002ee6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a19      	ldr	r2, [pc, #100]	; (8002f54 <HAL_SPI_MspInit+0x84>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d12b      	bne.n	8002f4a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	4b18      	ldr	r3, [pc, #96]	; (8002f58 <HAL_SPI_MspInit+0x88>)
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <HAL_SPI_MspInit+0x88>)
 8002efc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f00:	6453      	str	r3, [r2, #68]	; 0x44
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <HAL_SPI_MspInit+0x88>)
 8002f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f0a:	613b      	str	r3, [r7, #16]
 8002f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	4b11      	ldr	r3, [pc, #68]	; (8002f58 <HAL_SPI_MspInit+0x88>)
 8002f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f16:	4a10      	ldr	r2, [pc, #64]	; (8002f58 <HAL_SPI_MspInit+0x88>)
 8002f18:	f043 0302 	orr.w	r3, r3, #2
 8002f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	; (8002f58 <HAL_SPI_MspInit+0x88>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	60fb      	str	r3, [r7, #12]
 8002f28:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002f2a:	2338      	movs	r3, #56	; 0x38
 8002f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f2e:	2302      	movs	r3, #2
 8002f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f36:	2303      	movs	r3, #3
 8002f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f3e:	f107 0314 	add.w	r3, r7, #20
 8002f42:	4619      	mov	r1, r3
 8002f44:	4805      	ldr	r0, [pc, #20]	; (8002f5c <HAL_SPI_MspInit+0x8c>)
 8002f46:	f000 fabd 	bl	80034c4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f4a:	bf00      	nop
 8002f4c:	3728      	adds	r7, #40	; 0x28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	40013000 	.word	0x40013000
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40020400 	.word	0x40020400

08002f60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	607b      	str	r3, [r7, #4]
 8002f6a:	4b10      	ldr	r3, [pc, #64]	; (8002fac <HAL_MspInit+0x4c>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	4a0f      	ldr	r2, [pc, #60]	; (8002fac <HAL_MspInit+0x4c>)
 8002f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f74:	6453      	str	r3, [r2, #68]	; 0x44
 8002f76:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_MspInit+0x4c>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f7e:	607b      	str	r3, [r7, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	603b      	str	r3, [r7, #0]
 8002f86:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_MspInit+0x4c>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_MspInit+0x4c>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <HAL_MspInit+0x4c>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800

08002fb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002fb4:	e7fe      	b.n	8002fb4 <NMI_Handler+0x4>

08002fb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fba:	e7fe      	b.n	8002fba <HardFault_Handler+0x4>

08002fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fc0:	e7fe      	b.n	8002fc0 <MemManage_Handler+0x4>

08002fc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fc6:	e7fe      	b.n	8002fc6 <BusFault_Handler+0x4>

08002fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fcc:	e7fe      	b.n	8002fcc <UsageFault_Handler+0x4>

08002fce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fe0:	bf00      	nop
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr

08002fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fea:	b480      	push	{r7}
 8002fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ffc:	f000 f90c 	bl	8003218 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}

08003004 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003008:	4802      	ldr	r0, [pc, #8]	; (8003014 <TIM2_IRQHandler+0x10>)
 800300a:	f001 fde7 	bl	8004bdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800300e:	bf00      	nop
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	20000240 	.word	0x20000240

08003018 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <SystemInit+0x20>)
 800301e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003022:	4a05      	ldr	r2, [pc, #20]	; (8003038 <SystemInit+0x20>)
 8003024:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003028:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003042:	f107 0308 	add.w	r3, r7, #8
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
 800304a:	605a      	str	r2, [r3, #4]
 800304c:	609a      	str	r2, [r3, #8]
 800304e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003050:	463b      	mov	r3, r7
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
 8003056:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003058:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <MX_TIM2_Init+0x94>)
 800305a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800305e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8003060:	4b1b      	ldr	r3, [pc, #108]	; (80030d0 <MX_TIM2_Init+0x94>)
 8003062:	f240 3247 	movw	r2, #839	; 0x347
 8003066:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <MX_TIM2_Init+0x94>)
 800306a:	2200      	movs	r2, #0
 800306c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <MX_TIM2_Init+0x94>)
 8003070:	2263      	movs	r2, #99	; 0x63
 8003072:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003074:	4b16      	ldr	r3, [pc, #88]	; (80030d0 <MX_TIM2_Init+0x94>)
 8003076:	2200      	movs	r2, #0
 8003078:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800307a:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <MX_TIM2_Init+0x94>)
 800307c:	2200      	movs	r2, #0
 800307e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003080:	4813      	ldr	r0, [pc, #76]	; (80030d0 <MX_TIM2_Init+0x94>)
 8003082:	f001 fceb 	bl	8004a5c <HAL_TIM_Base_Init>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d001      	beq.n	8003090 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800308c:	f7ff fe6c 	bl	8002d68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003090:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003094:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003096:	f107 0308 	add.w	r3, r7, #8
 800309a:	4619      	mov	r1, r3
 800309c:	480c      	ldr	r0, [pc, #48]	; (80030d0 <MX_TIM2_Init+0x94>)
 800309e:	f001 fe8d 	bl	8004dbc <HAL_TIM_ConfigClockSource>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80030a8:	f7ff fe5e 	bl	8002d68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030ac:	2300      	movs	r3, #0
 80030ae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030b0:	2300      	movs	r3, #0
 80030b2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030b4:	463b      	mov	r3, r7
 80030b6:	4619      	mov	r1, r3
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_TIM2_Init+0x94>)
 80030ba:	f002 f8b5 	bl	8005228 <HAL_TIMEx_MasterConfigSynchronization>
 80030be:	4603      	mov	r3, r0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d001      	beq.n	80030c8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80030c4:	f7ff fe50 	bl	8002d68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030c8:	bf00      	nop
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000240 	.word	0x20000240

080030d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030e4:	d115      	bne.n	8003112 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030e6:	2300      	movs	r3, #0
 80030e8:	60fb      	str	r3, [r7, #12]
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <HAL_TIM_Base_MspInit+0x48>)
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	4a0b      	ldr	r2, [pc, #44]	; (800311c <HAL_TIM_Base_MspInit+0x48>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	6413      	str	r3, [r2, #64]	; 0x40
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <HAL_TIM_Base_MspInit+0x48>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	60fb      	str	r3, [r7, #12]
 8003100:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003102:	2200      	movs	r2, #0
 8003104:	2100      	movs	r1, #0
 8003106:	201c      	movs	r0, #28
 8003108:	f000 f9a5 	bl	8003456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800310c:	201c      	movs	r0, #28
 800310e:	f000 f9be 	bl	800348e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8003112:	bf00      	nop
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800

08003120 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003120:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003158 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003124:	480d      	ldr	r0, [pc, #52]	; (800315c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003126:	490e      	ldr	r1, [pc, #56]	; (8003160 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003128:	4a0e      	ldr	r2, [pc, #56]	; (8003164 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800312a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800312c:	e002      	b.n	8003134 <LoopCopyDataInit>

0800312e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800312e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003130:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003132:	3304      	adds	r3, #4

08003134 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003134:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003136:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003138:	d3f9      	bcc.n	800312e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800313c:	4c0b      	ldr	r4, [pc, #44]	; (800316c <LoopFillZerobss+0x26>)
  movs r3, #0
 800313e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003140:	e001      	b.n	8003146 <LoopFillZerobss>

08003142 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003142:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003144:	3204      	adds	r2, #4

08003146 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003146:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003148:	d3fb      	bcc.n	8003142 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800314a:	f7ff ff65 	bl	8003018 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800314e:	f002 f9d3 	bl	80054f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003152:	f7ff fd37 	bl	8002bc4 <main>
  bx  lr    
 8003156:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003158:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800315c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003160:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8003164:	080098c8 	.word	0x080098c8
  ldr r2, =_sbss
 8003168:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 800316c:	2000028c 	.word	0x2000028c

08003170 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003170:	e7fe      	b.n	8003170 <ADC_IRQHandler>
	...

08003174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003178:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <HAL_Init+0x40>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0d      	ldr	r2, [pc, #52]	; (80031b4 <HAL_Init+0x40>)
 800317e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003182:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003184:	4b0b      	ldr	r3, [pc, #44]	; (80031b4 <HAL_Init+0x40>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <HAL_Init+0x40>)
 800318a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800318e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003190:	4b08      	ldr	r3, [pc, #32]	; (80031b4 <HAL_Init+0x40>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a07      	ldr	r2, [pc, #28]	; (80031b4 <HAL_Init+0x40>)
 8003196:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800319c:	2003      	movs	r0, #3
 800319e:	f000 f94f 	bl	8003440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031a2:	200f      	movs	r0, #15
 80031a4:	f000 f808 	bl	80031b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031a8:	f7ff feda 	bl	8002f60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00

080031b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031c0:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_InitTick+0x54>)
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	4b12      	ldr	r3, [pc, #72]	; (8003210 <HAL_InitTick+0x58>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	4619      	mov	r1, r3
 80031ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80031ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 f967 	bl	80034aa <HAL_SYSTICK_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e00e      	b.n	8003204 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2b0f      	cmp	r3, #15
 80031ea:	d80a      	bhi.n	8003202 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031ec:	2200      	movs	r2, #0
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	f04f 30ff 	mov.w	r0, #4294967295
 80031f4:	f000 f92f 	bl	8003456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031f8:	4a06      	ldr	r2, [pc, #24]	; (8003214 <HAL_InitTick+0x5c>)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031fe:	2300      	movs	r3, #0
 8003200:	e000      	b.n	8003204 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
}
 8003204:	4618      	mov	r0, r3
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	20000024 	.word	0x20000024
 8003210:	2000002c 	.word	0x2000002c
 8003214:	20000028 	.word	0x20000028

08003218 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_IncTick+0x20>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	461a      	mov	r2, r3
 8003222:	4b06      	ldr	r3, [pc, #24]	; (800323c <HAL_IncTick+0x24>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4413      	add	r3, r2
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_IncTick+0x24>)
 800322a:	6013      	str	r3, [r2, #0]
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	2000002c 	.word	0x2000002c
 800323c:	20000288 	.word	0x20000288

08003240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003240:	b480      	push	{r7}
 8003242:	af00      	add	r7, sp, #0
  return uwTick;
 8003244:	4b03      	ldr	r3, [pc, #12]	; (8003254 <HAL_GetTick+0x14>)
 8003246:	681b      	ldr	r3, [r3, #0]
}
 8003248:	4618      	mov	r0, r3
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20000288 	.word	0x20000288

08003258 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff ffee 	bl	8003240 <HAL_GetTick>
 8003264:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003270:	d005      	beq.n	800327e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003272:	4b0a      	ldr	r3, [pc, #40]	; (800329c <HAL_Delay+0x44>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	461a      	mov	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4413      	add	r3, r2
 800327c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800327e:	bf00      	nop
 8003280:	f7ff ffde 	bl	8003240 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	68fa      	ldr	r2, [r7, #12]
 800328c:	429a      	cmp	r2, r3
 800328e:	d8f7      	bhi.n	8003280 <HAL_Delay+0x28>
  {
  }
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	2000002c 	.word	0x2000002c

080032a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032b0:	4b0c      	ldr	r3, [pc, #48]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032b6:	68ba      	ldr	r2, [r7, #8]
 80032b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032bc:	4013      	ands	r3, r2
 80032be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80032cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032d2:	4a04      	ldr	r2, [pc, #16]	; (80032e4 <__NVIC_SetPriorityGrouping+0x44>)
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	60d3      	str	r3, [r2, #12]
}
 80032d8:	bf00      	nop
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	e000ed00 	.word	0xe000ed00

080032e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <__NVIC_GetPriorityGrouping+0x18>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	0a1b      	lsrs	r3, r3, #8
 80032f2:	f003 0307 	and.w	r3, r3, #7
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800330e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003312:	2b00      	cmp	r3, #0
 8003314:	db0b      	blt.n	800332e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003316:	79fb      	ldrb	r3, [r7, #7]
 8003318:	f003 021f 	and.w	r2, r3, #31
 800331c:	4907      	ldr	r1, [pc, #28]	; (800333c <__NVIC_EnableIRQ+0x38>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2001      	movs	r0, #1
 8003326:	fa00 f202 	lsl.w	r2, r0, r2
 800332a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	e000e100 	.word	0xe000e100

08003340 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	4603      	mov	r3, r0
 8003348:	6039      	str	r1, [r7, #0]
 800334a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800334c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003350:	2b00      	cmp	r3, #0
 8003352:	db0a      	blt.n	800336a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2da      	uxtb	r2, r3
 8003358:	490c      	ldr	r1, [pc, #48]	; (800338c <__NVIC_SetPriority+0x4c>)
 800335a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800335e:	0112      	lsls	r2, r2, #4
 8003360:	b2d2      	uxtb	r2, r2
 8003362:	440b      	add	r3, r1
 8003364:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003368:	e00a      	b.n	8003380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	4908      	ldr	r1, [pc, #32]	; (8003390 <__NVIC_SetPriority+0x50>)
 8003370:	79fb      	ldrb	r3, [r7, #7]
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	3b04      	subs	r3, #4
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	b2d2      	uxtb	r2, r2
 800337c:	440b      	add	r3, r1
 800337e:	761a      	strb	r2, [r3, #24]
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr
 800338c:	e000e100 	.word	0xe000e100
 8003390:	e000ed00 	.word	0xe000ed00

08003394 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003394:	b480      	push	{r7}
 8003396:	b089      	sub	sp, #36	; 0x24
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f1c3 0307 	rsb	r3, r3, #7
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	bf28      	it	cs
 80033b2:	2304      	movcs	r3, #4
 80033b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3304      	adds	r3, #4
 80033ba:	2b06      	cmp	r3, #6
 80033bc:	d902      	bls.n	80033c4 <NVIC_EncodePriority+0x30>
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	3b03      	subs	r3, #3
 80033c2:	e000      	b.n	80033c6 <NVIC_EncodePriority+0x32>
 80033c4:	2300      	movs	r3, #0
 80033c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	f04f 32ff 	mov.w	r2, #4294967295
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	68bb      	ldr	r3, [r7, #8]
 80033d6:	401a      	ands	r2, r3
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033dc:	f04f 31ff 	mov.w	r1, #4294967295
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	fa01 f303 	lsl.w	r3, r1, r3
 80033e6:	43d9      	mvns	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ec:	4313      	orrs	r3, r2
         );
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	3724      	adds	r7, #36	; 0x24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f8:	4770      	bx	lr
	...

080033fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3b01      	subs	r3, #1
 8003408:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800340c:	d301      	bcc.n	8003412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800340e:	2301      	movs	r3, #1
 8003410:	e00f      	b.n	8003432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003412:	4a0a      	ldr	r2, [pc, #40]	; (800343c <SysTick_Config+0x40>)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	3b01      	subs	r3, #1
 8003418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800341a:	210f      	movs	r1, #15
 800341c:	f04f 30ff 	mov.w	r0, #4294967295
 8003420:	f7ff ff8e 	bl	8003340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003424:	4b05      	ldr	r3, [pc, #20]	; (800343c <SysTick_Config+0x40>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800342a:	4b04      	ldr	r3, [pc, #16]	; (800343c <SysTick_Config+0x40>)
 800342c:	2207      	movs	r2, #7
 800342e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3708      	adds	r7, #8
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	e000e010 	.word	0xe000e010

08003440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f7ff ff29 	bl	80032a0 <__NVIC_SetPriorityGrouping>
}
 800344e:	bf00      	nop
 8003450:	3708      	adds	r7, #8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003456:	b580      	push	{r7, lr}
 8003458:	b086      	sub	sp, #24
 800345a:	af00      	add	r7, sp, #0
 800345c:	4603      	mov	r3, r0
 800345e:	60b9      	str	r1, [r7, #8]
 8003460:	607a      	str	r2, [r7, #4]
 8003462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003468:	f7ff ff3e 	bl	80032e8 <__NVIC_GetPriorityGrouping>
 800346c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	6978      	ldr	r0, [r7, #20]
 8003474:	f7ff ff8e 	bl	8003394 <NVIC_EncodePriority>
 8003478:	4602      	mov	r2, r0
 800347a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800347e:	4611      	mov	r1, r2
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff ff5d 	bl	8003340 <__NVIC_SetPriority>
}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b082      	sub	sp, #8
 8003492:	af00      	add	r7, sp, #0
 8003494:	4603      	mov	r3, r0
 8003496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349c:	4618      	mov	r0, r3
 800349e:	f7ff ff31 	bl	8003304 <__NVIC_EnableIRQ>
}
 80034a2:	bf00      	nop
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7ff ffa2 	bl	80033fc <SysTick_Config>
 80034b8:	4603      	mov	r3, r0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
	...

080034c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b089      	sub	sp, #36	; 0x24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ce:	2300      	movs	r3, #0
 80034d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
 80034de:	e16b      	b.n	80037b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e0:	2201      	movs	r2, #1
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4013      	ands	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	429a      	cmp	r2, r3
 80034fa:	f040 815a 	bne.w	80037b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	2b01      	cmp	r3, #1
 8003508:	d005      	beq.n	8003516 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003512:	2b02      	cmp	r3, #2
 8003514:	d130      	bne.n	8003578 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800351c:	69fb      	ldr	r3, [r7, #28]
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	2203      	movs	r2, #3
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	4313      	orrs	r3, r2
 800353e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800354c:	2201      	movs	r2, #1
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	091b      	lsrs	r3, r3, #4
 8003562:	f003 0201 	and.w	r2, r3, #1
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b03      	cmp	r3, #3
 8003582:	d017      	beq.n	80035b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	2203      	movs	r2, #3
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	43db      	mvns	r3, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	4013      	ands	r3, r2
 800359a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	005b      	lsls	r3, r3, #1
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f003 0303 	and.w	r3, r3, #3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d123      	bne.n	8003608 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	08da      	lsrs	r2, r3, #3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3208      	adds	r2, #8
 80035c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	f003 0307 	and.w	r3, r3, #7
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	220f      	movs	r2, #15
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	691a      	ldr	r2, [r3, #16]
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0307 	and.w	r3, r3, #7
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	08da      	lsrs	r2, r3, #3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	3208      	adds	r2, #8
 8003602:	69b9      	ldr	r1, [r7, #24]
 8003604:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	2203      	movs	r2, #3
 8003614:	fa02 f303 	lsl.w	r3, r2, r3
 8003618:	43db      	mvns	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	4013      	ands	r3, r2
 800361e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	f003 0203 	and.w	r2, r3, #3
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	4313      	orrs	r3, r2
 8003634:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80b4 	beq.w	80037b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364a:	2300      	movs	r3, #0
 800364c:	60fb      	str	r3, [r7, #12]
 800364e:	4b60      	ldr	r3, [pc, #384]	; (80037d0 <HAL_GPIO_Init+0x30c>)
 8003650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003652:	4a5f      	ldr	r2, [pc, #380]	; (80037d0 <HAL_GPIO_Init+0x30c>)
 8003654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003658:	6453      	str	r3, [r2, #68]	; 0x44
 800365a:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <HAL_GPIO_Init+0x30c>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003666:	4a5b      	ldr	r2, [pc, #364]	; (80037d4 <HAL_GPIO_Init+0x310>)
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	089b      	lsrs	r3, r3, #2
 800366c:	3302      	adds	r3, #2
 800366e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003672:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	220f      	movs	r2, #15
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	43db      	mvns	r3, r3
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	4013      	ands	r3, r2
 8003688:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a52      	ldr	r2, [pc, #328]	; (80037d8 <HAL_GPIO_Init+0x314>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d02b      	beq.n	80036ea <HAL_GPIO_Init+0x226>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a51      	ldr	r2, [pc, #324]	; (80037dc <HAL_GPIO_Init+0x318>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d025      	beq.n	80036e6 <HAL_GPIO_Init+0x222>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a50      	ldr	r2, [pc, #320]	; (80037e0 <HAL_GPIO_Init+0x31c>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d01f      	beq.n	80036e2 <HAL_GPIO_Init+0x21e>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a4f      	ldr	r2, [pc, #316]	; (80037e4 <HAL_GPIO_Init+0x320>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d019      	beq.n	80036de <HAL_GPIO_Init+0x21a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a4e      	ldr	r2, [pc, #312]	; (80037e8 <HAL_GPIO_Init+0x324>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d013      	beq.n	80036da <HAL_GPIO_Init+0x216>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a4d      	ldr	r2, [pc, #308]	; (80037ec <HAL_GPIO_Init+0x328>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d00d      	beq.n	80036d6 <HAL_GPIO_Init+0x212>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a4c      	ldr	r2, [pc, #304]	; (80037f0 <HAL_GPIO_Init+0x32c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <HAL_GPIO_Init+0x20e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a4b      	ldr	r2, [pc, #300]	; (80037f4 <HAL_GPIO_Init+0x330>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d101      	bne.n	80036ce <HAL_GPIO_Init+0x20a>
 80036ca:	2307      	movs	r3, #7
 80036cc:	e00e      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036ce:	2308      	movs	r3, #8
 80036d0:	e00c      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036d2:	2306      	movs	r3, #6
 80036d4:	e00a      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036d6:	2305      	movs	r3, #5
 80036d8:	e008      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036da:	2304      	movs	r3, #4
 80036dc:	e006      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036de:	2303      	movs	r3, #3
 80036e0:	e004      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e002      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036e6:	2301      	movs	r3, #1
 80036e8:	e000      	b.n	80036ec <HAL_GPIO_Init+0x228>
 80036ea:	2300      	movs	r3, #0
 80036ec:	69fa      	ldr	r2, [r7, #28]
 80036ee:	f002 0203 	and.w	r2, r2, #3
 80036f2:	0092      	lsls	r2, r2, #2
 80036f4:	4093      	lsls	r3, r2
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036fc:	4935      	ldr	r1, [pc, #212]	; (80037d4 <HAL_GPIO_Init+0x310>)
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	089b      	lsrs	r3, r3, #2
 8003702:	3302      	adds	r3, #2
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800370a:	4b3b      	ldr	r3, [pc, #236]	; (80037f8 <HAL_GPIO_Init+0x334>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	43db      	mvns	r3, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	4013      	ands	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d003      	beq.n	800372e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800372e:	4a32      	ldr	r2, [pc, #200]	; (80037f8 <HAL_GPIO_Init+0x334>)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003734:	4b30      	ldr	r3, [pc, #192]	; (80037f8 <HAL_GPIO_Init+0x334>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	4313      	orrs	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003758:	4a27      	ldr	r2, [pc, #156]	; (80037f8 <HAL_GPIO_Init+0x334>)
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_GPIO_Init+0x334>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d003      	beq.n	8003782 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	4313      	orrs	r3, r2
 8003780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003782:	4a1d      	ldr	r2, [pc, #116]	; (80037f8 <HAL_GPIO_Init+0x334>)
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003788:	4b1b      	ldr	r3, [pc, #108]	; (80037f8 <HAL_GPIO_Init+0x334>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d003      	beq.n	80037ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4313      	orrs	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80037ac:	4a12      	ldr	r2, [pc, #72]	; (80037f8 <HAL_GPIO_Init+0x334>)
 80037ae:	69bb      	ldr	r3, [r7, #24]
 80037b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3301      	adds	r3, #1
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	2b0f      	cmp	r3, #15
 80037bc:	f67f ae90 	bls.w	80034e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c0:	bf00      	nop
 80037c2:	bf00      	nop
 80037c4:	3724      	adds	r7, #36	; 0x24
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	40023800 	.word	0x40023800
 80037d4:	40013800 	.word	0x40013800
 80037d8:	40020000 	.word	0x40020000
 80037dc:	40020400 	.word	0x40020400
 80037e0:	40020800 	.word	0x40020800
 80037e4:	40020c00 	.word	0x40020c00
 80037e8:	40021000 	.word	0x40021000
 80037ec:	40021400 	.word	0x40021400
 80037f0:	40021800 	.word	0x40021800
 80037f4:	40021c00 	.word	0x40021c00
 80037f8:	40013c00 	.word	0x40013c00

080037fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	460b      	mov	r3, r1
 8003806:	807b      	strh	r3, [r7, #2]
 8003808:	4613      	mov	r3, r2
 800380a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d003      	beq.n	800381a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003812:	887a      	ldrh	r2, [r7, #2]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003818:	e003      	b.n	8003822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800381a:	887b      	ldrh	r3, [r7, #2]
 800381c:	041a      	lsls	r2, r3, #16
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	bf00      	nop
 8003824:	370c      	adds	r7, #12
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr
	...

08003830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e264      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d075      	beq.n	800393a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800384e:	4ba3      	ldr	r3, [pc, #652]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b04      	cmp	r3, #4
 8003858:	d00c      	beq.n	8003874 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4ba0      	ldr	r3, [pc, #640]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003862:	2b08      	cmp	r3, #8
 8003864:	d112      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003866:	4b9d      	ldr	r3, [pc, #628]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003872:	d10b      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	4b99      	ldr	r3, [pc, #612]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05b      	beq.n	8003938 <HAL_RCC_OscConfig+0x108>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d157      	bne.n	8003938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e23f      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x74>
 8003896:	4b91      	ldr	r3, [pc, #580]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a90      	ldr	r2, [pc, #576]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x98>
 80038ae:	4b8b      	ldr	r3, [pc, #556]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a8a      	ldr	r2, [pc, #552]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b88      	ldr	r3, [pc, #544]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a87      	ldr	r2, [pc, #540]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038c8:	4b84      	ldr	r3, [pc, #528]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a83      	ldr	r2, [pc, #524]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b81      	ldr	r3, [pc, #516]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a80      	ldr	r2, [pc, #512]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7ff fcaa 	bl	8003240 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80038f0:	f7ff fca6 	bl	8003240 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e204      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b76      	ldr	r3, [pc, #472]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0xc0>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7ff fc96 	bl	8003240 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003918:	f7ff fc92 	bl	8003240 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1f0      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	4b6c      	ldr	r3, [pc, #432]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0xe8>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d063      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003946:	4b65      	ldr	r3, [pc, #404]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b62      	ldr	r3, [pc, #392]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11c      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395e:	4b5f      	ldr	r3, [pc, #380]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	4b5c      	ldr	r3, [pc, #368]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1c4      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b56      	ldr	r3, [pc, #344]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4952      	ldr	r1, [pc, #328]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	e03a      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <HAL_RCC_OscConfig+0x2b0>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7ff fc4b 	bl	8003240 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039ae:	f7ff fc47 	bl	8003240 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e1a5      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	4b46      	ldr	r3, [pc, #280]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b43      	ldr	r3, [pc, #268]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4940      	ldr	r1, [pc, #256]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <HAL_RCC_OscConfig+0x2b0>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7ff fc2a 	bl	8003240 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039f0:	f7ff fc26 	bl	8003240 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e184      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b36      	ldr	r3, [pc, #216]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d030      	beq.n	8003a7c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b30      	ldr	r3, [pc, #192]	; (8003ae4 <HAL_RCC_OscConfig+0x2b4>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7ff fc0a 	bl	8003240 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a30:	f7ff fc06 	bl	8003240 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e164      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4b26      	ldr	r3, [pc, #152]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x200>
 8003a4e:	e015      	b.n	8003a7c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b24      	ldr	r3, [pc, #144]	; (8003ae4 <HAL_RCC_OscConfig+0x2b4>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7ff fbf3 	bl	8003240 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	e008      	b.n	8003a70 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7ff fbef 	bl	8003240 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d901      	bls.n	8003a70 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e14d      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a70:	4b1a      	ldr	r3, [pc, #104]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a74:	f003 0302 	and.w	r3, r3, #2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f0      	bne.n	8003a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0304 	and.w	r3, r3, #4
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	f000 80a0 	beq.w	8003bca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a8e:	4b13      	ldr	r3, [pc, #76]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d10f      	bne.n	8003aba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	60bb      	str	r3, [r7, #8]
 8003a9e:	4b0f      	ldr	r3, [pc, #60]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	4a0e      	ldr	r2, [pc, #56]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	; (8003adc <HAL_RCC_OscConfig+0x2ac>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ab2:	60bb      	str	r3, [r7, #8]
 8003ab4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aba:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <HAL_RCC_OscConfig+0x2b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d121      	bne.n	8003b0a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <HAL_RCC_OscConfig+0x2b8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a07      	ldr	r2, [pc, #28]	; (8003ae8 <HAL_RCC_OscConfig+0x2b8>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ad2:	f7ff fbb5 	bl	8003240 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ad8:	e011      	b.n	8003afe <HAL_RCC_OscConfig+0x2ce>
 8003ada:	bf00      	nop
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	42470000 	.word	0x42470000
 8003ae4:	42470e80 	.word	0x42470e80
 8003ae8:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aec:	f7ff fba8 	bl	8003240 <HAL_GetTick>
 8003af0:	4602      	mov	r2, r0
 8003af2:	693b      	ldr	r3, [r7, #16]
 8003af4:	1ad3      	subs	r3, r2, r3
 8003af6:	2b02      	cmp	r3, #2
 8003af8:	d901      	bls.n	8003afe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003afa:	2303      	movs	r3, #3
 8003afc:	e106      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afe:	4b85      	ldr	r3, [pc, #532]	; (8003d14 <HAL_RCC_OscConfig+0x4e4>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d0f0      	beq.n	8003aec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689b      	ldr	r3, [r3, #8]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d106      	bne.n	8003b20 <HAL_RCC_OscConfig+0x2f0>
 8003b12:	4b81      	ldr	r3, [pc, #516]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	4a80      	ldr	r2, [pc, #512]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b18:	f043 0301 	orr.w	r3, r3, #1
 8003b1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b1e:	e01c      	b.n	8003b5a <HAL_RCC_OscConfig+0x32a>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	2b05      	cmp	r3, #5
 8003b26:	d10c      	bne.n	8003b42 <HAL_RCC_OscConfig+0x312>
 8003b28:	4b7b      	ldr	r3, [pc, #492]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2c:	4a7a      	ldr	r2, [pc, #488]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b2e:	f043 0304 	orr.w	r3, r3, #4
 8003b32:	6713      	str	r3, [r2, #112]	; 0x70
 8003b34:	4b78      	ldr	r3, [pc, #480]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b38:	4a77      	ldr	r2, [pc, #476]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b3a:	f043 0301 	orr.w	r3, r3, #1
 8003b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003b40:	e00b      	b.n	8003b5a <HAL_RCC_OscConfig+0x32a>
 8003b42:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b46:	4a74      	ldr	r2, [pc, #464]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b4e:	4b72      	ldr	r3, [pc, #456]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b52:	4a71      	ldr	r2, [pc, #452]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b54:	f023 0304 	bic.w	r3, r3, #4
 8003b58:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d015      	beq.n	8003b8e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b62:	f7ff fb6d 	bl	8003240 <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b68:	e00a      	b.n	8003b80 <HAL_RCC_OscConfig+0x350>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b6a:	f7ff fb69 	bl	8003240 <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e0c5      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b80:	4b65      	ldr	r3, [pc, #404]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ee      	beq.n	8003b6a <HAL_RCC_OscConfig+0x33a>
 8003b8c:	e014      	b.n	8003bb8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8e:	f7ff fb57 	bl	8003240 <HAL_GetTick>
 8003b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b94:	e00a      	b.n	8003bac <HAL_RCC_OscConfig+0x37c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b96:	f7ff fb53 	bl	8003240 <HAL_GetTick>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e0af      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003bac:	4b5a      	ldr	r3, [pc, #360]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ee      	bne.n	8003b96 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d105      	bne.n	8003bca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbe:	4b56      	ldr	r3, [pc, #344]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc2:	4a55      	ldr	r2, [pc, #340]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 809b 	beq.w	8003d0a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd4:	4b50      	ldr	r3, [pc, #320]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f003 030c 	and.w	r3, r3, #12
 8003bdc:	2b08      	cmp	r3, #8
 8003bde:	d05c      	beq.n	8003c9a <HAL_RCC_OscConfig+0x46a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d141      	bne.n	8003c6c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be8:	4b4c      	ldr	r3, [pc, #304]	; (8003d1c <HAL_RCC_OscConfig+0x4ec>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bee:	f7ff fb27 	bl	8003240 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x3d8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bf6:	f7ff fb23 	bl	8003240 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e081      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c08:	4b43      	ldr	r3, [pc, #268]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d1f0      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	019b      	lsls	r3, r3, #6
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	041b      	lsls	r3, r3, #16
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c36:	061b      	lsls	r3, r3, #24
 8003c38:	4937      	ldr	r1, [pc, #220]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3e:	4b37      	ldr	r3, [pc, #220]	; (8003d1c <HAL_RCC_OscConfig+0x4ec>)
 8003c40:	2201      	movs	r2, #1
 8003c42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c44:	f7ff fafc 	bl	8003240 <HAL_GetTick>
 8003c48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4a:	e008      	b.n	8003c5e <HAL_RCC_OscConfig+0x42e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4c:	f7ff faf8 	bl	8003240 <HAL_GetTick>
 8003c50:	4602      	mov	r2, r0
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d901      	bls.n	8003c5e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e056      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b2e      	ldr	r3, [pc, #184]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0f0      	beq.n	8003c4c <HAL_RCC_OscConfig+0x41c>
 8003c6a:	e04e      	b.n	8003d0a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6c:	4b2b      	ldr	r3, [pc, #172]	; (8003d1c <HAL_RCC_OscConfig+0x4ec>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c72:	f7ff fae5 	bl	8003240 <HAL_GetTick>
 8003c76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c78:	e008      	b.n	8003c8c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c7a:	f7ff fae1 	bl	8003240 <HAL_GetTick>
 8003c7e:	4602      	mov	r2, r0
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d901      	bls.n	8003c8c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e03f      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8c:	4b22      	ldr	r3, [pc, #136]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1f0      	bne.n	8003c7a <HAL_RCC_OscConfig+0x44a>
 8003c98:	e037      	b.n	8003d0a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	699b      	ldr	r3, [r3, #24]
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e032      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ca6:	4b1c      	ldr	r3, [pc, #112]	; (8003d18 <HAL_RCC_OscConfig+0x4e8>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d028      	beq.n	8003d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d121      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d11a      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cdc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d111      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cec:	085b      	lsrs	r3, r3, #1
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d107      	bne.n	8003d06 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d00:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d02:	429a      	cmp	r2, r3
 8003d04:	d001      	beq.n	8003d0a <HAL_RCC_OscConfig+0x4da>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e000      	b.n	8003d0c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003d0a:	2300      	movs	r3, #0
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	40007000 	.word	0x40007000
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	42470060 	.word	0x42470060

08003d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
 8003d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d101      	bne.n	8003d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e0cc      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d34:	4b68      	ldr	r3, [pc, #416]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d90c      	bls.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d42:	4b65      	ldr	r3, [pc, #404]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	b2d2      	uxtb	r2, r2
 8003d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4a:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0307 	and.w	r3, r3, #7
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d001      	beq.n	8003d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e0b8      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0302 	and.w	r3, r3, #2
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d020      	beq.n	8003daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0304 	and.w	r3, r3, #4
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d74:	4b59      	ldr	r3, [pc, #356]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	4a58      	ldr	r2, [pc, #352]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0308 	and.w	r3, r3, #8
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d005      	beq.n	8003d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d8c:	4b53      	ldr	r3, [pc, #332]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	4a52      	ldr	r2, [pc, #328]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d98:	4b50      	ldr	r3, [pc, #320]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	494d      	ldr	r1, [pc, #308]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d044      	beq.n	8003e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d107      	bne.n	8003dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dbe:	4b47      	ldr	r3, [pc, #284]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d119      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e07f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d003      	beq.n	8003dde <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	d107      	bne.n	8003dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dde:	4b3f      	ldr	r3, [pc, #252]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e06f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dee:	4b3b      	ldr	r3, [pc, #236]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e067      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dfe:	4b37      	ldr	r3, [pc, #220]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	f023 0203 	bic.w	r2, r3, #3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	4934      	ldr	r1, [pc, #208]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e10:	f7ff fa16 	bl	8003240 <HAL_GetTick>
 8003e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e16:	e00a      	b.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e18:	f7ff fa12 	bl	8003240 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e04f      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e2e:	4b2b      	ldr	r3, [pc, #172]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	f003 020c 	and.w	r2, r3, #12
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d1eb      	bne.n	8003e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d20c      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e032      	b.n	8003ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b19      	ldr	r3, [pc, #100]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4916      	ldr	r1, [pc, #88]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b12      	ldr	r3, [pc, #72]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490e      	ldr	r1, [pc, #56]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ea6:	f000 f821 	bl	8003eec <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <HAL_RCC_ClockConfig+0x1bc>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490a      	ldr	r1, [pc, #40]	; (8003ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	fa22 f303 	lsr.w	r3, r2, r3
 8003ebe:	4a09      	ldr	r2, [pc, #36]	; (8003ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ec2:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f976 	bl	80031b8 <HAL_InitTick>

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023c00 	.word	0x40023c00
 8003edc:	40023800 	.word	0x40023800
 8003ee0:	080098a8 	.word	0x080098a8
 8003ee4:	20000024 	.word	0x20000024
 8003ee8:	20000028 	.word	0x20000028

08003eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003eec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	607b      	str	r3, [r7, #4]
  uint32_t pllvco = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	60fb      	str	r3, [r7, #12]
  uint32_t pllp = 0U;
 8003efc:	2300      	movs	r3, #0
 8003efe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003f00:	2300      	movs	r3, #0
 8003f02:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f04:	4b67      	ldr	r3, [pc, #412]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d00d      	beq.n	8003f2c <HAL_RCC_GetSysClockFreq+0x40>
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	f200 80bd 	bhi.w	8004090 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d002      	beq.n	8003f20 <HAL_RCC_GetSysClockFreq+0x34>
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d003      	beq.n	8003f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f1e:	e0b7      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f20:	4b61      	ldr	r3, [pc, #388]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003f22:	60bb      	str	r3, [r7, #8]
      break;
 8003f24:	e0b7      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f26:	4b61      	ldr	r3, [pc, #388]	; (80040ac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003f28:	60bb      	str	r3, [r7, #8]
      break;
 8003f2a:	e0b4      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f2c:	4b5d      	ldr	r3, [pc, #372]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f34:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f36:	4b5b      	ldr	r3, [pc, #364]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04d      	beq.n	8003fde <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f42:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	099b      	lsrs	r3, r3, #6
 8003f48:	461a      	mov	r2, r3
 8003f4a:	f04f 0300 	mov.w	r3, #0
 8003f4e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	ea02 0800 	and.w	r8, r2, r0
 8003f5a:	ea03 0901 	and.w	r9, r3, r1
 8003f5e:	4640      	mov	r0, r8
 8003f60:	4649      	mov	r1, r9
 8003f62:	f04f 0200 	mov.w	r2, #0
 8003f66:	f04f 0300 	mov.w	r3, #0
 8003f6a:	014b      	lsls	r3, r1, #5
 8003f6c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003f70:	0142      	lsls	r2, r0, #5
 8003f72:	4610      	mov	r0, r2
 8003f74:	4619      	mov	r1, r3
 8003f76:	ebb0 0008 	subs.w	r0, r0, r8
 8003f7a:	eb61 0109 	sbc.w	r1, r1, r9
 8003f7e:	f04f 0200 	mov.w	r2, #0
 8003f82:	f04f 0300 	mov.w	r3, #0
 8003f86:	018b      	lsls	r3, r1, #6
 8003f88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003f8c:	0182      	lsls	r2, r0, #6
 8003f8e:	1a12      	subs	r2, r2, r0
 8003f90:	eb63 0301 	sbc.w	r3, r3, r1
 8003f94:	f04f 0000 	mov.w	r0, #0
 8003f98:	f04f 0100 	mov.w	r1, #0
 8003f9c:	00d9      	lsls	r1, r3, #3
 8003f9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003fa2:	00d0      	lsls	r0, r2, #3
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	eb12 0208 	adds.w	r2, r2, r8
 8003fac:	eb43 0309 	adc.w	r3, r3, r9
 8003fb0:	f04f 0000 	mov.w	r0, #0
 8003fb4:	f04f 0100 	mov.w	r1, #0
 8003fb8:	0259      	lsls	r1, r3, #9
 8003fba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003fbe:	0250      	lsls	r0, r2, #9
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	461a      	mov	r2, r3
 8003fcc:	f04f 0300 	mov.w	r3, #0
 8003fd0:	f7fc fce8 	bl	80009a4 <__aeabi_uldivmod>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	4613      	mov	r3, r2
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	e04a      	b.n	8004074 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fde:	4b31      	ldr	r3, [pc, #196]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	099b      	lsrs	r3, r3, #6
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003fee:	f04f 0100 	mov.w	r1, #0
 8003ff2:	ea02 0400 	and.w	r4, r2, r0
 8003ff6:	ea03 0501 	and.w	r5, r3, r1
 8003ffa:	4620      	mov	r0, r4
 8003ffc:	4629      	mov	r1, r5
 8003ffe:	f04f 0200 	mov.w	r2, #0
 8004002:	f04f 0300 	mov.w	r3, #0
 8004006:	014b      	lsls	r3, r1, #5
 8004008:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800400c:	0142      	lsls	r2, r0, #5
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	1b00      	subs	r0, r0, r4
 8004014:	eb61 0105 	sbc.w	r1, r1, r5
 8004018:	f04f 0200 	mov.w	r2, #0
 800401c:	f04f 0300 	mov.w	r3, #0
 8004020:	018b      	lsls	r3, r1, #6
 8004022:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004026:	0182      	lsls	r2, r0, #6
 8004028:	1a12      	subs	r2, r2, r0
 800402a:	eb63 0301 	sbc.w	r3, r3, r1
 800402e:	f04f 0000 	mov.w	r0, #0
 8004032:	f04f 0100 	mov.w	r1, #0
 8004036:	00d9      	lsls	r1, r3, #3
 8004038:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800403c:	00d0      	lsls	r0, r2, #3
 800403e:	4602      	mov	r2, r0
 8004040:	460b      	mov	r3, r1
 8004042:	1912      	adds	r2, r2, r4
 8004044:	eb45 0303 	adc.w	r3, r5, r3
 8004048:	f04f 0000 	mov.w	r0, #0
 800404c:	f04f 0100 	mov.w	r1, #0
 8004050:	0299      	lsls	r1, r3, #10
 8004052:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004056:	0290      	lsls	r0, r2, #10
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	461a      	mov	r2, r3
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	f7fc fc9c 	bl	80009a4 <__aeabi_uldivmod>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4613      	mov	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	0c1b      	lsrs	r3, r3, #16
 800407a:	f003 0303 	and.w	r3, r3, #3
 800407e:	3301      	adds	r3, #1
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	fbb2 f3f3 	udiv	r3, r2, r3
 800408c:	60bb      	str	r3, [r7, #8]
      break;
 800408e:	e002      	b.n	8004096 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004092:	60bb      	str	r3, [r7, #8]
      break;
 8004094:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004096:	68bb      	ldr	r3, [r7, #8]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80040a2:	bf00      	nop
 80040a4:	40023800 	.word	0x40023800
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200

080040b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	e07b      	b.n	80041ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d108      	bne.n	80040dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040d2:	d009      	beq.n	80040e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2200      	movs	r2, #0
 80040d8:	61da      	str	r2, [r3, #28]
 80040da:	e005      	b.n	80040e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d106      	bne.n	8004108 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f7fe fee4 	bl	8002ed0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2202      	movs	r2, #2
 800410c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800411e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	431a      	orrs	r2, r3
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	431a      	orrs	r2, r3
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004158:	431a      	orrs	r2, r3
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	69db      	ldr	r3, [r3, #28]
 800415e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a1b      	ldr	r3, [r3, #32]
 8004168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800416c:	ea42 0103 	orr.w	r1, r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004174:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	0c1b      	lsrs	r3, r3, #16
 8004186:	f003 0104 	and.w	r1, r3, #4
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0210 	and.w	r2, r3, #16
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	430a      	orrs	r2, r1
 8004198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	69da      	ldr	r2, [r3, #28]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80041b8:	2300      	movs	r3, #0
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}

080041c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c2:	b580      	push	{r7, lr}
 80041c4:	b088      	sub	sp, #32
 80041c6:	af02      	add	r7, sp, #8
 80041c8:	60f8      	str	r0, [r7, #12]
 80041ca:	60b9      	str	r1, [r7, #8]
 80041cc:	603b      	str	r3, [r7, #0]
 80041ce:	4613      	mov	r3, r2
 80041d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d001      	beq.n	80041e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80041de:	2302      	movs	r3, #2
 80041e0:	e104      	b.n	80043ec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ea:	d112      	bne.n	8004212 <HAL_SPI_Receive+0x50>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10e      	bne.n	8004212 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2204      	movs	r2, #4
 80041f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041fc:	88fa      	ldrh	r2, [r7, #6]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	4613      	mov	r3, r2
 8004204:	68ba      	ldr	r2, [r7, #8]
 8004206:	68b9      	ldr	r1, [r7, #8]
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f8f3 	bl	80043f4 <HAL_SPI_TransmitReceive>
 800420e:	4603      	mov	r3, r0
 8004210:	e0ec      	b.n	80043ec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004212:	f7ff f815 	bl	8003240 <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d002      	beq.n	8004224 <HAL_SPI_Receive+0x62>
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e0e1      	b.n	80043ec <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_SPI_Receive+0x74>
 8004232:	2302      	movs	r3, #2
 8004234:	e0da      	b.n	80043ec <HAL_SPI_Receive+0x22a>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	2204      	movs	r2, #4
 8004242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	68ba      	ldr	r2, [r7, #8]
 8004250:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	88fa      	ldrh	r2, [r7, #6]
 8004256:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	88fa      	ldrh	r2, [r7, #6]
 800425c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004284:	d10f      	bne.n	80042a6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004294:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d007      	beq.n	80042c4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d170      	bne.n	80043ae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042cc:	e035      	b.n	800433a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d115      	bne.n	8004308 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f103 020c 	add.w	r2, r3, #12
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042fc:	b29b      	uxth	r3, r3
 80042fe:	3b01      	subs	r3, #1
 8004300:	b29a      	uxth	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004306:	e018      	b.n	800433a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004308:	f7fe ff9a 	bl	8003240 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d803      	bhi.n	8004320 <HAL_SPI_Receive+0x15e>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d102      	bne.n	8004326 <HAL_SPI_Receive+0x164>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2201      	movs	r2, #1
 800432a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e058      	b.n	80043ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800433e:	b29b      	uxth	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1c4      	bne.n	80042ce <HAL_SPI_Receive+0x10c>
 8004344:	e038      	b.n	80043b8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d113      	bne.n	800437c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435e:	b292      	uxth	r2, r2
 8004360:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004366:	1c9a      	adds	r2, r3, #2
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	87da      	strh	r2, [r3, #62]	; 0x3e
 800437a:	e018      	b.n	80043ae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800437c:	f7fe ff60 	bl	8003240 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	429a      	cmp	r2, r3
 800438a:	d803      	bhi.n	8004394 <HAL_SPI_Receive+0x1d2>
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d102      	bne.n	800439a <HAL_SPI_Receive+0x1d8>
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2201      	movs	r2, #1
 800439e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e01e      	b.n	80043ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1c6      	bne.n	8004346 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	6839      	ldr	r1, [r7, #0]
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 fa4b 	bl	8004858 <SPI_EndRxTransaction>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d002      	beq.n	80043ce <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2220      	movs	r2, #32
 80043cc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e000      	b.n	80043ec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80043ea:	2300      	movs	r3, #0
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08a      	sub	sp, #40	; 0x28
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004406:	f7fe ff1b 	bl	8003240 <HAL_GetTick>
 800440a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004412:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800441e:	7ffb      	ldrb	r3, [r7, #31]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d00c      	beq.n	800443e <HAL_SPI_TransmitReceive+0x4a>
 8004424:	69bb      	ldr	r3, [r7, #24]
 8004426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800442a:	d106      	bne.n	800443a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d102      	bne.n	800443a <HAL_SPI_TransmitReceive+0x46>
 8004434:	7ffb      	ldrb	r3, [r7, #31]
 8004436:	2b04      	cmp	r3, #4
 8004438:	d001      	beq.n	800443e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800443a:	2302      	movs	r3, #2
 800443c:	e17f      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d005      	beq.n	8004450 <HAL_SPI_TransmitReceive+0x5c>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <HAL_SPI_TransmitReceive+0x5c>
 800444a:	887b      	ldrh	r3, [r7, #2]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d101      	bne.n	8004454 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e174      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800445a:	2b01      	cmp	r3, #1
 800445c:	d101      	bne.n	8004462 <HAL_SPI_TransmitReceive+0x6e>
 800445e:	2302      	movs	r3, #2
 8004460:	e16d      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2201      	movs	r2, #1
 8004466:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b04      	cmp	r3, #4
 8004474:	d003      	beq.n	800447e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2205      	movs	r2, #5
 800447a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	887a      	ldrh	r2, [r7, #2]
 800448e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	887a      	ldrh	r2, [r7, #2]
 8004494:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	887a      	ldrh	r2, [r7, #2]
 80044a0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	887a      	ldrh	r2, [r7, #2]
 80044a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044be:	2b40      	cmp	r3, #64	; 0x40
 80044c0:	d007      	beq.n	80044d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044da:	d17e      	bne.n	80045da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d002      	beq.n	80044ea <HAL_SPI_TransmitReceive+0xf6>
 80044e4:	8afb      	ldrh	r3, [r7, #22]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d16c      	bne.n	80045c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	881a      	ldrh	r2, [r3, #0]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fa:	1c9a      	adds	r2, r3, #2
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004504:	b29b      	uxth	r3, r3
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800450e:	e059      	b.n	80045c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689b      	ldr	r3, [r3, #8]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b02      	cmp	r3, #2
 800451c:	d11b      	bne.n	8004556 <HAL_SPI_TransmitReceive+0x162>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <HAL_SPI_TransmitReceive+0x162>
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	2b01      	cmp	r3, #1
 800452c:	d113      	bne.n	8004556 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004532:	881a      	ldrh	r2, [r3, #0]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800453e:	1c9a      	adds	r2, r3, #2
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d119      	bne.n	8004598 <HAL_SPI_TransmitReceive+0x1a4>
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004568:	b29b      	uxth	r3, r3
 800456a:	2b00      	cmp	r3, #0
 800456c:	d014      	beq.n	8004598 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68da      	ldr	r2, [r3, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004578:	b292      	uxth	r2, r2
 800457a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	1c9a      	adds	r2, r3, #2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800458a:	b29b      	uxth	r3, r3
 800458c:	3b01      	subs	r3, #1
 800458e:	b29a      	uxth	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004594:	2301      	movs	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004598:	f7fe fe52 	bl	8003240 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	6a3b      	ldr	r3, [r7, #32]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d80d      	bhi.n	80045c4 <HAL_SPI_TransmitReceive+0x1d0>
 80045a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d009      	beq.n	80045c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0bc      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1a0      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x11c>
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d19b      	bne.n	8004510 <HAL_SPI_TransmitReceive+0x11c>
 80045d8:	e082      	b.n	80046e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <HAL_SPI_TransmitReceive+0x1f4>
 80045e2:	8afb      	ldrh	r3, [r7, #22]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d171      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	7812      	ldrb	r2, [r2, #0]
 80045f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800460e:	e05d      	b.n	80046cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d11c      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x264>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004622:	b29b      	uxth	r3, r3
 8004624:	2b00      	cmp	r3, #0
 8004626:	d017      	beq.n	8004658 <HAL_SPI_TransmitReceive+0x264>
 8004628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462a:	2b01      	cmp	r3, #1
 800462c:	d114      	bne.n	8004658 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	330c      	adds	r3, #12
 8004638:	7812      	ldrb	r2, [r2, #0]
 800463a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004654:	2300      	movs	r3, #0
 8004656:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b01      	cmp	r3, #1
 8004664:	d119      	bne.n	800469a <HAL_SPI_TransmitReceive+0x2a6>
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800466a:	b29b      	uxth	r3, r3
 800466c:	2b00      	cmp	r3, #0
 800466e:	d014      	beq.n	800469a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	68da      	ldr	r2, [r3, #12]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800467a:	b2d2      	uxtb	r2, r2
 800467c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800468c:	b29b      	uxth	r3, r3
 800468e:	3b01      	subs	r3, #1
 8004690:	b29a      	uxth	r2, r3
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004696:	2301      	movs	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800469a:	f7fe fdd1 	bl	8003240 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	6a3b      	ldr	r3, [r7, #32]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d803      	bhi.n	80046b2 <HAL_SPI_TransmitReceive+0x2be>
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b0:	d102      	bne.n	80046b8 <HAL_SPI_TransmitReceive+0x2c4>
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d109      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e038      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d19c      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x21c>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d197      	bne.n	8004610 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e4:	68f8      	ldr	r0, [r7, #12]
 80046e6:	f000 f91d 	bl	8004924 <SPI_EndRxTxTransaction>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d008      	beq.n	8004702 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e01d      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d10a      	bne.n	8004720 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	613b      	str	r3, [r7, #16]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	689b      	ldr	r3, [r3, #8]
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004734:	2b00      	cmp	r3, #0
 8004736:	d001      	beq.n	800473c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800473c:	2300      	movs	r3, #0
  }
}
 800473e:	4618      	mov	r0, r3
 8004740:	3728      	adds	r7, #40	; 0x28
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b088      	sub	sp, #32
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	4613      	mov	r3, r2
 8004756:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004758:	f7fe fd72 	bl	8003240 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	4413      	add	r3, r2
 8004766:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004768:	f7fe fd6a 	bl	8003240 <HAL_GetTick>
 800476c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800476e:	4b39      	ldr	r3, [pc, #228]	; (8004854 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	015b      	lsls	r3, r3, #5
 8004774:	0d1b      	lsrs	r3, r3, #20
 8004776:	69fa      	ldr	r2, [r7, #28]
 8004778:	fb02 f303 	mul.w	r3, r2, r3
 800477c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800477e:	e054      	b.n	800482a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004786:	d050      	beq.n	800482a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004788:	f7fe fd5a 	bl	8003240 <HAL_GetTick>
 800478c:	4602      	mov	r2, r0
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	429a      	cmp	r2, r3
 8004796:	d902      	bls.n	800479e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d13d      	bne.n	800481a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	685a      	ldr	r2, [r3, #4]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047b6:	d111      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x94>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047c0:	d004      	beq.n	80047cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ca:	d107      	bne.n	80047dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047e4:	d10f      	bne.n	8004806 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f4:	601a      	str	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004804:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e017      	b.n	800484a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004820:	2300      	movs	r3, #0
 8004822:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	3b01      	subs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d19b      	bne.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
 8004852:	bf00      	nop
 8004854:	20000024 	.word	0x20000024

08004858 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af02      	add	r7, sp, #8
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800486c:	d111      	bne.n	8004892 <SPI_EndRxTransaction+0x3a>
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004876:	d004      	beq.n	8004882 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004880:	d107      	bne.n	8004892 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004890:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800489a:	d12a      	bne.n	80048f2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a4:	d012      	beq.n	80048cc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2200      	movs	r2, #0
 80048ae:	2180      	movs	r1, #128	; 0x80
 80048b0:	68f8      	ldr	r0, [r7, #12]
 80048b2:	f7ff ff49 	bl	8004748 <SPI_WaitFlagStateUntilTimeout>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02d      	beq.n	8004918 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0220 	orr.w	r2, r3, #32
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e026      	b.n	800491a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	9300      	str	r3, [sp, #0]
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2200      	movs	r2, #0
 80048d4:	2101      	movs	r1, #1
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f7ff ff36 	bl	8004748 <SPI_WaitFlagStateUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d01a      	beq.n	8004918 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048e6:	f043 0220 	orr.w	r2, r3, #32
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048ee:	2303      	movs	r3, #3
 80048f0:	e013      	b.n	800491a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	9300      	str	r3, [sp, #0]
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2101      	movs	r1, #1
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff ff23 	bl	8004748 <SPI_WaitFlagStateUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d007      	beq.n	8004918 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800490c:	f043 0220 	orr.w	r2, r3, #32
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e000      	b.n	800491a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b088      	sub	sp, #32
 8004928:	af02      	add	r7, sp, #8
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	2201      	movs	r2, #1
 8004938:	2102      	movs	r1, #2
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f7ff ff04 	bl	8004748 <SPI_WaitFlagStateUntilTimeout>
 8004940:	4603      	mov	r3, r0
 8004942:	2b00      	cmp	r3, #0
 8004944:	d007      	beq.n	8004956 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	f043 0220 	orr.w	r2, r3, #32
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e032      	b.n	80049bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004956:	4b1b      	ldr	r3, [pc, #108]	; (80049c4 <SPI_EndRxTxTransaction+0xa0>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <SPI_EndRxTxTransaction+0xa4>)
 800495c:	fba2 2303 	umull	r2, r3, r2, r3
 8004960:	0d5b      	lsrs	r3, r3, #21
 8004962:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004966:	fb02 f303 	mul.w	r3, r2, r3
 800496a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004974:	d112      	bne.n	800499c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2200      	movs	r2, #0
 800497e:	2180      	movs	r1, #128	; 0x80
 8004980:	68f8      	ldr	r0, [r7, #12]
 8004982:	f7ff fee1 	bl	8004748 <SPI_WaitFlagStateUntilTimeout>
 8004986:	4603      	mov	r3, r0
 8004988:	2b00      	cmp	r3, #0
 800498a:	d016      	beq.n	80049ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e00f      	b.n	80049bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00a      	beq.n	80049b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	3b01      	subs	r3, #1
 80049a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d0f2      	beq.n	800499c <SPI_EndRxTxTransaction+0x78>
 80049b6:	e000      	b.n	80049ba <SPI_EndRxTxTransaction+0x96>
        break;
 80049b8:	bf00      	nop
  }

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3718      	adds	r7, #24
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	20000024 	.word	0x20000024
 80049c8:	165e9f81 	.word	0x165e9f81

080049cc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e038      	b.n	8004a54 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f7fc fce4 	bl	80013c4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	3308      	adds	r3, #8
 8004a04:	4619      	mov	r1, r3
 8004a06:	4610      	mov	r0, r2
 8004a08:	f000 fc9e 	bl	8005348 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	461a      	mov	r2, r3
 8004a16:	68b9      	ldr	r1, [r7, #8]
 8004a18:	f000 fd00 	bl	800541c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6858      	ldr	r0, [r3, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	f000 fd2d 	bl	8005488 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	6892      	ldr	r2, [r2, #8]
 8004a36:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	f041 0101 	orr.w	r1, r1, #1
 8004a46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3710      	adds	r7, #16
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e041      	b.n	8004af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d106      	bne.n	8004a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f7fe fb26 	bl	80030d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f000 fa7e 	bl	8004f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b085      	sub	sp, #20
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d001      	beq.n	8004b14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e04e      	b.n	8004bb2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2202      	movs	r2, #2
 8004b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	68da      	ldr	r2, [r3, #12]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d022      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b3e:	d01d      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1f      	ldr	r2, [pc, #124]	; (8004bc4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d018      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1e      	ldr	r2, [pc, #120]	; (8004bc8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d013      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a1c      	ldr	r2, [pc, #112]	; (8004bcc <HAL_TIM_Base_Start_IT+0xd0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00e      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d009      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a19      	ldr	r2, [pc, #100]	; (8004bd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d004      	beq.n	8004b7c <HAL_TIM_Base_Start_IT+0x80>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d111      	bne.n	8004ba0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d010      	beq.n	8004bb0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9e:	e007      	b.n	8004bb0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0201 	orr.w	r2, r2, #1
 8004bae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bb0:	2300      	movs	r3, #0
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3714      	adds	r7, #20
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbc:	4770      	bx	lr
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000
 8004bc4:	40000400 	.word	0x40000400
 8004bc8:	40000800 	.word	0x40000800
 8004bcc:	40000c00 	.word	0x40000c00
 8004bd0:	40010400 	.word	0x40010400
 8004bd4:	40014000 	.word	0x40014000
 8004bd8:	40001800 	.word	0x40001800

08004bdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d020      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f06f 0202 	mvn.w	r2, #2
 8004c10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	f003 0303 	and.w	r3, r3, #3
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f999 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004c2c:	e005      	b.n	8004c3a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f98b 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 f99c 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	f003 0304 	and.w	r3, r3, #4
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d020      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	f003 0304 	and.w	r3, r3, #4
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d01b      	beq.n	8004c8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0204 	mvn.w	r2, #4
 8004c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2202      	movs	r2, #2
 8004c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f973 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004c78:	e005      	b.n	8004c86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f965 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 f976 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d020      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f003 0308 	and.w	r3, r3, #8
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d01b      	beq.n	8004cd8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0208 	mvn.w	r2, #8
 8004ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2204      	movs	r2, #4
 8004cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	69db      	ldr	r3, [r3, #28]
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f94d 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004cc4:	e005      	b.n	8004cd2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f93f 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f000 f950 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	f003 0310 	and.w	r3, r3, #16
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d020      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d01b      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f06f 0210 	mvn.w	r2, #16
 8004cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2208      	movs	r2, #8
 8004cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	69db      	ldr	r3, [r3, #28]
 8004d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d003      	beq.n	8004d12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f927 	bl	8004f5e <HAL_TIM_IC_CaptureCallback>
 8004d10:	e005      	b.n	8004d1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f919 	bl	8004f4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f92a 	bl	8004f72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00c      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d007      	beq.n	8004d48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f06f 0201 	mvn.w	r2, #1
 8004d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7fe f815 	bl	8002d72 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 fae4 	bl	8005334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00c      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f000 f8fb 	bl	8004f86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00c      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0320 	and.w	r3, r3, #32
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d007      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f06f 0220 	mvn.w	r2, #32
 8004dac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fab6 	bl	8005320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d101      	bne.n	8004dd8 <HAL_TIM_ConfigClockSource+0x1c>
 8004dd4:	2302      	movs	r3, #2
 8004dd6:	e0b4      	b.n	8004f42 <HAL_TIM_ConfigClockSource+0x186>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2202      	movs	r2, #2
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	68ba      	ldr	r2, [r7, #8]
 8004e06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e10:	d03e      	beq.n	8004e90 <HAL_TIM_ConfigClockSource+0xd4>
 8004e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e16:	f200 8087 	bhi.w	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e1e:	f000 8086 	beq.w	8004f2e <HAL_TIM_ConfigClockSource+0x172>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d87f      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b70      	cmp	r3, #112	; 0x70
 8004e2a:	d01a      	beq.n	8004e62 <HAL_TIM_ConfigClockSource+0xa6>
 8004e2c:	2b70      	cmp	r3, #112	; 0x70
 8004e2e:	d87b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b60      	cmp	r3, #96	; 0x60
 8004e32:	d050      	beq.n	8004ed6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e34:	2b60      	cmp	r3, #96	; 0x60
 8004e36:	d877      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b50      	cmp	r3, #80	; 0x50
 8004e3a:	d03c      	beq.n	8004eb6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e3c:	2b50      	cmp	r3, #80	; 0x50
 8004e3e:	d873      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b40      	cmp	r3, #64	; 0x40
 8004e42:	d058      	beq.n	8004ef6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e44:	2b40      	cmp	r3, #64	; 0x40
 8004e46:	d86f      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b30      	cmp	r3, #48	; 0x30
 8004e4a:	d064      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b30      	cmp	r3, #48	; 0x30
 8004e4e:	d86b      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b20      	cmp	r3, #32
 8004e52:	d060      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b20      	cmp	r3, #32
 8004e56:	d867      	bhi.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d05c      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b10      	cmp	r3, #16
 8004e5e:	d05a      	beq.n	8004f16 <HAL_TIM_ConfigClockSource+0x15a>
 8004e60:	e062      	b.n	8004f28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6818      	ldr	r0, [r3, #0]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6899      	ldr	r1, [r3, #8]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	f000 f9b9 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e84:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	68ba      	ldr	r2, [r7, #8]
 8004e8c:	609a      	str	r2, [r3, #8]
      break;
 8004e8e:	e04f      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6818      	ldr	r0, [r3, #0]
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	6899      	ldr	r1, [r3, #8]
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	68db      	ldr	r3, [r3, #12]
 8004ea0:	f000 f9a2 	bl	80051e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	689a      	ldr	r2, [r3, #8]
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eb2:	609a      	str	r2, [r3, #8]
      break;
 8004eb4:	e03c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6818      	ldr	r0, [r3, #0]
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	6859      	ldr	r1, [r3, #4]
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	f000 f916 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2150      	movs	r1, #80	; 0x50
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 f96f 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004ed4:	e02c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	6859      	ldr	r1, [r3, #4]
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	f000 f935 	bl	8005152 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	2160      	movs	r1, #96	; 0x60
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 f95f 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004ef4:	e01c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6818      	ldr	r0, [r3, #0]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	6859      	ldr	r1, [r3, #4]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	68db      	ldr	r3, [r3, #12]
 8004f02:	461a      	mov	r2, r3
 8004f04:	f000 f8f6 	bl	80050f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2140      	movs	r1, #64	; 0x40
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 f94f 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f14:	e00c      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 f946 	bl	80051b2 <TIM_ITRx_SetConfig>
      break;
 8004f26:	e003      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f2c:	e000      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f66:	bf00      	nop
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr
	...

08004f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b085      	sub	sp, #20
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a46      	ldr	r2, [pc, #280]	; (80050c8 <TIM_Base_SetConfig+0x12c>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d013      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fba:	d00f      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a43      	ldr	r2, [pc, #268]	; (80050cc <TIM_Base_SetConfig+0x130>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d00b      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a42      	ldr	r2, [pc, #264]	; (80050d0 <TIM_Base_SetConfig+0x134>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d007      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a41      	ldr	r2, [pc, #260]	; (80050d4 <TIM_Base_SetConfig+0x138>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d003      	beq.n	8004fdc <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a40      	ldr	r2, [pc, #256]	; (80050d8 <TIM_Base_SetConfig+0x13c>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d108      	bne.n	8004fee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a35      	ldr	r2, [pc, #212]	; (80050c8 <TIM_Base_SetConfig+0x12c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02b      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ffc:	d027      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a32      	ldr	r2, [pc, #200]	; (80050cc <TIM_Base_SetConfig+0x130>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d023      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a31      	ldr	r2, [pc, #196]	; (80050d0 <TIM_Base_SetConfig+0x134>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01f      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a30      	ldr	r2, [pc, #192]	; (80050d4 <TIM_Base_SetConfig+0x138>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01b      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2f      	ldr	r2, [pc, #188]	; (80050d8 <TIM_Base_SetConfig+0x13c>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d017      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2e      	ldr	r2, [pc, #184]	; (80050dc <TIM_Base_SetConfig+0x140>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2d      	ldr	r2, [pc, #180]	; (80050e0 <TIM_Base_SetConfig+0x144>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00f      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2c      	ldr	r2, [pc, #176]	; (80050e4 <TIM_Base_SetConfig+0x148>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2b      	ldr	r2, [pc, #172]	; (80050e8 <TIM_Base_SetConfig+0x14c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2a      	ldr	r2, [pc, #168]	; (80050ec <TIM_Base_SetConfig+0x150>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a29      	ldr	r2, [pc, #164]	; (80050f0 <TIM_Base_SetConfig+0x154>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a10      	ldr	r2, [pc, #64]	; (80050c8 <TIM_Base_SetConfig+0x12c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_Base_SetConfig+0xf8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a12      	ldr	r2, [pc, #72]	; (80050d8 <TIM_Base_SetConfig+0x13c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d103      	bne.n	800509c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f023 0201 	bic.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]
  }
}
 80050ba:	bf00      	nop
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40014400 	.word	0x40014400
 80050e4:	40014800 	.word	0x40014800
 80050e8:	40001800 	.word	0x40001800
 80050ec:	40001c00 	.word	0x40001c00
 80050f0:	40002000 	.word	0x40002000

080050f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b087      	sub	sp, #28
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6a1b      	ldr	r3, [r3, #32]
 8005104:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f023 0201 	bic.w	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	693a      	ldr	r2, [r7, #16]
 8005126:	4313      	orrs	r3, r2
 8005128:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	f023 030a 	bic.w	r3, r3, #10
 8005130:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4313      	orrs	r3, r2
 8005138:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	697a      	ldr	r2, [r7, #20]
 8005144:	621a      	str	r2, [r3, #32]
}
 8005146:	bf00      	nop
 8005148:	371c      	adds	r7, #28
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005152:	b480      	push	{r7}
 8005154:	b087      	sub	sp, #28
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f023 0210 	bic.w	r2, r3, #16
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	699b      	ldr	r3, [r3, #24]
 8005174:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800517c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	031b      	lsls	r3, r3, #12
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	4313      	orrs	r3, r2
 8005186:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800518e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	011b      	lsls	r3, r3, #4
 8005194:	697a      	ldr	r2, [r7, #20]
 8005196:	4313      	orrs	r3, r2
 8005198:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	697a      	ldr	r2, [r7, #20]
 80051a4:	621a      	str	r2, [r3, #32]
}
 80051a6:	bf00      	nop
 80051a8:	371c      	adds	r7, #28
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr

080051b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051b2:	b480      	push	{r7}
 80051b4:	b085      	sub	sp, #20
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051ca:	683a      	ldr	r2, [r7, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f043 0307 	orr.w	r3, r3, #7
 80051d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	609a      	str	r2, [r3, #8]
}
 80051dc:	bf00      	nop
 80051de:	3714      	adds	r7, #20
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b087      	sub	sp, #28
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
 80051f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005202:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	021a      	lsls	r2, r3, #8
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	431a      	orrs	r2, r3
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	4313      	orrs	r3, r2
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005228:	b480      	push	{r7}
 800522a:	b085      	sub	sp, #20
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d101      	bne.n	8005240 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800523c:	2302      	movs	r3, #2
 800523e:	e05a      	b.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a21      	ldr	r2, [pc, #132]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d022      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d01d      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a1d      	ldr	r2, [pc, #116]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d018      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a1b      	ldr	r2, [pc, #108]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d013      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a1a      	ldr	r2, [pc, #104]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00e      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a18      	ldr	r2, [pc, #96]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d009      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d004      	beq.n	80052ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a15      	ldr	r2, [pc, #84]	; (800531c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d10c      	bne.n	80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	68ba      	ldr	r2, [r7, #8]
 80052d8:	4313      	orrs	r3, r2
 80052da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68ba      	ldr	r2, [r7, #8]
 80052e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f4:	2300      	movs	r3, #0
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40010400 	.word	0x40010400
 8005318:	40014000 	.word	0x40014000
 800531c:	40001800 	.word	0x40001800

08005320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	6812      	ldr	r2, [r2, #0]
 8005360:	f023 0101 	bic.w	r1, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	2b08      	cmp	r3, #8
 8005370:	d102      	bne.n	8005378 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005372:	2340      	movs	r3, #64	; 0x40
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e001      	b.n	800537c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005388:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800538e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005394:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800539a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80053a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80053a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 80053ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80053b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80053b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80053be:	4313      	orrs	r3, r2
 80053c0:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	4313      	orrs	r3, r2
 80053ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053d0:	693a      	ldr	r2, [r7, #16]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80053d6:	4b10      	ldr	r3, [pc, #64]	; (8005418 <FSMC_NORSRAM_Init+0xd0>)
 80053d8:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80053e0:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80053e8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	43db      	mvns	r3, r3
 80053f8:	ea02 0103 	and.w	r1, r2, r3
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4319      	orrs	r1, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800540a:	2300      	movs	r3, #0
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	0008fb7f 	.word	0x0008fb7f

0800541c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	1c5a      	adds	r2, r3, #1
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005432:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	431a      	orrs	r2, r3
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	431a      	orrs	r2, r3
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	68db      	ldr	r3, [r3, #12]
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	431a      	orrs	r2, r3
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	3b01      	subs	r3, #1
 8005458:	051b      	lsls	r3, r3, #20
 800545a:	431a      	orrs	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	695b      	ldr	r3, [r3, #20]
 8005460:	3b02      	subs	r3, #2
 8005462:	061b      	lsls	r3, r3, #24
 8005464:	431a      	orrs	r2, r3
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	4313      	orrs	r3, r2
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	3201      	adds	r2, #1
 8005470:	4319      	orrs	r1, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005478:	2300      	movs	r3, #0
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800549c:	d11d      	bne.n	80054da <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	687a      	ldr	r2, [r7, #4]
 80054a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054a6:	4b13      	ldr	r3, [pc, #76]	; (80054f4 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80054a8:	4013      	ands	r3, r2
 80054aa:	68ba      	ldr	r2, [r7, #8]
 80054ac:	6811      	ldr	r1, [r2, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	6852      	ldr	r2, [r2, #4]
 80054b2:	0112      	lsls	r2, r2, #4
 80054b4:	4311      	orrs	r1, r2
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	6892      	ldr	r2, [r2, #8]
 80054ba:	0212      	lsls	r2, r2, #8
 80054bc:	4311      	orrs	r1, r2
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	6992      	ldr	r2, [r2, #24]
 80054c2:	4311      	orrs	r1, r2
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	68d2      	ldr	r2, [r2, #12]
 80054c8:	0412      	lsls	r2, r2, #16
 80054ca:	430a      	orrs	r2, r1
 80054cc:	ea43 0102 	orr.w	r1, r3, r2
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	687a      	ldr	r2, [r7, #4]
 80054d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80054d8:	e005      	b.n	80054e6 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	687a      	ldr	r2, [r7, #4]
 80054de:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80054e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80054e6:	2300      	movs	r3, #0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3714      	adds	r7, #20
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr
 80054f4:	cff00000 	.word	0xcff00000

080054f8 <__libc_init_array>:
 80054f8:	b570      	push	{r4, r5, r6, lr}
 80054fa:	4d0d      	ldr	r5, [pc, #52]	; (8005530 <__libc_init_array+0x38>)
 80054fc:	4c0d      	ldr	r4, [pc, #52]	; (8005534 <__libc_init_array+0x3c>)
 80054fe:	1b64      	subs	r4, r4, r5
 8005500:	10a4      	asrs	r4, r4, #2
 8005502:	2600      	movs	r6, #0
 8005504:	42a6      	cmp	r6, r4
 8005506:	d109      	bne.n	800551c <__libc_init_array+0x24>
 8005508:	4d0b      	ldr	r5, [pc, #44]	; (8005538 <__libc_init_array+0x40>)
 800550a:	4c0c      	ldr	r4, [pc, #48]	; (800553c <__libc_init_array+0x44>)
 800550c:	f000 f820 	bl	8005550 <_init>
 8005510:	1b64      	subs	r4, r4, r5
 8005512:	10a4      	asrs	r4, r4, #2
 8005514:	2600      	movs	r6, #0
 8005516:	42a6      	cmp	r6, r4
 8005518:	d105      	bne.n	8005526 <__libc_init_array+0x2e>
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005520:	4798      	blx	r3
 8005522:	3601      	adds	r6, #1
 8005524:	e7ee      	b.n	8005504 <__libc_init_array+0xc>
 8005526:	f855 3b04 	ldr.w	r3, [r5], #4
 800552a:	4798      	blx	r3
 800552c:	3601      	adds	r6, #1
 800552e:	e7f2      	b.n	8005516 <__libc_init_array+0x1e>
 8005530:	080098c0 	.word	0x080098c0
 8005534:	080098c0 	.word	0x080098c0
 8005538:	080098c0 	.word	0x080098c0
 800553c:	080098c4 	.word	0x080098c4

08005540 <memset>:
 8005540:	4402      	add	r2, r0
 8005542:	4603      	mov	r3, r0
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <memset+0xa>
 8005548:	4770      	bx	lr
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <memset+0x4>

08005550 <_init>:
 8005550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005552:	bf00      	nop
 8005554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005556:	bc08      	pop	{r3}
 8005558:	469e      	mov	lr, r3
 800555a:	4770      	bx	lr

0800555c <_fini>:
 800555c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555e:	bf00      	nop
 8005560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005562:	bc08      	pop	{r3}
 8005564:	469e      	mov	lr, r3
 8005566:	4770      	bx	lr
